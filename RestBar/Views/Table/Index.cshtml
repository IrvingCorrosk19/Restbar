@model IEnumerable<RestBar.Models.Table>
@using System.Globalization
@{
    ViewData["Title"] = "Mesas";
}

<!-- Hero Section -->
<div class="tables-hero">
    <div class="hero-content">
        <div class="hero-text">
            <h1>Gestión de Mesas</h1>
            <p>Administra y monitorea el estado de tus mesas en tiempo real</p>
        </div>
        <div class="hero-actions">
            <button type="button" class="btn btn-hero" data-bs-toggle="modal" data-bs-target="#createTableModal">
                <i class="fas fa-plus"></i> Nueva Mesa
            </button>
        </div>
    </div>
</div>

<!-- Main Content -->
<div class="tables-container">
    <div class="container-fluid">
        <!-- Filters Section -->
        <div class="filters-section">
            <div class="row g-3">
                <div class="col-md-3">
                    <div class="filter-group">
                        <label class="filter-label">Buscar mesa</label>
                        <div class="filter-input">
                            <i class="fas fa-search"></i>
                            <input type="text" id="searchTableInput" placeholder="Buscar número de mesa...">
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="filter-group">
                        <label class="filter-label">Área</label>
                        <div class="filter-select">
                            <select id="areaFilter">
                                <option value="">Todas las áreas</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="filter-group">
                        <label class="filter-label">Estado</label>
                        <div class="filter-select">
                            <select id="statusFilter">
                                <option value="">Todos los estados</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="filter-group">
                        <label class="filter-label">Capacidad mínima</label>
                        <div class="filter-input">
                            <i class="fas fa-users"></i>
                            <input type="number" id="capacityFilter" placeholder="Capacidad mínima">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tables Grid -->
        <div class="tables-grid" id="tablesGrid">
            @foreach (var item in Model)
            {
                <div class="table-card-wrapper">
                    <div class="table-card">
                        <div class="table-header">
                            <div class="table-number">
                                <i class="fas fa-chair"></i>
                                <span>Mesa @item.TableNumber</span>
                            </div>
                            <div class="table-actions">
                                <button class="action-btn" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" onclick="editTable('@item.Id')">
                                        <i class="fas fa-edit"></i>Editar
                                    </a></li>
                                    <li><a class="dropdown-item" href="#" onclick="deleteTable('@item.Id')">
                                        <i class="fas fa-trash"></i>Eliminar
                                    </a></li>
                                </ul>
                            </div>
                        </div>
                        
                        <div class="table-status">
                            <div class="status-indicator">
                                <span class="status-dot" data-status="@(item.Status ?? "")" title="@(item.Status ?? "")"></span>
                                <span class="status-text">@(item.Status ?? "Sin estado")</span>
                            </div>
                        </div>
                        
                        <div class="table-info">
                            <div class="info-grid">
                                <div class="info-item">
                                    <div class="info-icon">
                                        <i class="fas fa-map-marker-alt"></i>
                                    </div>
                                    <div class="info-content">
                                        <span class="info-label">Área</span>
                                        <span class="info-value">@(item.Area?.Name ?? "Sin área")</span>
                                    </div>
                                </div>
                                
                                <div class="info-item">
                                    <div class="info-icon">
                                        <i class="fas fa-users"></i>
                                    </div>
                                    <div class="info-content">
                                        <span class="info-label">Capacidad</span>
                                        <span class="info-value">@(item.Capacity ?? 0) personas</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="table-badge">
                                <span class="badge @(item.IsActive == true ? "badge-active" : "badge-inactive")">
                                    @(item.IsActive == true ? "Activa" : "Inactiva")
                                </span>
                            </div>
                        </div>
                        
                        <div class="table-overlay"></div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal de Creación -->
<div class="modal fade modern-modal" id="createTableModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus-circle"></i>
                    Nueva Mesa
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createTableForm">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Número de Mesa</label>
                            <input type="number" class="form-control modern-input" name="TableNumber" min="1" step="1" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Área</label>
                            <div class="input-group">
                                <select class="form-select modern-select" name="AreaId" id="tableAreaSelect">
                                    <option value="">Seleccione un área</option>
                                </select>
                                <button class="btn btn-outline-primary" type="button" id="btnAddArea" data-bs-toggle="modal" data-bs-target="#createAreaModal" title="Agregar área">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Capacidad</label>
                            <input type="number" class="form-control modern-input" name="Capacity" min="1" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Estado</label>
                            <select class="form-select modern-select" name="Status" required>
                                <option value="Disponible">Disponible</option>
                                <option value="Ocupada">Ocupada</option>
                                <option value="Reservada">Reservada</option>
                                <option value="EnEspera">En espera</option>
                                <option value="Atendida">Atendida</option>
                                <option value="EnPreparacion">En preparación</option>
                                <option value="Servida">Servida</option>
                                <option value="ParaPago">Para pago</option>
                                <option value="Pagada">Pagada</option>
                                <option value="Bloqueada">Bloqueada</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check modern-check">
                            <input type="checkbox" class="form-check-input" name="IsActive" checked>
                            <label class="form-check-label">Activa</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary modern-btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary modern-btn-primary" onclick="createTable()">Crear Mesa</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Edición -->
<div class="modal fade modern-modal" id="editTableModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-edit"></i>
                    Editar Mesa
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editTableForm">
                    <input type="hidden" name="Id">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Número de Mesa</label>
                            <input type="number" class="form-control modern-input" name="TableNumber" min="1" step="1" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Área</label>
                            <div class="input-group">
                                <select class="form-select modern-select" name="AreaId">
                                    <option value="">Seleccione un área</option>
                                </select>
                                <button class="btn btn-outline-primary" type="button" data-bs-toggle="modal" data-bs-target="#createAreaModal" title="Agregar área">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Capacidad</label>
                            <input type="number" class="form-control modern-input" name="Capacity" min="1" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Estado</label>
                            <select class="form-select modern-select" name="Status" required>
                                <option value="Disponible">Disponible</option>
                                <option value="Ocupada">Ocupada</option>
                                <option value="Reservada">Reservada</option>
                                <option value="EnEspera">En espera</option>
                                <option value="Atendida">Atendida</option>
                                <option value="EnPreparacion">En preparación</option>
                                <option value="Servida">Servida</option>
                                <option value="ParaPago">Para pago</option>
                                <option value="Pagada">Pagada</option>
                                <option value="Bloqueada">Bloqueada</option>
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check modern-check">
                            <input type="checkbox" class="form-check-input" name="IsActive">
                            <label class="form-check-label">Activa</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary modern-btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary modern-btn-primary" onclick="updateTable()">Guardar Cambios</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para crear área -->
<div class="modal fade modern-modal" id="createAreaModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-map-marker-alt"></i>
                    Nueva Área
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createAreaForm">
                    <div class="mb-3">
                        <label class="form-label">Nombre</label>
                        <input type="text" class="form-control modern-input" name="Name" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary modern-btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary modern-btn-primary" id="saveAreaBtn">Guardar Área</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #34495e;
            --accent-color: #e67e22;
            --light-color: #ecf0f1;
            --dark-color: #1a252f;
            --success-color: #27ae60;
            --danger-color: #e74c3c;
            --warning-color: #f39c12;
            --info-color: #3498db;
            --purple-color: #9b59b6;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, var(--light-color) 0%, #bdc3c7 100%);
            min-height: 100vh;
        }

        /* Hero Section */
        .tables-hero {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }

        .tables-hero::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="tables" patternUnits="userSpaceOnUse" width="20" height="20"><circle cx="10" cy="10" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23tables)"/></svg>');
            animation: float 20s ease-in-out infinite;
        }

        @@keyframes float {
            0%, 100% { transform: translate(0, 0) rotate(0deg); }
            50% { transform: translate(-20px, -20px) rotate(180deg); }
        }

        .hero-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem;
            position: relative;
            z-index: 1;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .hero-text h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .hero-text p {
            font-size: 1.1rem;
            opacity: 0.9;
            margin: 0;
        }

        .btn-hero {
            background: linear-gradient(45deg, var(--accent-color), #f39c12);
            border: none;
            color: white;
            padding: 1rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 12px;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-hero:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(230, 126, 34, 0.3);
            background: linear-gradient(45deg, #d35400, var(--accent-color));
            color: white;
        }

        /* Tables Container */
        .tables-container {
            padding: 2rem 0;
        }

        /* Filters Section */
        .filters-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .filter-label {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .filter-input {
            position: relative;
        }

        .filter-input i {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
            z-index: 1;
        }

        .filter-input input {
            width: 100%;
            padding: 1rem 1rem 1rem 3rem;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .filter-input input:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 0.2rem rgba(230, 126, 34, 0.25);
            background: white;
        }

        .filter-select select {
            width: 100%;
            padding: 1rem;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .filter-select select:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 0.2rem rgba(230, 126, 34, 0.25);
            background: white;
        }

        /* Tables Grid */
        .tables-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 2rem;
        }

        /* Table Cards */
        .table-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            overflow: hidden;
            position: relative;
            transition: all 0.4s ease;
            border: none;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            cursor: pointer;
        }

        .table-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .table-header {
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #e9ecef;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
        }

        .table-number {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1.4rem;
            font-weight: 600;
        }

        .table-number i {
            font-size: 1.5rem;
        }

        .action-btn {
            background: rgba(255, 255, 255, 0.1);
            border: none;
            color: white;
            font-size: 1.2rem;
            padding: 0.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: scale(1.1);
        }

        .table-status {
            padding: 1.5rem;
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .status-dot {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            position: relative;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.3);
            animation: status-pulse 2s infinite alternate;
        }

        .status-text {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        /* Status Colors */
        .status-dot[data-status="Disponible"] { background: linear-gradient(45deg, #27ae60, #2ecc71); }
        .status-dot[data-status="Ocupada"] { background: linear-gradient(45deg, #e74c3c, #c0392b); }
        .status-dot[data-status="Reservada"] { background: linear-gradient(45deg, #f39c12, #e67e22); }
        .status-dot[data-status="En espera"] { background: linear-gradient(45deg, #fd7e14, #e67e22); }
        .status-dot[data-status="Atendida"] { background: linear-gradient(45deg, #3498db, #2980b9); }
        .status-dot[data-status="En preparación"] { background: linear-gradient(45deg, #9b59b6, #8e44ad); }
        .status-dot[data-status="Servida"] { background: linear-gradient(45deg, #795548, #5d4037); }
        .status-dot[data-status="Para pago"] { background: linear-gradient(45deg, #34495e, #2c3e50); }
        .status-dot[data-status="Pagada"] { background: linear-gradient(45deg, #95a5a6, #7f8c8d); }
        .status-dot[data-status="Bloqueada"] { background: linear-gradient(45deg, #343a40, #212529); }

        @@keyframes status-pulse {
            0% { box-shadow: 0 0 15px 3px rgba(0, 0, 0, 0.2); }
            100% { box-shadow: 0 0 25px 8px rgba(0, 0, 0, 0.4); }
        }

        .table-info {
            padding: 1.5rem;
        }

        .info-grid {
            display: grid;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .info-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            background: #f8f9fa;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

        .info-item:hover {
            background: #e9ecef;
            transform: translateX(5px);
        }

        .info-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(45deg, var(--accent-color), #f39c12);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

        .info-content {
            flex: 1;
        }

        .info-label {
            display: block;
            font-size: 0.9rem;
            color: #666;
            margin-bottom: 0.2rem;
        }

        .info-value {
            display: block;
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .table-badge {
            display: flex;
            justify-content: center;
        }

        /* Badges */
        .badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .badge-active {
            background: linear-gradient(45deg, var(--success-color), #2ecc71);
            color: white;
        }

        .badge-inactive {
            background: linear-gradient(45deg, var(--danger-color), #e74c3c);
            color: white;
        }

        .table-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transform: translateX(-100%);
            transition: transform 0.6s ease;
        }

        .table-card:hover .table-overlay {
            transform: translateX(100%);
        }

        /* Modern Modals */
        .modern-modal .modal-content {
            border: none;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .modern-modal .modal-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            border-radius: 20px 20px 0 0;
            padding: 1.5rem 2rem;
        }

        .modern-modal .modal-title {
            font-size: 1.3rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modern-modal .btn-close {
            background: none;
            border: none;
            color: white;
            opacity: 0.8;
        }

        .modern-modal .btn-close:hover {
            opacity: 1;
        }

        .modern-modal .modal-body {
            padding: 2rem;
        }

        .modern-modal .modal-footer {
            padding: 1.5rem 2rem;
            border-top: 1px solid #e9ecef;
        }

        /* Modern Form Elements */
        .modern-input, .modern-select {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 1rem;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .modern-input:focus, .modern-select:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 0.2rem rgba(230, 126, 34, 0.25);
            background: white;
        }

        .modern-check {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modern-check .form-check-input {
            width: 1.2rem;
            height: 1.2rem;
            border-radius: 6px;
            border: 2px solid #e9ecef;
            background: #f8f9fa;
        }

        .modern-check .form-check-input:checked {
            background: var(--accent-color);
            border-color: var(--accent-color);
        }

        .modern-btn-primary {
            background: linear-gradient(45deg, var(--accent-color), #f39c12);
            border: none;
            color: white;
            padding: 1rem 2rem;
            font-weight: 600;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

        .modern-btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(230, 126, 34, 0.3);
            background: linear-gradient(45deg, #d35400, var(--accent-color));
            color: white;
        }

        .modern-btn-secondary {
            background: #6c757d;
            border: none;
            color: white;
            padding: 1rem 2rem;
            font-weight: 600;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

        .modern-btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
            color: white;
        }

        /* Dropdown Menus */
        .dropdown-menu {
            border: none;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 0.5rem 0;
        }

        .dropdown-item {
            padding: 0.75rem 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .dropdown-item:hover {
            background: var(--accent-color);
            color: white;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .hero-content {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .hero-text h1 {
                font-size: 2rem;
            }

            .tables-grid {
                grid-template-columns: 1fr;
            }

            .filters-section {
                padding: 1rem;
            }
        }

        @@media (max-width: 480px) {
            .tables-container {
                padding: 1rem 0;
            }

            .table-card {
                margin: 0 1rem;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        $(document).ready(function () {
            loadAreas(populateAreaFilter);
            populateStatusFilter();
            $('#searchTableInput').on('keyup', filterTables);
            $('#areaFilter').on('change', filterTables);
            $('#statusFilter').on('change', filterTables);
            $('#capacityFilter').on('input', filterTables);
            
            // Limpiar el formulario al cerrar el modal de área
            $('#createAreaModal').on('hidden.bs.modal', function () {
                $('#createAreaForm')[0].reset();
            });
            
            // Guardar nueva área
            $('#saveAreaBtn').on('click', function () {
                const form = $('#createAreaForm');
                const data = {
                    Name: form.find('[name="Name"]').val()
                };
                if (!data.Name || data.Name.trim() === "") {
                    Swal.fire('Error', 'El nombre es requerido', 'error');
                    return;
                }
                Swal.fire({
                    title: 'Creando área...',
                    allowOutsideClick: false,
                    didOpen: () => { Swal.showLoading(); }
                });
                $.ajax({
                    url: '/Area/CreateAjax',
                    type: 'POST',
                    data: data,
                    success: function (res) {
                        Swal.close();
                        if (res.success) {
                            $('#createAreaModal').modal('hide');
                            form[0].reset();
                            // Recargar áreas y seleccionar la nueva
                            loadAreas(function () {
                                $('#tableAreaSelect').val(res.data.id);
                                $('#editTableForm select[name="AreaId"]').val(res.data.id);
                            });
                            Swal.fire('¡Éxito!', 'Área creada correctamente.', 'success');
                        } else {
                            Swal.fire('Error', res.message || 'No se pudo crear el área.', 'error');
                        }
                    },
                    error: function () {
                        Swal.close();
                        Swal.fire('Error', 'No se pudo crear el área.', 'error');
                    }
                });
            });
        });

        function loadAreas(callback) {
            $.get('/Table/GetAreas', function (res) {
                if (res.success) {
                    const selects = ['#tableAreaSelect', '#editTableForm select[name="AreaId"]'];
                    selects.forEach(selectId => {
                        const select = $(selectId);
                        const current = select.val();
                        select.empty().append('<option value="">Seleccione un área</option>');
                        res.data.forEach(area => {
                            select.append(`<option value="${area.id}">${area.name}</option>`);
                        });
                        select.val(current);
                    });
                    if (callback) callback();
                }
            });
        }

        function populateAreaFilter() {
            $.get('/Table/GetAreas', function (res) {
                if (res.success) {
                    const select = $('#areaFilter');
                    const current = select.val();
                    select.empty().append('<option value="">Todas las áreas</option>');
                    res.data.forEach(area => {
                        select.append(`<option value="${area.name}">${area.name}</option>`);
                    });
                    select.val(current);
                }
            });
        }

        function populateStatusFilter() {
            const estados = [
                'Disponible', 'Ocupada', 'Reservada', 'En espera', 'Atendida', 'En preparación', 'Servida', 'Para pago', 'Pagada', 'Bloqueada'
            ];
            const select = $('#statusFilter');
            const current = select.val();
            select.empty().append('<option value="">Todos los estados</option>');
            estados.forEach(e => {
                select.append(`<option value="${e}">${e}</option>`);
            });
            select.val(current);
        }

        function filterTables() {
            const searchTerm = $('#searchTableInput').val().toLowerCase();
            const area = $('#areaFilter').val();
            const status = $('#statusFilter').val();
            const minCapacity = parseInt($('#capacityFilter').val() || 0);

            $('.table-card').each(function () {
                const card = $(this);
                const tableNumber = card.find('.table-number span').text().replace('Mesa', '').trim().toLowerCase();
                const areaName = card.find('.info-value').first().text().trim();
                const estado = card.find('.status-text').text().trim();
                const capacidad = parseInt(card.find('.info-value').eq(1).text().replace('personas', '').trim()) || 0;

                const matchesSearch = tableNumber.includes(searchTerm);
                const matchesArea = area === '' || areaName === area;
                const matchesStatus = status === '' || estado === status;
                const matchesCapacity = isNaN(minCapacity) || capacidad >= minCapacity;

                card.closest('.table-card-wrapper').toggle(matchesSearch && matchesArea && matchesStatus && matchesCapacity);
            });
        }

        window.createTable = function () {
            const form = $('#createTableForm');
            const formData = {};
            let errors = [];
            form.serializeArray().forEach(item => {
                formData[item.name] = item.value;
            });
            formData.TableNumber = parseInt(formData.TableNumber || 0);
            formData.Capacity = parseInt(formData.Capacity || 0);
            formData.IsActive = form.find('[name="IsActive"]').is(':checked');
            formData.AreaId = formData.AreaId || null;
            formData.Status = formData.Status || null;

            // Validaciones
            if (!formData.TableNumber || isNaN(formData.TableNumber) || formData.TableNumber <= 0) {
                errors.push('El número de mesa es requerido y debe ser un número entero mayor a 0');
            }
            if (!formData.Capacity || formData.Capacity <= 0) {
                errors.push('La capacidad debe ser mayor a 0');
            }
            if (!formData.AreaId) {
                errors.push('El área es requerida');
            }
            if (!formData.Status) {
                errors.push('El estado es requerido');
            }
            if (errors.length > 0) {
                Swal.fire({
                    title: 'Error de validación',
                    html: errors.join('<br>'),
                    icon: 'error'
                });
                return;
            }
            // Antes de enviar, convertir TableNumber a string
            formData.TableNumber = formData.TableNumber.toString();
            Swal.fire({
                title: 'Creando mesa...',
                allowOutsideClick: false,
                didOpen: () => { Swal.showLoading(); }
            });
            $.ajax({
                url: '/Table/Create',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function (response) {
                    Swal.close();
                    if (response.success) {
                        $('#createTableModal').modal('hide');
                        location.reload();
                        showSuccess('Mesa creada exitosamente');
                    } else {
                        showError(response.message);
                    }
                },
                error: function () {
                    Swal.close();
                    showError('Error al crear la mesa');
                }
            });
        }

        window.editTable = function (id) {
            Swal.fire({
                title: 'Cargando...',
                allowOutsideClick: false,
                didOpen: () => { Swal.showLoading(); }
            });
            loadAreas(function () {
                $.ajax({
                    url: `/Table/Get/${id}`,
                    method: 'GET',
                    success: function (response) {
                        Swal.close();
                        if (response.success) {
                            const table = response.data;
                            const form = $('#editTableForm');
                            form[0].reset();
                            form.find('[name="Id"]').val(table.id);
                            form.find('[name="TableNumber"]').val(table.tableNumber);
                            form.find('[name="Capacity"]').val(table.capacity);
                            form.find('[name="Status"]').val(table.status);
                            form.find('[name="IsActive"]').prop('checked', table.isActive);
                            if (table.areaId) {
                                form.find('[name="AreaId"]').val(table.areaId);
                            }
                            const editModal = new bootstrap.Modal(document.getElementById('editTableModal'));
                            editModal.show();
                        } else {
                            showError(response.message || 'Error al cargar la mesa');
                        }
                    },
                    error: function () {
                        Swal.close();
                        showError('Error al cargar la mesa.');
                    }
                });
            });
        }

        window.updateTable = function () {
            const form = $('#editTableForm');
            const formData = {};
            let errors = [];
            form.serializeArray().forEach(item => {
                formData[item.name] = item.value;
            });
            formData.TableNumber = parseInt(formData.TableNumber || 0);
            formData.Capacity = parseInt(formData.Capacity || 0);
            formData.IsActive = form.find('[name="IsActive"]').is(':checked');
            formData.AreaId = formData.AreaId || null;
            formData.Status = formData.Status || null;

            // Validaciones
            if (!formData.TableNumber || isNaN(formData.TableNumber) || formData.TableNumber <= 0) {
                errors.push('El número de mesa es requerido y debe ser un número entero mayor a 0');
            }
            if (!formData.Capacity || formData.Capacity <= 0) {
                errors.push('La capacidad debe ser mayor a 0');
            }
            if (!formData.AreaId) {
                errors.push('El área es requerida');
            }
            if (!formData.Status) {
                errors.push('El estado es requerido');
            }
            if (errors.length > 0) {
                Swal.fire({
                    title: 'Error de validación',
                    html: errors.join('<br>'),
                    icon: 'error'
                });
                return;
            }
            // Antes de enviar, convertir TableNumber a string
            formData.TableNumber = formData.TableNumber.toString();
            Swal.fire({
                title: 'Actualizando mesa...',
                allowOutsideClick: false,
                didOpen: () => { Swal.showLoading(); }
            });
            $.ajax({
                url: `/Table/Edit/${formData.Id}`,
                method: 'PUT',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function (response) {
                    Swal.close();
                    if (response.success) {
                        $('#editTableModal').modal('hide');
                        showSuccess('Mesa actualizada exitosamente');
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    } else {
                        showError(response.message || 'Error al actualizar la mesa');
                    }
                },
                error: function () {
                    Swal.close();
                    showError('Error al actualizar la mesa.');
                }
            });
        }

        window.deleteTable = function (id) {
            Swal.fire({
                title: '¿Estás seguro?',
                text: "Esta acción no se puede deshacer",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#e74c3c',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: `/Table/Delete/${id}`,
                        method: 'DELETE',
                        success: function (response) {
                            if (response.success) {
                                location.reload();
                                showSuccess('Mesa eliminada exitosamente');
                            } else {
                                showError(response.message);
                            }
                        },
                        error: function () {
                            showError('Error al eliminar la mesa');
                        }
                    });
                }
            });
        }

        function showSuccess(message) {
            Swal.fire('¡Éxito!', message, 'success');
        }

        function showError(message) {
            Swal.fire('Error', message, 'error');
        }
    </script>
} 