@model IEnumerable<RestBar.Models.Product>
@using System.Globalization
@{
    ViewData["Title"] = "Productos";
}

<!-- Hero Section -->
<div class="products-hero">
    <div class="hero-content">
        <div class="hero-text">
            <h1>Gestión de Productos</h1>
            <p>Administra tu catálogo de productos de manera eficiente</p>
        </div>
        <div class="hero-actions">
            <button type="button" class="btn btn-hero" data-bs-toggle="modal" data-bs-target="#createProductModal">
                <i class="fas fa-plus"></i> Nuevo Producto
            </button>
        </div>
    </div>
</div>

<!-- Main Content -->
<div class="products-container">
    <div class="container-fluid">
        <!-- Filters Section -->
        <div class="filters-section">
            <div class="row g-3">
                <div class="col-md-4">
                    <div class="filter-group">
                        <label class="filter-label">Buscar productos</label>
                        <div class="filter-input">
                            <i class="fas fa-search"></i>
                            <input type="text" id="searchInput" placeholder="Buscar productos...">
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="filter-group">
                        <label class="filter-label">Categoría</label>
                        <div class="filter-select">
                            <select id="categoryFilter">
                                <option value="">Todas las categorías</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="filter-group">
                        <label class="filter-label">Estado</label>
                        <div class="filter-select">
                            <select id="statusFilter">
                                <option value="">Todos los estados</option>
                                <option value="true">Activos</option>
                                <option value="false">Inactivos</option>
                            </select>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="products-grid" id="productsGrid">
            @foreach (var item in Model)
            {
                <div class="product-card-wrapper">
                    <div class="product-card">
                        <div class="product-header">
                            <h3 class="product-name">@item.Name</h3>
                            <div class="product-actions">
                                <button class="action-btn" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" onclick="editProduct('@item.Id')">
                                        <i class="fas fa-edit"></i>Editar
                                    </a></li>
                                    <li><a class="dropdown-item" href="#" onclick="deleteProduct('@item.Id')">
                                        <i class="fas fa-trash"></i>Eliminar
                                    </a></li>
                                </ul>
                            </div>
                        </div>
                        
                        <div class="product-image">
                            @if (!string.IsNullOrEmpty(item.ImageUrl))
                            {
                                <img src="@item.ImageUrl" alt="@item.Name">
                            }
                            else
                            {
                                <div class="no-image">
                                    <i class="fas fa-image"></i>
                                </div>
                            }
                        </div>
                        
                        <div class="product-info">
                            <div class="product-description">
                                @(!string.IsNullOrWhiteSpace(item.Description) ? item.Description : "Sin descripción")
                            </div>
                            
                            <div class="product-details">
                                <div class="detail-item">
                                    <span class="label">Categoría:</span>
                                    <span class="badge badge-category">@(item.Category?.Name ?? "Sin categoría")</span>
                                </div>
                                <div class="detail-item">
                                    <span class="label">Precio:</span>
                                    <span class="price">@string.Format(CultureInfo.InvariantCulture, "${0:0.00}", item.Price)</span>
                                </div>
                                <div class="detail-item">
                                    <span class="label">Costo:</span>
                                    <span class="cost">@string.Format(CultureInfo.InvariantCulture, "${0:0.00}", item.Cost)</span>
                                </div>
                                <div class="detail-item">
                                    <span class="label">Estado:</span>
                                    <span class="badge @(((bool?)item.IsActive).GetValueOrDefault() ? "badge-active" : "badge-inactive")">
                                        @(((bool?)item.IsActive).GetValueOrDefault() ? "Activo" : "Inactivo")
                                    </span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="product-overlay"></div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Modal de Creación -->
<div class="modal fade modern-modal" id="createProductModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus-circle"></i>
                    Nuevo Producto
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createProductForm">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Nombre</label>
                            <input type="text" class="form-control modern-input" name="Name" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Categoría</label>
                            <div class="input-group">
                                <select class="form-select modern-select" name="CategoryId" id="productCategorySelect">
                                    <option value="">Seleccione una categoría</option>
                                </select>
                                <button class="btn btn-outline-primary" type="button" id="btnAddCategory" data-bs-toggle="modal" data-bs-target="#createCategoryModal" title="Agregar categoría">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Estación</label>
                            <div class="input-group">
                                <select class="form-select modern-select" name="StationId" id="productStationSelect">
                                    <option value="">Seleccione una estación</option>
                                </select>
                                <button class="btn btn-outline-primary" type="button" id="btnAddStation" data-bs-toggle="modal" data-bs-target="#createStationModal" title="Agregar estación">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <textarea class="form-control modern-textarea" name="Description" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Precio</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control modern-input" name="Price" step="0.01" required>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Costo</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control modern-input" name="Cost" step="0.01" required>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Impuesto (%)</label>
                            <div class="input-group">
                                <input type="number" class="form-control modern-input" name="TaxRate" step="0.01" value="0">
                                <span class="input-group-text">%</span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Unidad</label>
                            <input type="text" class="form-control modern-input" name="Unit" placeholder="ej. kg, lt, unidad">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">URL de Imagen</label>
                            <input type="url" class="form-control modern-input" name="ImageUrl">
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check modern-check">
                            <input type="checkbox" class="form-check-input" name="IsActive" checked>
                            <label class="form-check-label">Activo</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary modern-btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary modern-btn-primary" onclick="createProduct()">Crear Producto</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Edición -->
<div class="modal fade modern-modal" id="editProductModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-edit"></i>
                    Editar Producto
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editProductForm">
                    <input type="hidden" name="Id">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Nombre</label>
                            <input type="text" class="form-control modern-input" name="Name" required>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Categoría</label>
                            <select class="form-select modern-select" name="CategoryId">
                                <option value="">Seleccione una categoría</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Estación</label>
                            <div class="input-group">
                                <select class="form-select modern-select" name="StationId">
                                    <option value="">Seleccione una estación</option>
                                </select>
                                <button class="btn btn-outline-primary" type="button" data-bs-toggle="modal" data-bs-target="#createStationModal" title="Agregar estación">
                                    <i class="fas fa-plus"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <textarea class="form-control modern-textarea" name="Description" rows="3"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Precio</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control modern-input" name="Price" step="0.01" required>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Costo</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control modern-input" name="Cost" step="0.01" required>
                            </div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label class="form-label">Impuesto (%)</label>
                            <div class="input-group">
                                <input type="number" class="form-control modern-input" name="TaxRate" step="0.01" value="0">
                                <span class="input-group-text">%</span>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Unidad</label>
                            <input type="text" class="form-control modern-input" name="Unit" placeholder="ej. kg, lt, unidad">
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">URL de Imagen</label>
                            <input type="url" class="form-control modern-input" name="ImageUrl">
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="form-check modern-check">
                            <input type="checkbox" class="form-check-input" name="IsActive">
                            <label class="form-check-label">Activo</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary modern-btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary modern-btn-primary" onclick="updateProduct()">Guardar Cambios</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para crear categoría -->
<div class="modal fade modern-modal" id="createCategoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-tags"></i>
                    Nueva Categoría
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createCategoryForm">
                    <div class="mb-3">
                        <label class="form-label">Nombre</label>
                        <input type="text" class="form-control modern-input" name="Name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Descripción</label>
                        <textarea class="form-control modern-textarea" name="Description" rows="2"></textarea>
                    </div>
                    <div class="form-check modern-check mb-3">
                        <input type="checkbox" class="form-check-input" name="IsActive" checked>
                        <label class="form-check-label">Activa</label>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary modern-btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary modern-btn-primary" id="saveCategoryBtn">Guardar Categoría</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para crear estación -->
<div class="modal fade modern-modal" id="createStationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-fire"></i>
                    Nueva Estación
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createStationForm">
                    <div class="mb-3">
                        <label class="form-label">Nombre</label>
                        <input type="text" class="form-control modern-input" name="Name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Tipo</label>
                        <input type="text" class="form-control modern-input" name="Type" placeholder="Cocina, Bar, Café, etc." required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary modern-btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary modern-btn-primary" id="saveStationBtn">Guardar Estación</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #34495e;
            --accent-color: #e67e22;
            --light-color: #ecf0f1;
            --dark-color: #1a252f;
            --success-color: #27ae60;
            --danger-color: #e74c3c;
            --warning-color: #f39c12;
            --info-color: #3498db;
            --purple-color: #9b59b6;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background: linear-gradient(135deg, var(--light-color) 0%, #bdc3c7 100%);
            min-height: 100vh;
        }

        /* Hero Section */
        .products-hero {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            color: white;
            padding: 2rem 0;
            margin-bottom: 2rem;
            position: relative;
            overflow: hidden;
        }

        .products-hero::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="products" patternUnits="userSpaceOnUse" width="20" height="20"><circle cx="10" cy="10" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23products)"/></svg>');
            animation: float 20s ease-in-out infinite;
        }

        @@keyframes float {
            0%, 100% { transform: translate(0, 0) rotate(0deg); }
            50% { transform: translate(-20px, -20px) rotate(180deg); }
        }

        .hero-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 2rem;
            position: relative;
            z-index: 1;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .hero-text h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .hero-text p {
            font-size: 1.1rem;
            opacity: 0.9;
            margin: 0;
        }

        .btn-hero {
            background: linear-gradient(45deg, var(--accent-color), #f39c12);
            border: none;
            color: white;
            padding: 1rem 2rem;
            font-size: 1.1rem;
            font-weight: 600;
            border-radius: 12px;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .btn-hero:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(230, 126, 34, 0.3);
            background: linear-gradient(45deg, #d35400, var(--accent-color));
            color: white;
        }

        /* Products Container */
        .products-container {
            padding: 2rem 0;
        }

        /* Filters Section */
        .filters-section {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .filter-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .filter-label {
            font-weight: 600;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .filter-input {
            position: relative;
        }

        .filter-input i {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #666;
            z-index: 1;
        }

        .filter-input input {
            width: 100%;
            padding: 1rem 1rem 1rem 3rem;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .filter-input input:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 0.2rem rgba(230, 126, 34, 0.25);
            background: white;
        }

        .filter-select select {
            width: 100%;
            padding: 1rem;
            border: 2px solid #e9ecef;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .filter-select select:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 0.2rem rgba(230, 126, 34, 0.25);
            background: white;
        }

        /* Products Grid */
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 2rem;
        }

        /* Product Cards */
        .product-card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            overflow: hidden;
            position: relative;
            transition: all 0.4s ease;
            border: none;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            cursor: pointer;
        }

        .product-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .product-header {
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #e9ecef;
        }

        .product-name {
            font-size: 1.4rem;
            font-weight: 600;
            color: var(--primary-color);
            margin: 0;
        }

        .action-btn {
            background: none;
            border: none;
            color: #666;
            font-size: 1.2rem;
            padding: 0.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            background: var(--accent-color);
            color: white;
        }

        .product-image {
            height: 200px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            margin: 1rem;
            border-radius: 12px;
            overflow: hidden;
        }

        .product-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .no-image {
            color: #ccc;
            font-size: 3rem;
        }

        .product-info {
            padding: 1.5rem;
        }

        .product-description {
            color: #666;
            margin-bottom: 1.5rem;
            line-height: 1.5;
        }

        .product-details {
            display: grid;
            gap: 1rem;
        }

        .detail-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .label {
            font-weight: 500;
            color: var(--primary-color);
        }

        .price {
            font-size: 1.2rem;
            font-weight: 700;
            color: var(--success-color);
        }

        .cost {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--danger-color);
        }

        /* Badges */
        .badge {
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
        }

        .badge-category {
            background: linear-gradient(45deg, var(--info-color), #5dade2);
            color: white;
        }

        .badge-active {
            background: linear-gradient(45deg, var(--success-color), #2ecc71);
            color: white;
        }

        .badge-inactive {
            background: linear-gradient(45deg, var(--danger-color), #e74c3c);
            color: white;
        }

        .product-overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
            transform: translateX(-100%);
            transition: transform 0.6s ease;
        }

        .product-card:hover .product-overlay {
            transform: translateX(100%);
        }

        /* Modern Modals */
        .modern-modal .modal-content {
            border: none;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
        }

        .modern-modal .modal-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            border-radius: 20px 20px 0 0;
            padding: 1.5rem 2rem;
        }

        .modern-modal .modal-title {
            font-size: 1.3rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modern-modal .btn-close {
            background: none;
            border: none;
            color: white;
            opacity: 0.8;
        }

        .modern-modal .btn-close:hover {
            opacity: 1;
        }

        .modern-modal .modal-body {
            padding: 2rem;
        }

        .modern-modal .modal-footer {
            padding: 1.5rem 2rem;
            border-top: 1px solid #e9ecef;
        }

        /* Modern Form Elements */
        .modern-input, .modern-textarea, .modern-select {
            border: 2px solid #e9ecef;
            border-radius: 12px;
            padding: 1rem;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }

        .modern-input:focus, .modern-textarea:focus, .modern-select:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 0.2rem rgba(230, 126, 34, 0.25);
            background: white;
        }

        .modern-check {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .modern-check .form-check-input {
            width: 1.2rem;
            height: 1.2rem;
            border-radius: 6px;
            border: 2px solid #e9ecef;
            background: #f8f9fa;
        }

        .modern-check .form-check-input:checked {
            background: var(--accent-color);
            border-color: var(--accent-color);
        }

        .modern-btn-primary {
            background: linear-gradient(45deg, var(--accent-color), #f39c12);
            border: none;
            color: white;
            padding: 1rem 2rem;
            font-weight: 600;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

        .modern-btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(230, 126, 34, 0.3);
            background: linear-gradient(45deg, #d35400, var(--accent-color));
            color: white;
        }

        .modern-btn-secondary {
            background: #6c757d;
            border: none;
            color: white;
            padding: 1rem 2rem;
            font-weight: 600;
            border-radius: 12px;
            transition: all 0.3s ease;
        }

        .modern-btn-secondary:hover {
            background: #5a6268;
            transform: translateY(-2px);
            color: white;
        }

        /* Dropdown Menus */
        .dropdown-menu {
            border: none;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            padding: 0.5rem 0;
        }

        .dropdown-item {
            padding: 0.75rem 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .dropdown-item:hover {
            background: var(--accent-color);
            color: white;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .hero-content {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }

            .hero-text h1 {
                font-size: 2rem;
            }

            .products-grid {
                grid-template-columns: 1fr;
            }

            .filters-section {
                padding: 1rem;
            }
        }

        @@media (max-width: 480px) {
            .products-container {
                padding: 1rem 0;
            }

            .product-card {
                margin: 0 1rem;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        (function () {
            $(document).ready(function () {
                loadCategories();
                loadStations();

                $('#searchInput').on('keyup', filterProducts);
                $('#categoryFilter').on('change', filterProducts);
                $('#statusFilter').on('change', filterProducts);

                $('#saveCategoryBtn').on('click', function () {
                    const form = $('#createCategoryForm');
                    const data = {
                        Name: form.find('[name="Name"]').val(),
                        Description: form.find('[name="Description"]').val(),
                        IsActive: form.find('[name="IsActive"]').is(':checked')
                    };
                    Swal.fire({
                        title: 'Creando categoría...',
                        allowOutsideClick: false,
                        didOpen: () => { Swal.showLoading(); }
                    });

                    try {
                        $.ajax({
                            url: '/Product/CreateCategoryAjax',
                            type: 'POST',
                            data: data,
                            success: function (res) {
                                try {
                                    Swal.close();
                                    if (res.success) {
                                        $('#createCategoryModal').modal('hide');
                                        form[0].reset();
                                        loadCategories(function (newId) {
                                            $('#productCategorySelect').val(res.data.id);
                                        });
                                        Swal.fire('¡Éxito!', 'Categoría creada correctamente.', 'success');
                                    } else {
                                        Swal.fire('Error', res.message || 'No se pudo crear la categoría.', 'error');
                                    }
                                } catch (innerErr) {
                                    console.error('Error en success:', innerErr);
                                    Swal.fire('Error', 'Ocurrió un problema al procesar la respuesta.', 'error');
                                }
                            },
                            error: function () {
                                Swal.close();
                                Swal.fire('Error', 'No se pudo crear la categoría.', 'error');
                            }
                        });
                    } catch (err) {
                        console.error('Error externo al ejecutar la solicitud AJAX:', err);
                        Swal.fire('Error', 'Se produjo un error inesperado.', 'error');
                    }
                });

                $('#saveStationBtn').on('click', function () {
                    const form = $('#createStationForm');
                    const data = {
                        Name: form.find('[name="Name"]').val(),
                        Type: form.find('[name="Type"]').val()
                    };
                    Swal.fire({
                        title: 'Creando estación...',
                        allowOutsideClick: false,
                        didOpen: () => { Swal.showLoading(); }
                    });
                    $.ajax({
                        url: '/Product/CreateStationAjax',
                        type: 'POST',
                        data: data,
                        success: function (res) {
                            Swal.close();
                            if (res.success) {
                                $('#createStationModal').modal('hide');
                                form[0].reset();
                                const select = $('#productStationSelect');
                                const newOption = $('<option>')
                                    .val(res.data.id)
                                    .text(`${res.data.name} (${res.data.type})`);
                                select.append(newOption);
                                select.val(res.data.id);
                                Swal.fire('¡Éxito!', 'Estación creada correctamente.', 'success');
                            } else {
                                Swal.fire('Error', res.message || 'No se pudo crear la estación.', 'error');
                            }
                        },
                        error: function () {
                            Swal.close();
                            Swal.fire('Error', 'No se pudo crear la estación.', 'error');
                        }
                    });
                });

                $('#createProductModal').on('hidden.bs.modal', function () {
                    $('#createProductForm')[0].reset();
                });

                $('#editProductModal').on('hidden.bs.modal', function () {
                    $('#editProductForm')[0].reset();
                });
            });

            function loadCategories(callback) {
                $.get('/Product/GetCategories', function (res) {
                    if (res.success) {
                        const selects = ['#productCategorySelect', '#editProductForm select[name="CategoryId"]'];
                        selects.forEach(selectId => {
                            const select = $(selectId);
                            const current = select.val();
                            select.empty().append('<option value="">Seleccione una categoría</option>');
                            if (res.data && Array.isArray(res.data)) {
                                res.data.forEach(cat => {
                                    select.append(`<option value="${cat.id || cat.Id}">${cat.name || cat.Name}</option>`);
                                });
                            }
                            if (callback && selectId === '#productCategorySelect') {
                                callback(res.data[res.data.length - 1].id || res.data[res.data.length - 1].Id);
                            } else {
                                select.val(current);
                            }
                        });
                        // Llenar el filtro de categorías
                        const filterSelect = $('#categoryFilter');
                        const filterCurrent = filterSelect.val();
                        filterSelect.empty().append('<option value="">Todas las categorías</option>');
                        if (res.data && Array.isArray(res.data)) {
                            res.data.forEach(cat => {
                                filterSelect.append(`<option value="${cat.id || cat.Id}">${cat.name || cat.Name}</option>`);
                            });
                        }
                        filterSelect.val(filterCurrent);
                    }
                });
            }

            function loadStations(callback) {
                $.get('/Station/GetStations', function (res) {
                    if (res.success) {
                        const selects = ['#productStationSelect', '#editProductForm select[name="StationId"]'];
                        selects.forEach(selectId => {
                            const select = $(selectId);
                            const current = select.val();
                            select.empty().append('<option value="">Seleccione una estación</option>');
                            if (res.data && Array.isArray(res.data)) {
                                res.data.forEach(st => {
                                    select.append(`<option value="${st.id}">${st.name} (${st.type})</option>`);
                                });
                            }
                            if (callback && selectId === '#productStationSelect') {
                                callback(res.data[res.data.length - 1].id);
                            } else {
                                select.val(current);
                            }
                        });
                    }
                });
            }

            function filterProducts() {
                const searchTerm = $('#searchInput').val().toLowerCase();
                const categoryId = $('#categoryFilter').val();
                const status = $('#statusFilter').val();

                $('.product-card').each(function () {
                    const card = $(this);
                    const name = card.find('.product-name').text().toLowerCase();
                    const category = card.find('.badge-category').text();
                    const isActive = card.find('.badge-active').length > 0;

                    const matchesSearch = name.includes(searchTerm);
                    const matchesCategory = categoryId === '' || category === $('#categoryFilter option:selected').text();
                    const matchesStatus = status === '' || (status === 'true' && isActive) || (status === 'false' && !isActive);

                    card.closest('.product-card-wrapper').toggle(matchesSearch && matchesCategory && matchesStatus);
                });
            }

            // Exponer funciones globalmente para onclick
            window.createProduct = function () {
                const form = $('#createProductForm');
                const formData = {};
                let errors = [];
                form.serializeArray().forEach(item => {
                    formData[item.name] = item.value;
                });
                formData.Price = parseFloat(formData.Price || 0);
                formData.Cost = parseFloat(formData.Cost || 0);
                formData.TaxRate = parseFloat(formData.TaxRate || 0);
                formData.IsActive = form.find('[name="IsActive"]').is(':checked');
                formData.CategoryId = formData.CategoryId || null;
                formData.StationId = formData.StationId || null;

                // Validaciones
                if (!formData.Name || formData.Name.trim() === "") {
                    errors.push('El nombre es requerido');
                }
                if (!formData.Price && formData.Price !== 0) {
                    errors.push('El precio es requerido');
                } else if (formData.Price < 0) {
                    errors.push('El precio debe ser mayor o igual a 0');
                }
                if (!formData.Cost && formData.Cost !== 0) {
                    errors.push('El costo es requerido');
                } else if (formData.Cost < 0) {
                    errors.push('El costo debe ser mayor o igual a 0');
                }
                if (formData.TaxRate < 0 || formData.TaxRate > 100) {
                    errors.push('El impuesto debe estar entre 0 y 100');
                }
                if (!formData.CategoryId) {
                    errors.push('La categoría es requerida');
                }
                if (errors.length > 0) {
                    Swal.fire({
                        title: 'Error de validación',
                        html: errors.join('<br>'),
                        icon: 'error'
                    });
                    return;
                }
                $.ajax({
                    url: '/Product/Create',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function (response) {
                        if (response.success) {
                            $('#createProductModal').modal('hide');
                            location.reload();
                            showSuccess('Producto creado exitosamente');
                        } else {
                            showError(response.message);
                        }
                    },
                    error: function () {
                        showError('Error al crear el producto');
                    }
                });
            }

            window.editProduct = function (id) {
                // Mostrar indicador de carga
                Swal.fire({
                    title: 'Cargando...',
                    allowOutsideClick: false,
                    didOpen: () => { Swal.showLoading(); }
                });

                // Cargar categorías y estaciones
                Promise.all([
                    new Promise(resolve => loadCategories(resolve)),
                    new Promise(resolve => loadStations(resolve))
                ]).then(() => {
                    // Obtener los datos del producto
                    $.ajax({
                        url: `/Product/Get/${id}`,
                        method: 'GET',
                        success: function (response) {
                            Swal.close();
                            if (response.success) {
                                const product = response.data;
                                if (product) {
                                    const form = $('#editProductForm');
                                    
                                    // Limpiar el formulario primero
                                    form[0].reset();
                                    
                                    // Establecer los valores del formulario
                                    form.find('[name="Id"]').val(product.id);
                                    form.find('[name="Name"]').val(product.name);
                                    form.find('[name="Description"]').val(product.description);
                                    form.find('[name="Price"]').val(product.price);
                                    form.find('[name="Cost"]').val(product.cost);
                                    form.find('[name="TaxRate"]').val(product.taxRate);
                                    form.find('[name="Unit"]').val(product.unit);
                                    form.find('[name="ImageUrl"]').val(product.imageUrl);
                                    form.find('[name="IsActive"]').prop('checked', product.isActive);
                                    
                                    // Establecer la categoría
                                    if (product.categoryId) {
                                        form.find('[name="CategoryId"]').val(product.categoryId);
                                    }
                                    
                                    // Establecer la estación
                                    if (product.stationId) {
                                        form.find('[name="StationId"]').val(product.stationId);
                                    }

                                    // Mostrar el modal
                                    const editModal = new bootstrap.Modal(document.getElementById('editProductModal'));
                                    editModal.show();
                                } else {
                                    showError('No se encontró el producto');
                                }
                            } else {
                                showError(response.message || 'Error al cargar el producto');
                            }
                        },
                        error: function (xhr, status, error) {
                            Swal.close();
                            console.error('Error:', error);
                            showError('Error al cargar el producto. Por favor, intente nuevamente.');
                        }
                    });
                });
            }

            window.updateProduct = function () {
                const form = $('#editProductForm');
                const formData = {};
                let errors = [];
                form.serializeArray().forEach(item => {
                    formData[item.name] = item.value;
                });
                formData.Price = parseFloat(formData.Price || 0);
                formData.Cost = parseFloat(formData.Cost || 0);
                formData.TaxRate = parseFloat(formData.TaxRate || 0);
                formData.IsActive = form.find('[name="IsActive"]').is(':checked');
                formData.CategoryId = formData.CategoryId || null;
                formData.StationId = formData.StationId || null;

                // Validaciones
                if (!formData.Name || formData.Name.trim() === "") {
                    errors.push('El nombre es requerido');
                }
                if (!formData.Price && formData.Price !== 0) {
                    errors.push('El precio es requerido');
                } else if (formData.Price < 0) {
                    errors.push('El precio debe ser mayor o igual a 0');
                }
                if (!formData.Cost && formData.Cost !== 0) {
                    errors.push('El costo es requerido');
                } else if (formData.Cost < 0) {
                    errors.push('El costo debe ser mayor o igual a 0');
                }
                if (formData.TaxRate < 0 || formData.TaxRate > 100) {
                    errors.push('El impuesto debe estar entre 0 y 100');
                }
                if (!formData.CategoryId) {
                    errors.push('La categoría es requerida');
                }
                if (errors.length > 0) {
                    Swal.fire({
                        title: 'Error de validación',
                        html: errors.join('<br>'),
                        icon: 'error'
                    });
                    return;
                }
                Swal.fire({
                    title: 'Actualizando producto...',
                    allowOutsideClick: false,
                    didOpen: () => { Swal.showLoading(); }
                });
                $.ajax({
                    url: `/Product/Edit/${formData.Id}`,
                    method: 'PUT',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function (response) {
                        Swal.close();
                        if (response.success) {
                            $('#editProductModal').modal('hide');
                            showSuccess('Producto actualizado exitosamente');
                            setTimeout(() => {
                                location.reload();
                            }, 1000);
                        } else {
                            if (response.errors && response.errors.length > 0) {
                                const errorMessage = response.errors.join('\n');
                                Swal.fire({
                                    title: 'Error de validación',
                                    html: errorMessage.replace(/\n/g, '<br>'),
                                    icon: 'error'
                                });
                            } else {
                                showError(response.message || 'Error al actualizar el producto');
                            }
                        }
                    },
                    error: function (xhr, status, error) {
                        Swal.close();
                        console.error('Error:', error);
                        showError('Error al actualizar el producto. Por favor, intente nuevamente.');
                    }
                });
            }

            window.deleteProduct = function (id) {
                Swal.fire({
                    title: '¿Estás seguro?',
                    text: "Esta acción no se puede deshacer",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#e74c3c',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Sí, eliminar',
                    cancelButtonText: 'Cancelar'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: `/Product/Delete/${id}`,
                            method: 'DELETE',
                            success: function (response) {
                                if (response.success) {
                                    location.reload();
                                    showSuccess('Producto eliminado exitosamente');
                                } else {
                                    showError(response.message);
                                }
                            },
                            error: function () {
                                showError('Error al eliminar el producto');
                            }
                        });
                    }
                });
            }

            function showSuccess(message) {
                Swal.fire('¡Éxito!', message, 'success');
            }

            function showError(message) {
                Swal.fire('Error', message, 'error');
            }

        })();
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const productGrid = document.getElementById('productsGrid');

            if (productGrid) {
                productGrid.addEventListener('show.bs.dropdown', function (event) {
                    const card = event.target.closest('.product-card');
                    if (card) {
                        card.style.zIndex = '1000';
                    }
                });

                productGrid.addEventListener('hide.bs.dropdown', function (event) {
                    const card = event.target.closest('.product-card');
                    if (card) {
                        card.style.zIndex = '1';
                    }
                });
            }
        });
    </script>
}
