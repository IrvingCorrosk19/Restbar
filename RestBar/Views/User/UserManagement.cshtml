@{
    ViewData["Title"] = "Gesti√≥n de Usuarios y Roles";
}

<style>
    :root {
        --primary-color: #2c3e50;
        --secondary-color: #34495e;
        --accent-color: #e67e22;
        --success-color: #27ae60;
        --danger-color: #e74c3c;
        --warning-color: #f39c12;
        --info-color: #3498db;
        --light-color: #ecf0f1;
        --dark-color: #2c3e50;
        --gradient-primary: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        --shadow-light: 0 4px 6px rgba(0, 0, 0, 0.1);
        --shadow-medium: 0 8px 15px rgba(0, 0, 0, 0.15);
        --border-radius: 20px;
        --transition: all 0.3s ease;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        color: var(--dark-color);
    }

    /* Hero Section */
    .hero-section {
        background: var(--gradient-primary);
        color: white;
        padding: 3rem 0;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

    .hero-section::before {
        content: '';
        position: absolute;
        width: 200%;
        height: 200%;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
        animation: float 20s ease-in-out infinite;
        opacity: 0.1;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(180deg); }
    }

    .hero-content {
        position: relative;
        z-index: 1;
        text-align: center;
    }

    .hero-title {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 1rem;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
    }

    .hero-subtitle {
        font-size: 1.2rem;
        opacity: 0.9;
        margin-bottom: 2rem;
    }

    /* Main Content */
    .main-content {
        padding: 0 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    /* Toolbar */
    .toolbar {
        background: white;
        padding: 1.5rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-light);
        margin-bottom: 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 1rem;
    }

    .toolbar-left {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .search-box {
        position: relative;
        flex: 1;
        min-width: 300px;
    }

    .search-input {
        width: 100%;
        padding: 0.75rem 1rem 0.75rem 2.5rem;
        border: 2px solid #e1e8ed;
        border-radius: 12px;
        font-size: 1rem;
        transition: var(--transition);
    }

    .search-input:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba(231, 126, 34, 0.1);
    }

    .search-icon {
        position: absolute;
        left: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        color: #666;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--accent-color), #d35400);
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 12px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        box-shadow: var(--shadow-light);
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-medium);
    }

    /* Filters */
    .filters-section {
        background: white;
        padding: 1.5rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-light);
        margin-bottom: 2rem;
    }

    .filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1rem;
    }

    .filter-group {
        position: relative;
    }

    .filter-label {
        display: block;
        font-weight: 500;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .filter-select {
        width: 100%;
        padding: 0.6rem;
        border: 2px solid #e1e8ed;
        border-radius: 8px;
        font-size: 0.9rem;
        transition: var(--transition);
    }

    .filter-select:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba(231, 126, 34, 0.1);
    }

    /* Users Table */
    .users-container {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-light);
        overflow: hidden;
    }

    .users-header {
        background: var(--gradient-primary);
        color: white;
        padding: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .users-header h3 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .users-stats {
        display: flex;
        gap: 1rem;
        font-size: 0.9rem;
    }

    .table-container {
        overflow-x: auto;
    }

    .users-table {
        width: 100%;
        border-collapse: collapse;
    }

    .users-table th,
    .users-table td {
        padding: 1rem;
        text-align: left;
        border-bottom: 1px solid #e1e8ed;
        color: #2c3e50;
        font-weight: 500;
    }

    .users-table th {
        background: #f8f9fa;
        font-weight: 600;
        color: var(--primary-color);
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .users-table tr:hover {
        background: #f8f9fa;
    }

    .users-table td {
        font-size: 0.95rem;
        line-height: 1.4;
    }

    .users-table td:nth-child(2) { /* Email column */
        color: #2c3e50;
        font-weight: 600;
    }

    .users-table td:nth-child(4) { /* Sucursal column */
        color: #34495e;
        font-weight: 600;
    }

    .users-table td:nth-child(6) { /* Creado column */
        color: #2c3e50;
        font-weight: 500;
    }

    .text-muted {
        color: #6c757d !important;
        font-size: 0.85rem;
    }

    /* Role Badge */
    .role-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .role-admin { background: #e74c3c; color: white; }
    .role-manager { background: #3498db; color: white; }
    .role-supervisor { background: #f39c12; color: white; }
    .role-waiter { background: #27ae60; color: white; }
    .role-cashier { background: #9b59b6; color: white; }
    .role-chef { background: #e67e22; color: white; }
    .role-bartender { background: #1abc9c; color: white; }
    .role-inventory { background: #34495e; color: white; }
    .role-accountant { background: #95a5a6; color: white; }
    .role-support { background: #e91e63; color: white; }

    /* Status Badge */
    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .status-active { background: #d4edda; color: #155724; }
    .status-inactive { background: #f8d7da; color: #721c24; }

    /* Avatar Circle */
    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: var(--gradient-primary);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
        font-size: 1.1rem;
        text-transform: uppercase;
        box-shadow: var(--shadow-light);
        position: relative;
        overflow: hidden;
    }

    .avatar-circle::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
        animation: shine 2s infinite;
    }

    @@keyframes shine {
        0% { transform: translateX(-100%); }
        100% { transform: translateX(100%); }
    }

    /* Action Buttons */
    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .btn-edit {
        background: var(--info-color);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        cursor: pointer;
        font-size: 0.8rem;
        transition: var(--transition);
    }

    .btn-edit:hover {
        background: #2980b9;
        transform: translateY(-1px);
    }

    .btn-delete {
        background: var(--danger-color);
        color: white;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        cursor: pointer;
        font-size: 0.8rem;
        transition: var(--transition);
    }

    .btn-delete:hover {
        background: #c0392b;
        transform: translateY(-1px);
    }

    /* Modal Styles */
    .modal-content {
        border-radius: var(--border-radius);
        border: none;
        box-shadow: var(--shadow-medium);
    }

    .modal-header {
        background: var(--gradient-primary);
        color: white;
        border-bottom: none;
        border-radius: var(--border-radius) var(--border-radius) 0 0;
        padding: 1.5rem;
    }

    .modal-body {
        padding: 2rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        font-weight: 500;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 2px solid #e1e8ed;
        border-radius: 8px;
        font-size: 1rem;
        transition: var(--transition);
    }

    .form-control:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba(231, 126, 34, 0.1);
    }

    .btn-save {
        background: var(--success-color);
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
    }

    .btn-save:hover {
        background: #229954;
        transform: translateY(-1px);
    }

    .btn-cancel {
        background: #6c757d;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        margin-right: 0.5rem;
    }

    .btn-cancel:hover {
        background: #5a6268;
        transform: translateY(-1px);
    }

    /* Password fields visibility */
    .password-group {
        display: block;
    }

    .password-group.hidden {
        display: none;
    }

    .edit-password-note {
        background: #e3f2fd;
        border: 1px solid #2196f3;
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        color: #1976d2;
        font-size: 0.9rem;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .toolbar {
            flex-direction: column;
            align-items: stretch;
        }

        .search-box {
            min-width: unset;
        }

        .filters-grid {
            grid-template-columns: 1fr;
        }

        .users-stats {
            flex-direction: column;
            gap: 0.5rem;
        }

        .action-buttons {
            flex-direction: column;
        }
    }
</style>

<div class="hero-section">
    <div class="hero-content">
        <h1 class="hero-title">
            <i class="fas fa-users-cog"></i> Gesti√≥n de Usuarios
        </h1>
        <p class="hero-subtitle">
            Administra usuarios, roles y permisos del sistema
        </p>
    </div>
</div>

<div class="main-content">
    <!-- Toolbar -->
    <div class="toolbar">
        <div class="toolbar-left">
            <div class="search-box">
                <i class="fas fa-search search-icon"></i>
                <input type="text" class="search-input" id="searchInput" placeholder="Buscar usuarios...">
            </div>
        </div>
        <button class="btn-primary" onclick="showCreateUserModal()">
            <i class="fas fa-plus"></i> Nuevo Usuario
        </button>
    </div>

    <!-- Filters -->
    <div class="filters-section">
        <div class="filters-grid">
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <label for="companyFilter" class="form-label">Compa√±√≠a</label>
                            <select id="companyFilter" class="form-select">
                                <option value="">Todas las compa√±√≠as</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="branchFilter" class="form-label">Sucursal</label>
                            <select id="branchFilter" class="form-select">
                                <option value="">Todas las sucursales</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="roleFilter" class="form-label">Rol</label>
                            <select id="roleFilter" class="form-select">
                                <option value="">Todos los roles</option>
                                <option value="admin">Administrador</option>
                                <option value="manager">Gerente</option>
                                <option value="supervisor">Supervisor</option>
                                <option value="waiter">Mesero</option>
                                <option value="cashier">Cajero</option>
                                <option value="cook">Cocinero</option>
                                <option value="bartender">Bartender</option>
                                <option value="inventory">Inventarista</option>
                                <option value="accountant">Contador</option>
                                <option value="support">Soporte</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="statusFilter" class="form-label">Estado</label>
                            <select id="statusFilter" class="form-select">
                                <option value="">Todos</option>
                                <option value="true">Activo</option>
                                <option value="false">Inactivo</option>
                            </select>
                        </div>
                    </div>
        </div>
    </div>

    <!-- Users Table -->
    <div class="users-container">
        <div class="users-header">
            <h3><i class="fas fa-users"></i> Lista de Usuarios</h3>
            <div class="users-stats">
                <span id="totalUsers">Total: 0</span>
                <span id="activeUsers">Activos: 0</span>
                <span id="inactiveUsers">Inactivos: 0</span>
            </div>
        </div>
        
        <div class="table-container">
            <table class="users-table">
                <thead>
                    <tr>
                        <th>Usuario</th>
                        <th>Email</th>
                        <th>Rol</th>
                        <th>Sucursal</th>
                        <th>Estado</th>
                        <th>Creado</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody id="usersTableBody">
                    <!-- Usuarios se cargar√°n aqu√≠ -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Modal para Crear/Editar Usuario -->
<div class="modal fade" id="userModal" tabindex="-1" aria-labelledby="userModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userModalLabel">
                    <i class="fas fa-user-plus"></i> Nuevo Usuario
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="userForm">
                    <input type="hidden" id="userId" name="id">
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Nombre Completo *</label>
                                <input type="text" class="form-control" id="fullName" name="fullName" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Email *</label>
                                <input type="email" class="form-control" id="email" name="email" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Rol *</label>
                                <select class="form-control" id="role" name="role" required>
                                    <option value="">Seleccionar rol</option>
                                    <option value="admin">Administrador</option>
                                    <option value="manager">Gerente</option>
                                    <option value="supervisor">Supervisor</option>
                                    <option value="waiter">Mesero</option>
                                    <option value="cashier">Cajero</option>
                                    <option value="chef">Cocinero</option>
                                    <option value="bartender">Bartender</option>
                                    <option value="inventory">Inventarista</option>
                                    <option value="accountant">Contador</option>
                                    <option value="support">Soporte</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Compa√±√≠a</label>
                                <select class="form-control" id="modalCompanyId" name="companyId">
                                    <option value="">Seleccionar compa√±√≠a</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Sucursal</label>
                                <select class="form-control" id="branchId" name="branchId">
                                    <option value="">Seleccionar sucursal</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Estado</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="isActive" name="isActive" checked>
                                    <label class="form-check-label" for="isActive">
                                        Usuario activo
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="edit-password-note" id="editPasswordNote" style="display: none;">
                        <i class="fas fa-info-circle"></i> 
                        <strong>Nota:</strong> Deja los campos de contrase√±a vac√≠os si no deseas cambiarla.
                    </div>
                    
                    <div class="row password-group" id="passwordGroup">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Contrase√±a *</label>
                                <input type="password" class="form-control" id="password" name="password" required>
                                <small class="text-muted">M√≠nimo 8 caracteres</small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Confirmar Contrase√±a *</label>
                                <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="isActive" name="isActive" checked>
                                    <label class="form-check-label" for="isActive">
                                        Usuario activo
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn-cancel" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn-save" onclick="saveUser()">Guardar</button>
            </div>
        </div>
    </div>
</div>

<script>
// Variables globales
let users = [];
let branches = [];
let companies = [];

// Cargar compa√±√≠as
async function loadCompanies() {
    try {
        console.log('[loadCompanies] Iniciando carga de compa√±√≠as');
        const response = await fetch('/User/GetCompanies');
        const result = await response.json();
        
        console.log('[loadCompanies] Response completa:', result);
        console.log('[loadCompanies] result.success:', result.success);
        console.log('[loadCompanies] result.data:', result.data);
        console.log('[loadCompanies] typeof result.data:', typeof result.data);
        console.log('[loadCompanies] Array.isArray(result.data):', Array.isArray(result.data));
        
        if (result.success) {
            if (Array.isArray(result.data)) {
                console.log('[loadCompanies] ‚úÖ Data es un array v√°lido, cargando compa√±√≠as');
                companies = result.data;
                populateCompanySelect();
            } else {
                console.error('[loadCompanies] ‚ùå Error: result.data no es un array:', result.data);
                companies = [];
                Swal.fire('Error', 'Los datos de compa√±√≠as no tienen el formato esperado', 'error');
            }
        } else {
            console.error('[loadCompanies] ‚ùå Error al cargar compa√±√≠as:', result.message);
            companies = [];
            Swal.fire('Error', result.message || 'Error al cargar compa√±√≠as', 'error');
        }
    } catch (error) {
        console.error('[loadCompanies] ‚ùå Error de red:', error);
        companies = [];
        Swal.fire('Error', 'Error al cargar compa√±√≠as', 'error');
    }
}

// Poblar dropdown de compa√±√≠as
function populateCompanySelect() {
    const select = document.getElementById('companyFilter');
    select.innerHTML = '<option value="">Todas las compa√±√≠as</option>';
    
    companies.forEach(company => {
        const option = document.createElement('option');
        option.value = company.id;
        option.textContent = company.name;
        select.appendChild(option);
    });
}

// Cargar sucursales (con filtro de compa√±√≠a)
async function loadBranches(companyId = null) {
    try {
        console.log('[loadBranches] Iniciando carga de sucursales');
        console.log('[loadBranches] CompanyId:', companyId);
        
        let url = '/User/GetBranches';
        if (companyId) {
            url += `?companyId=${companyId}`;
        }
        
        const response = await fetch(url);
        const result = await response.json();
        
        console.log('[loadBranches] Response completa:', result);
        console.log('[loadBranches] result.success:', result.success);
        console.log('[loadBranches] result.data:', result.data);
        console.log('[loadBranches] typeof result.data:', typeof result.data);
        console.log('[loadBranches] Array.isArray(result.data):', Array.isArray(result.data));
        
        if (result.success) {
            if (Array.isArray(result.data)) {
                console.log('[loadBranches] ‚úÖ Data es un array v√°lido, cargando sucursales');
                branches = result.data;
                populateBranchSelects();
            } else {
                console.error('[loadBranches] ‚ùå Error: result.data no es un array:', result.data);
                branches = [];
                Swal.fire('Error', 'Los datos de sucursales no tienen el formato esperado', 'error');
            }
        } else {
            console.error('[loadBranches] ‚ùå Error al cargar sucursales:', result.message);
            branches = [];
            Swal.fire('Error', result.message || 'Error al cargar sucursales', 'error');
        }
    } catch (error) {
        console.error('[loadBranches] ‚ùå Error de red:', error);
        branches = [];
        Swal.fire('Error', 'Error al cargar sucursales', 'error');
    }
}

// Poblar dropdowns de sucursales
function populateBranchSelects() {
    const filterSelect = document.getElementById('branchFilter');
    const createSelect = document.getElementById('branchId');
    
    // Limpiar opciones existentes
    filterSelect.innerHTML = '<option value="">Todas las sucursales</option>';
    if (createSelect) {
        createSelect.innerHTML = '<option value="">Seleccionar sucursal</option>';
    }
    
    branches.forEach(branch => {
        // Para el filtro
        const filterOption = document.createElement('option');
        filterOption.value = branch.id;
        filterOption.textContent = branch.name;
        filterSelect.appendChild(filterOption);
        
        // Para el formulario de creaci√≥n
        if (createSelect) {
            const createOption = document.createElement('option');
            createOption.value = branch.id;
            createOption.textContent = branch.name;
            createSelect.appendChild(createOption);
        }
    });
}

// Poblar dropdown de compa√±√≠as en el modal
function populateModalCompanySelect() {
    const modalCompanySelect = document.getElementById('modalCompanyId');
    modalCompanySelect.innerHTML = '<option value="">Seleccionar compa√±√≠a</option>';
    
    companies.forEach(company => {
        const option = document.createElement('option');
        option.value = company.id;
        option.textContent = company.name;
        modalCompanySelect.appendChild(option);
    });
}

// Cargar sucursales para el modal (con filtro de compa√±√≠a)
async function loadModalBranches(companyId = null) {
    try {
        console.log('[loadModalBranches] Iniciando carga de sucursales para modal');
        console.log('[loadModalBranches] CompanyId:', companyId);
        
        // Si no hay companyId, limpiar el dropdown y salir
        if (!companyId) {
            const modalBranchSelect = document.getElementById('branchId');
            modalBranchSelect.innerHTML = '<option value="">Seleccionar sucursal</option>';
            console.log('[loadModalBranches] No companyId provided, clearing branches in modal.');
            return;
        }
        
        let url = '/User/GetBranches';
        url += `?companyId=${companyId}`;
        
        const response = await fetch(url);
        const result = await response.json();
        
        if (result.success && Array.isArray(result.data)) {
            console.log('[loadModalBranches] ‚úÖ Sucursales cargadas para modal:', result.data.length);
            
            // Poblar solo el dropdown del modal
            const modalBranchSelect = document.getElementById('branchId');
            modalBranchSelect.innerHTML = '<option value="">Seleccionar sucursal</option>';
            
            result.data.forEach(branch => {
                const option = document.createElement('option');
                option.value = branch.id;
                option.textContent = branch.name;
                modalBranchSelect.appendChild(option);
            });
        } else {
            console.error('[loadModalBranches] ‚ùå Error al cargar sucursales para modal');
        }
    } catch (error) {
        console.error('[loadModalBranches] ‚ùå Error de red:', error);
    }
}

// Event listener para cambio de compa√±√≠a
document.getElementById('companyFilter').addEventListener('change', function() {
    const companyId = this.value;
    console.log('[companyFilter] Cambio detectado, companyId:', companyId);
    
    // Limpiar sucursales actuales
    branches = [];
    populateBranchSelects();
    
    // Cargar sucursales de la compa√±√≠a seleccionada
    if (companyId) {
        loadBranches(companyId);
    } else {
        // Si no hay compa√±√≠a seleccionada, limpiar las sucursales
        branches = [];
        populateBranchSelects();
    }
    
    // Aplicar filtros
    applyFilters();
});

// Inicializar p√°gina
document.addEventListener('DOMContentLoaded', function() {
    console.log('[DOMContentLoaded] Inicializando p√°gina');
    
    // Cargar datos iniciales
    loadCompanies();
    loadUsers();
    // No cargar todas las sucursales inicialmente - solo se cargar√°n cuando se seleccione una compa√±√≠a
    // loadBranches();
    
    // Event listeners para filtros
    document.getElementById('searchInput').addEventListener('input', applyFilters);
    document.getElementById('roleFilter').addEventListener('change', applyFilters);
    document.getElementById('statusFilter').addEventListener('change', applyFilters);
    document.getElementById('branchFilter').addEventListener('change', applyFilters);
    
    // Event listener para cambio de compa√±√≠a en el modal
    document.getElementById('modalCompanyId').addEventListener('change', function() {
        const companyId = this.value;
        console.log('[modalCompanyId] Cambio detectado, companyId:', companyId);
        
        // Limpiar sucursales del modal
        const modalBranchSelect = document.getElementById('branchId');
        modalBranchSelect.innerHTML = '<option value="">Seleccionar sucursal</option>';
        
        // Cargar sucursales de la compa√±√≠a seleccionada en el modal
        if (companyId) {
            loadModalBranches(companyId);
        } else {
            // If no company selected, clear branches and do not load all
            modalBranchSelect.innerHTML = '<option value="">Seleccionar sucursal</option>';
        }
    });
});

// Cargar usuarios
async function loadUsers() {
    try {
        console.log('[loadUsers] Iniciando carga de usuarios');
        const response = await fetch('/User/GetUsers');
        const result = await response.json();
        
        console.log('[loadUsers] Response completa:', result);
        console.log('[loadUsers] result.success:', result.success);
        console.log('[loadUsers] result.data:', result.data);
        console.log('[loadUsers] typeof result.data:', typeof result.data);
        console.log('[loadUsers] Array.isArray(result.data):', Array.isArray(result.data));
        
        if (result.success) {
            // Validar que data sea un array
            if (Array.isArray(result.data)) {
                console.log('[loadUsers] ‚úÖ Data es un array v√°lido, cargando usuarios');
                users = result.data;
                renderUsers(users);
                updateStats();
            } else {
                console.error('[loadUsers] ‚ùå Error: result.data no es un array:', result.data);
                console.error('[loadUsers] ‚ùå Tipo de result.data:', typeof result.data);
                users = [];
                renderUsers([]);
                Swal.fire('Error', 'Los datos recibidos no tienen el formato esperado', 'error');
            }
        } else {
            console.error('[loadUsers] ‚ùå Error al cargar usuarios:', result.message);
            users = [];
            renderUsers([]);
            Swal.fire('Error', result.message || 'Error al cargar usuarios', 'error');
        }
    } catch (error) {
        console.error('[loadUsers] ‚ùå Error de red:', error);
        users = [];
        renderUsers([]);
        Swal.fire('Error', 'Error al cargar usuarios', 'error');
    }
}

// Renderizar usuarios
function renderUsers(usersToRender) {
    const tbody = document.getElementById('usersTableBody');
    tbody.innerHTML = '';
    
    // Validar que usersToRender sea un array
    if (!Array.isArray(usersToRender)) {
        console.error('Error: usersToRender no es un array:', usersToRender);
        return;
    }
    
    usersToRender.forEach(user => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>
                <div class="d-flex align-items-center">
                    <div class="avatar-circle me-3">
                        ${user.fullName ? user.fullName.charAt(0).toUpperCase() : user.email.charAt(0).toUpperCase()}
                    </div>
                    <div>
                        <div class="fw-bold">${user.fullName || 'Sin nombre'}</div>
                        <div class="text-muted small">ID: ${user.id.substring(0, 8)}...</div>
                    </div>
                </div>
            </td>
            <td>${user.email}</td>
            <td><span class="role-badge role-${user.role}">${getRoleName(user.role)}</span></td>
            <td>${user.branchName || 'Sin sucursal'}</td>
            <td><span class="status-badge status-${user.isActive ? 'active' : 'inactive'}">${user.isActive ? 'Activo' : 'Inactivo'}</span></td>
            <td>${user.createdAt ? new Date(user.createdAt).toLocaleDateString() : 'N/A'}</td>
            <td>
                <div class="action-buttons">
                    <button class="btn-edit" onclick="editUser('${user.id}')">
                        <i class="fas fa-edit"></i> Editar
                    </button>
                    <button class="btn-delete" onclick="deleteUser('${user.id}')">
                        <i class="fas fa-trash"></i> Eliminar
                    </button>
                </div>
            </td>
        `;
        tbody.appendChild(row);
    });
}

// Obtener nombre del rol
function getRoleName(role) {
    const roleNames = {
        admin: 'Administrador',
        manager: 'Gerente',
        supervisor: 'Supervisor',
        waiter: 'Mesero',
        cashier: 'Cajero',
        chef: 'Cocinero',
        bartender: 'Bartender',
        inventory: 'Inventarista',
        accountant: 'Contador',
        support: 'Soporte'
    };
    return roleNames[role] || role;
}

// Actualizar estad√≠sticas
function updateStats() {
    const total = users.length;
    const active = users.filter(u => u.isActive).length;
    const inactive = total - active;
    
    document.getElementById('totalUsers').textContent = `Total: ${total}`;
    document.getElementById('activeUsers').textContent = `Activos: ${active}`;
    document.getElementById('inactiveUsers').textContent = `Inactivos: ${inactive}`;
}

// Filtrar usuarios
function applyFilters() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const roleFilter = document.getElementById('roleFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    const branchFilter = document.getElementById('branchFilter').value;
    const companyFilter = document.getElementById('companyFilter').value;
    
    let filteredUsers = users.filter(user => {
        const matchesSearch = !searchTerm || 
            (user.fullName && user.fullName.toLowerCase().includes(searchTerm)) ||
            (user.email && user.email.toLowerCase().includes(searchTerm));
        
        const matchesRole = !roleFilter || user.role === roleFilter;
        const matchesStatus = !statusFilter || user.isActive.toString() === statusFilter;
        const matchesBranch = !branchFilter || user.branchId === branchFilter;
        const matchesCompany = !companyFilter || user.companyId === companyFilter;
        
        return matchesSearch && matchesRole && matchesStatus && matchesBranch && matchesCompany;
    });
    
    renderUsers(filteredUsers);
}

// Mostrar modal para crear usuario
function showCreateUserModal() {
    isEditMode = false;
    document.getElementById('userModalLabel').innerHTML = '<i class="fas fa-user-plus"></i> Nuevo Usuario';
    document.getElementById('userForm').reset();
    document.getElementById('userId').value = '';
    document.getElementById('isActive').checked = true;
    
    // Poblar dropdown de compa√±√≠as en el modal
    populateModalCompanySelect();
    
    // Do NOT load all branches initially. They will load when a company is selected.
    // loadModalBranches(); // Removed this call
    
    // Mostrar campos de contrase√±a y hacerlos requeridos
    document.getElementById('passwordGroup').classList.remove('hidden');
    document.getElementById('editPasswordNote').style.display = 'none';
    document.getElementById('password').required = true;
    document.getElementById('confirmPassword').required = true;
    
    // Limpiar placeholders de modo edici√≥n
    document.getElementById('password').placeholder = '';
    document.getElementById('confirmPassword').placeholder = '';
    
    new bootstrap.Modal(document.getElementById('userModal')).show();
}

// Editar usuario
async function editUser(userId) {
    try {
        const response = await fetch(`/User/GetUser?id=${userId}`);
        const result = await response.json();
        
        if (result.success) {
            isEditMode = true;
            const user = result.data;
            
            document.getElementById('userModalLabel').innerHTML = '<i class="fas fa-user-edit"></i> Editar Usuario';
            document.getElementById('userId').value = user.id;
            document.getElementById('fullName').value = user.fullName || '';
            document.getElementById('email').value = user.email;
            document.getElementById('role').value = user.role;
            document.getElementById('isActive').checked = user.isActive;
            
            // Poblar dropdown de compa√±√≠as en el modal
            populateModalCompanySelect();
            
            // Si el usuario tiene una sucursal, determinar su compa√±√≠a
            if (user.branchId) {
                // Primero intentar buscar la sucursal en la lista actual de sucursales
                let userBranch = branches.find(b => b.id === user.branchId);
                
                // Si no se encuentra en la lista actual, hacer una llamada espec√≠fica para obtener la sucursal
                if (!userBranch) {
                    try {
                        console.log('[editUser] Buscando informaci√≥n de sucursal para:', user.branchId);
                        const branchResponse = await fetch(`/User/GetBranches?branchId=${user.branchId}`);
                        const branchResult = await branchResponse.json();
                        
                        if (branchResult.success && branchResult.data && branchResult.data.length > 0) {
                            userBranch = branchResult.data[0];
                            console.log('[editUser] Informaci√≥n de sucursal encontrada:', userBranch);
                        }
                    } catch (error) {
                        console.error('[editUser] Error al buscar informaci√≥n de sucursal:', error);
                    }
                }
                
                if (userBranch && userBranch.companyId) {
                    console.log('[editUser] Estableciendo compa√±√≠a:', userBranch.companyId);
                    document.getElementById('modalCompanyId').value = userBranch.companyId;
                    // Cargar sucursales de esa compa√±√≠a
                    await loadModalBranches(userBranch.companyId);
                } else {
                    console.log('[editUser] No se pudo determinar la compa√±√≠a de la sucursal');
                    // If branch not found or no company, clear branches
                    const modalBranchSelect = document.getElementById('branchId');
                    modalBranchSelect.innerHTML = '<option value="">Seleccionar sucursal</option>';
                }
            } else {
                console.log('[editUser] Usuario no tiene sucursal asignada');
                // If no branch assigned to user, clear branches
                const modalBranchSelect = document.getElementById('branchId');
                modalBranchSelect.innerHTML = '<option value="">Seleccionar sucursal</option>';
            }
            
            // Establecer la sucursal del usuario
            document.getElementById('branchId').value = user.branchId || '';
            
            // Mostrar nota sobre contrase√±a y hacerla opcional
            document.getElementById('editPasswordNote').style.display = 'block';
            document.getElementById('password').required = false;
            document.getElementById('confirmPassword').required = false;
            
            // Limpiar campos de contrase√±a para que se vea que son opcionales
            document.getElementById('password').value = '';
            document.getElementById('confirmPassword').value = '';
            document.getElementById('password').placeholder = 'Dejar vac√≠o para no cambiar';
            document.getElementById('confirmPassword').placeholder = 'Dejar vac√≠o para no cambiar';
            
            new bootstrap.Modal(document.getElementById('userModal')).show();
        } else {
            Swal.fire('Error', result.message || 'Error al cargar usuario', 'error');
        }
    } catch (error) {
        console.error('Error al cargar usuario:', error);
        Swal.fire('Error', 'Error al cargar usuario', 'error');
    }
}

// Guardar usuario
async function saveUser() {
    const form = document.getElementById('userForm');
    const formData = new FormData(form);
    
    // Manejar expl√≠citamente el checkbox de isActive
    const isActiveCheckbox = document.getElementById('isActive');
    formData.set('isActive', isActiveCheckbox.checked);
    
    // Validar contrase√±as
    const password = document.getElementById('password').value;
    const confirmPassword = document.getElementById('confirmPassword').value;
    
    // Validar contrase√±as solo si se est√°n cambiando
    if (password || confirmPassword) {
        if (password !== confirmPassword) {
            Swal.fire('Error', 'Las contrase√±as no coinciden', 'error');
            return;
        }
        
        if (password.length < 8) {
            Swal.fire('Error', 'La contrase√±a debe tener al menos 8 caracteres', 'error');
            return;
        }
    }
    
    // Validar contrase√±a requerida para nuevos usuarios
    if (!isEditMode && !password) {
        Swal.fire('Error', 'La contrase√±a es requerida para nuevos usuarios', 'error');
        return;
    }
    
    // Si estamos en modo edici√≥n y no hay contrase√±a, eliminar del FormData
    if (isEditMode && !password) {
        formData.delete('password');
        formData.delete('confirmPassword');
    }
    
    try {
        const url = isEditMode ? '/User/Update' : '/User/Create';
        
        // Debug: mostrar datos que se env√≠an
        console.log('Enviando datos:', Object.fromEntries(formData));
        console.log('Modo edici√≥n:', isEditMode);
        console.log('isActive:', isActiveCheckbox.checked);
        
        const response = await fetch(url, {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.success) {
            Swal.fire('√âxito', `Usuario ${isEditMode ? 'actualizado' : 'creado'} exitosamente`, 'success');
            bootstrap.Modal.getInstance(document.getElementById('userModal')).hide();
            loadUsers();
        } else {
            Swal.fire('Error', result.message || 'Error al guardar usuario', 'error');
        }
    } catch (error) {
        console.error('Error al guardar usuario:', error);
        Swal.fire('Error', 'Error al guardar usuario', 'error');
    }
}

// Eliminar usuario
async function deleteUser(userId) {
    const result = await Swal.fire({
        title: '¬øEst√°s seguro?',
        text: 'Esta acci√≥n no se puede deshacer',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#e74c3c',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'S√≠, eliminar',
        cancelButtonText: 'Cancelar'
    });
    
    if (result.isConfirmed) {
        try {
            const response = await fetch(`/User/Delete?id=${userId}`, {
                method: 'DELETE'
            });
            
            const result = await response.json();
            
            if (result.success) {
                Swal.fire('Eliminado', 'Usuario eliminado exitosamente', 'success');
                loadUsers();
            } else {
                Swal.fire('Error', result.message || 'Error al eliminar usuario', 'error');
            }
        } catch (error) {
            console.error('Error al eliminar usuario:', error);
            Swal.fire('Error', 'Error al eliminar usuario', 'error');
        }
    }
}
</script>

<style>
.avatar-circle {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--gradient-primary);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    font-size: 1.2rem;
}
</style> 