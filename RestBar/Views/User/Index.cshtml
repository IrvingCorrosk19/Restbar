@{
    ViewData["Title"] = "Usuarios";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Gestión de Usuarios</h1>
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <div>
                <i class="fas fa-users me-1"></i>
                Usuarios
            </div>
            <button type="button" class="btn btn-primary" onclick="showCreateModal()">
                <i class="fas fa-plus"></i> Nuevo Usuario
            </button>
        </div>
        <div class="card-body">
            <!-- Filtros -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" id="searchTerm" class="form-control" placeholder="Buscar por nombre o email...">
                    </div>
                </div>
                <div class="col-md-3">
                    <select id="roleFilter" class="form-select">
                        <option value="">Todos los roles</option>
                        @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                        {
                            <option value="@role">@role</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="branchFilter" class="form-select">
                        <option value="">Todas las sucursales</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <select id="statusFilter" class="form-select">
                        <option value="">Todos los estados</option>
                        <option value="true">Activos</option>
                        <option value="false">Inactivos</option>
                    </select>
                </div>
            </div>

            <!-- Grid de Usuarios -->
            <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 row-cols-xl-4 g-4" id="usersGrid">
                <!-- Las cards se generarán dinámicamente aquí -->
            </div>
        </div>
    </div>
</div>

<!-- Modal para Crear/Editar Usuario -->
<div class="modal fade" id="userModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userModalTitle">Nuevo Usuario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="userForm">
                    <input type="hidden" id="userId">
                    <div class="mb-3">
                        <label class="form-label">Nombre Completo</label>
                        <input type="text" class="form-control" id="fullName" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" required>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Contraseña</label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <div class="mb-3">
                        <label for="confirmPassword" class="form-label">Confirmar Contraseña</label>
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Rol</label>
                        <select class="form-control" id="role" required>
                            @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Compañía</label>
                        <select class="form-control" id="companyId" required>
                            <option value="">Seleccione una compañía</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Sucursal</label>
                        <select class="form-control" id="branchId" required>
                            <option value="">Seleccione una sucursal</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="isActive" checked>
                            <label class="form-check-label">Activo</label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="saveUser()">Guardar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function getRoleName(roleValue) {
            if (!roleValue) return '';
            // Asegurarnos de que el rol se muestre con la primera letra en mayúscula
            return roleValue.charAt(0).toUpperCase() + roleValue.slice(1).toLowerCase();
        }

        let userModal;
        let branches = [];
        let companies = [];

        async function loadUsers() {
            // Cargar sucursales primero
            try {
                const branchesResponse = await fetch('/User/GetBranches');
                const branchesResult = await branchesResponse.json();
                if (branchesResult.success) {
                    window.allBranches = branchesResult.data;
                    
                    // Llenar el select de filtro de sucursales
                    const branchFilter = document.getElementById('branchFilter');
                    branchFilter.innerHTML = '<option value="">Todas las sucursales</option>';
                    branchesResult.data.forEach(branch => {
                        branchFilter.innerHTML += `<option value="${branch.id}">${branch.name} (${branch.companyName})</option>`;
                    });
                }
            } catch (error) {
                console.error('Error loading branches:', error);
            }

            // Cargar usuarios
            filterUsers();
        }

        // Cargar usuarios al iniciar la página
        document.addEventListener('DOMContentLoaded', function() {
            userModal = new bootstrap.Modal(document.getElementById('userModal'));
            loadCompanies();
            loadUsers();

            // Agregar event listeners para los filtros
            document.getElementById('searchTerm').addEventListener('keyup', filterUsers);
            document.getElementById('roleFilter').addEventListener('change', filterUsers);
            document.getElementById('branchFilter').addEventListener('change', filterUsers);
            document.getElementById('statusFilter').addEventListener('change', filterUsers);

            // Event listener para el cambio de compañía
            document.getElementById('companyId').addEventListener('change', filterBranchesByCompany);
        });

        function loadCompanies() {
            $.get('/User/GetCompanies', function(response) {
                if (response.success) {
                    const companySelect = $('#companyId');
                    companySelect.empty();
                    companySelect.append('<option value="">Seleccione una compañía</option>');
                    response.data.forEach(company => {
                        companySelect.append(`<option value="${company.id}">${company.name}</option>`);
                    });
                }
            });
        }

        function loadBranches() {
            $.get('/User/GetBranches', function(response) {
                if (response.success) {
                    window.allBranches = response.data; // Guardamos todas las sucursales para filtrar después
                    filterBranchesByCompany();
                }
            });
        }

        async function filterBranchesByCompany() {
            const companyId = document.getElementById('companyId').value;
            const branchSelect = document.getElementById('branchId');
            branchSelect.innerHTML = '<option value="">Seleccione una sucursal</option>';

            if (companyId) {
                try {
                    const response = await fetch('/User/GetBranches');
                    const result = await response.json();
                    
                    if (result.success) {
                        const filteredBranches = result.data.filter(b => b.companyId === companyId);
                        filteredBranches.forEach(branch => {
                            branchSelect.innerHTML += `<option value="${branch.id}">${branch.name}</option>`;
                        });
                    }
                } catch (error) {
                    console.error('Error loading branches:', error);
                }
            }
        }

        function filterUsers() {
            const searchTerm = document.getElementById('searchTerm').value;
            const role = document.getElementById('roleFilter').value;
            const branchId = document.getElementById('branchFilter').value;
            const isActive = document.getElementById('statusFilter').value;

            // Construir la URL con los parámetros de filtro
            let url = `/User/GetUsers?searchTerm=${encodeURIComponent(searchTerm)}`;
            if (role) url += `&role=${encodeURIComponent(role)}`;
            if (branchId) url += `&branchId=${encodeURIComponent(branchId)}`;
            if (isActive !== '') url += `&isActive=${encodeURIComponent(isActive)}`;

            // Mostrar indicador de carga
            const usersGrid = document.getElementById('usersGrid');
            usersGrid.innerHTML = '<div class="col-12 text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Cargando...</span></div></div>';

            // Cargar usuarios filtrados
            fetch(url)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        usersGrid.innerHTML = '';
                        if (result.data.length === 0) {
                            usersGrid.innerHTML = '<div class="col-12 text-center"><p class="text-muted">No se encontraron usuarios</p></div>';
                            return;
                        }

                        result.data.forEach(user => {
                            console.log('Usuario:', user); // Para depuración
                            usersGrid.innerHTML += `
                                <div class="col">
                                    <div class="card h-100 user-card">
                                        <div class="card-header d-flex justify-content-between align-items-center">
                                            <h5 class="card-title mb-0" title="${user.fullName || 'Sin nombre'}">${user.fullName || 'Sin nombre'}</h5>
                                            <div class="dropdown">
                                                <button class="btn btn-link text-dark p-0" type="button" data-bs-toggle="dropdown">
                                                    <i class="fas fa-ellipsis-v"></i>
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li><a class="dropdown-item" href="#" onclick="showEditModal('${user.id}')">
                                                        <i class="fas fa-edit me-2"></i>Editar
                                                    </a></li>
                                                    <li><a class="dropdown-item" href="#" onclick="deleteUser('${user.id}')">
                                                        <i class="fas fa-trash me-2"></i>Eliminar
                                                    </a></li>
                                                </ul>
                                            </div>
                                        </div>
                                        <div class="card-body">
                                            <div class="text-center mb-3">
                                                <div class="no-image-placeholder">
                                                    <i class="fas fa-user fa-3x"></i>
                                                </div>
                                            </div>
                                            <div class="user-details">
                                                <div class="d-flex justify-content-between mb-2">
                                                    <span>Email:</span>
                                                    <span class="text-primary" title="${user.email}">${user.email}</span>
                                                </div>
                                                <div class="d-flex justify-content-between mb-2">
                                                    <span>Rol:</span>
                                                    <span class="badge bg-info" title="${user.role}">${user.role ? user.role.charAt(0).toUpperCase() + user.role.slice(1).toLowerCase() : 'Sin rol'}</span>
                                                </div>
                                                <div class="d-flex justify-content-between mb-2">
                                                    <span>Sucursal:</span>
                                                    <span class="text-muted" title="${user.branchName} (${user.companyName})">${user.branchName} (${user.companyName})</span>
                                                </div>
                                                <div class="d-flex justify-content-between">
                                                    <span>Estado:</span>
                                                    <span class="badge ${user.isActive ? 'bg-success' : 'bg-danger'}">
                                                        ${user.isActive ? 'Activo' : 'Inactivo'}
                                                    </span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                        });
                    } else {
                        usersGrid.innerHTML = '<div class="col-12 text-center"><p class="text-danger">Error al cargar los usuarios</p></div>';
                    }
                })
                .catch(error => {
                    console.error('Error al filtrar usuarios:', error);
                    usersGrid.innerHTML = '<div class="col-12 text-center"><p class="text-danger">Error al cargar los usuarios</p></div>';
                });
        }

        function showCreateModal() {
            document.getElementById('userModalTitle').textContent = 'Nuevo Usuario';
            document.getElementById('userForm').reset();
            document.getElementById('userId').value = '';
            document.getElementById('password').required = true;
            document.getElementById('confirmPassword').required = true;
            document.getElementById('companyId').value = '';
            document.getElementById('branchId').innerHTML = '<option value="">Seleccione una sucursal</option>';
            userModal.show();
        }

        async function showEditModal(id) {
            try {
                // Guardar el contenido original del modal antes de modificarlo
                const modalBody = document.querySelector('#userModal .modal-body');
                const originalContent = modalBody.innerHTML;
                
                // Mostrar el modal primero
                userModal.show();
                
                // Mostrar loading en el modal
                modalBody.innerHTML = '<div class="text-center"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Cargando...</span></div></div>';

                const response = await fetch(`/User/GetUser/${id}`);
                const result = await response.json();

                if (result.success) {
                    const user = result.data;
                    console.log('Datos del usuario:', user);
                    
                    // Restaurar el contenido original del modal
                    modalBody.innerHTML = originalContent;
                    
                    // Ahora que el contenido está restaurado, podemos establecer los valores
                    document.getElementById('userModalTitle').textContent = 'Editar Usuario';
                    document.getElementById('userId').value = user.id;
                    document.getElementById('fullName').value = user.fullName || '';
                    document.getElementById('email').value = user.email;
                    document.getElementById('password').value = '';
                    document.getElementById('confirmPassword').value = '';
                    document.getElementById('password').required = false;
                    document.getElementById('confirmPassword').required = false;
                    
                    // Establecer el rol
                    const roleSelect = document.getElementById('role');
                    if (roleSelect) {
                        roleSelect.value = user.role;
                        console.log('Rol establecido:', user.role);
                    }
                    
                    // Establecer la compañía y la sucursal
                    if (user.companyId) {
                        const companySelect = document.getElementById('companyId');
                        companySelect.value = user.companyId;
                        
                        // Esperar a que se carguen las sucursales
                        await filterBranchesByCompany();
                        
                        // Establecer la sucursal después de que se hayan cargado las opciones
                        setTimeout(() => {
                            const branchSelect = document.getElementById('branchId');
                            if (branchSelect) {
                                branchSelect.value = user.branchId;
                            }
                        }, 100);
                    }
                    
                    document.getElementById('isActive').checked = user.isActive;
                } else {
                    showError(result.message || 'Error al cargar el usuario');
                    userModal.hide();
                }
            } catch (error) {
                console.error('Error loading user:', error);
                showError('Error al cargar el usuario');
                userModal.hide();
            }
        }

        async function saveUser() {
            try {
                // Mostrar loading en el botón de guardar
                const saveButton = document.querySelector('#userModal .btn-primary');
                const originalText = saveButton.innerHTML;
                saveButton.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Guardando...';
                saveButton.disabled = true;

                const userId = document.getElementById('userId').value;
                const password = document.getElementById('password').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                // Validate passwords match
                if (password !== confirmPassword) {
                    showError('Las contraseñas no coinciden');
                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                    return;
                }

                // Validate required fields
                const fullName = document.getElementById('fullName').value;
                const email = document.getElementById('email').value;
                const role = document.getElementById('role').value;
                const branchIdValue = document.getElementById('branchId').value;

                // Validar que branchId sea un GUID válido
                if (!branchIdValue || branchIdValue === "") {
                    showError('Por favor seleccione una sucursal');
                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                    return;
                }

                // Validar formato GUID
                const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
                if (!guidRegex.test(branchIdValue)) {
                    showError('ID de sucursal inválido');
                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                    return;
                }

                if (!fullName || !email || !password || !role) {
                    showError('Por favor complete todos los campos requeridos');
                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                    return;
                }

                const user = {
                    id: userId || '',
                    fullName: fullName,
                    email: email,
                    passwordHash: password,
                    role: role,
                    branchId: branchIdValue,
                    isActive: document.getElementById('isActive').checked,
                    createdAt: new Date().toISOString()
                };

                console.log('Enviando datos:', user);

                const url = userId ? '/User/Update' : '/User/Create';

                $.ajax({
                    url: url,
                    type: 'POST',
                    data: user,
                    success: function(result) {
                        if (result.success) {
                            userModal.hide();
                            loadUsers(); // Recargar la lista de usuarios
                            showSuccess('Usuario guardado exitosamente');
                            // Limpiar el formulario
                            document.getElementById('userForm').reset();
                            document.getElementById('userId').value = '';
                        } else {
                            showError(result.message || 'Error al guardar el usuario');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error saving user:', error);
                        showError('Error al guardar el usuario');
                    },
                    complete: function() {
                        // Restaurar el botón
                        saveButton.innerHTML = originalText;
                        saveButton.disabled = false;
                    }
                });
            } catch (error) {
                console.error('Error saving user:', error);
                showError('Error al guardar el usuario');
                // Restaurar el botón en caso de error
                const saveButton = document.querySelector('#userModal .btn-primary');
                saveButton.innerHTML = originalText;
                saveButton.disabled = false;
            }
        }

        async function deleteUser(id) {
            try {
                const result = await Swal.fire({
                    title: '¿Está seguro?',
                    text: "Esta acción no se puede deshacer",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Sí, eliminar',
                    cancelButtonText: 'Cancelar',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await fetch(`/User/Delete/${id}`, {
                                method: 'DELETE'
                            });
                            const result = await response.json();
                            if (!result.success) {
                                throw new Error(result.message || 'Error al eliminar el usuario');
                            }
                            return result;
                        } catch (error) {
                            Swal.showValidationMessage(`Error: ${error.message}`);
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    await loadUsers();
                    Swal.fire(
                        '¡Eliminado!',
                        'El usuario ha sido eliminado.',
                        'success'
                    );
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                showError('Error al eliminar el usuario');
            }
        }

        function showSuccess(message) {
            if (typeof Swal !== 'undefined') {
                Swal.fire('Éxito', message, 'success');
            } else {
                alert('Éxito: ' + message);
            }
        }

        function showError(message) {
            if (typeof Swal !== 'undefined') {
                Swal.fire('Error', message, 'error');
            } else {
                alert('Error: ' + message);
            }
        }
    </script>
}

@section Styles {
    <style>
        /* Estilos generales */
        .container-fluid {
            padding: 2rem;
        }

        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .card-header {
            background-color: #fff;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            padding: 1.25rem;
        }

        /* Estilos de los filtros */
        .input-group {
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            border-radius: 8px;
            overflow: hidden;
        }

        .input-group-text {
            background-color: #fff;
            border: 1px solid #dee2e6;
            border-right: none;
        }

        .form-control, .form-select {
            border: 1px solid #dee2e6;
            padding: 0.75rem 1rem;
            font-size: 0.95rem;
        }

        .form-control:focus, .form-select:focus {
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.15);
        }

        /* Estilos de las tarjetas de usuario */
        .user-card {
            transition: all 0.3s ease;
            border: none;
            border-radius: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            background: #fff;
            height: 100%;
            overflow: hidden;
        }

        .user-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
        }

        .user-card .card-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-bottom: none;
            padding: 1.25rem;
        }

        .user-card .card-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: #2c3e50;
            margin: 0;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px;
        }

        .no-image-placeholder {
            height: 120px;
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 12px;
            color: #6c757d;
            margin: 1rem;
            transition: all 0.3s ease;
        }

        .user-card:hover .no-image-placeholder {
            transform: scale(1.02);
            background: linear-gradient(135deg, #e9ecef 0%, #dee2e6 100%);
        }

        .user-details {
            background-color: #f8f9fa;
            padding: 1.25rem;
            border-radius: 12px;
            margin: 1rem;
            box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .user-details > div {
            padding: 0.5rem 0;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .user-details > div:last-child {
            border-bottom: none;
        }

        .badge {
            font-size: 0.85em;
            padding: 0.5em 0.8em;
            border-radius: 6px;
            font-weight: 500;
        }

        .badge.bg-info {
            background: linear-gradient(135deg, #0dcaf0 0%, #0aa2c0 100%) !important;
            text-transform: capitalize;
        }

        .badge.bg-success {
            background: linear-gradient(135deg, #198754 0%, #157347 100%) !important;
        }

        .badge.bg-danger {
            background: linear-gradient(135deg, #dc3545 0%, #bb2d3b 100%) !important;
        }

        .text-primary, .text-muted {
            font-size: 0.9rem;
            font-weight: 500;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
        }

        /* Estilos del modal */
        .modal-content {
            border: none;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        }

        .modal-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 15px 15px 0 0;
        }

        .modal-footer {
            border-top: 1px solid rgba(0, 0, 0, 0.1);
            border-radius: 0 0 15px 15px;
        }

        /* Estilos de los botones */
        .btn {
            padding: 0.5rem 1.25rem;
            border-radius: 8px;
            font-weight: 500;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
            border: none;
        }

        .btn-primary:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(13, 110, 253, 0.3);
        }

        /* Estilos del dropdown */
        .dropdown-menu {
            border: none;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            padding: 0.5rem;
        }

        .dropdown-item {
            border-radius: 6px;
            padding: 0.5rem 1rem;
            transition: all 0.2s ease;
        }

        .dropdown-item:hover {
            background-color: #f8f9fa;
            transform: translateX(5px);
        }

        /* Estilos del spinner de carga */
        .spinner-border {
            width: 1.5rem;
            height: 1.5rem;
            border-width: 0.2em;
        }

        /* Estilos para mensajes de error y éxito */
        .alert {
            border: none;
            border-radius: 10px;
            padding: 1rem 1.25rem;
            margin-bottom: 1rem;
        }

        .alert-success {
            background: linear-gradient(135deg, #d1e7dd 0%, #badbcc 100%);
            color: #0f5132;
        }

        .alert-danger {
            background: linear-gradient(135deg, #f8d7da 0%, #f5c2c7 100%);
            color: #842029;
        }
    </style>
} 