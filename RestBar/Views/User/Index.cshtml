@{
    ViewData["Title"] = "Usuarios";
}

<style>
    :root {
        --primary-color: #2c3e50;
        --secondary-color: #34495e;
        --accent-color: #e67e22;
        --success-color: #27ae60;
        --danger-color: #e74c3c;
        --warning-color: #f39c12;
        --info-color: #3498db;
        --light-color: #ecf0f1;
        --dark-color: #2c3e50;
        --gradient-primary: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        --gradient-accent: linear-gradient(135deg, var(--accent-color), #d35400);
        --gradient-success: linear-gradient(135deg, var(--success-color), #229954);
        --gradient-danger: linear-gradient(135deg, var(--danger-color), #c0392b);
        --gradient-warning: linear-gradient(135deg, var(--warning-color), #e67e22);
        --gradient-info: linear-gradient(135deg, var(--info-color), #2980b9);
        --shadow-light: 0 4px 6px rgba(0, 0, 0, 0.1);
        --shadow-medium: 0 8px 15px rgba(0, 0, 0, 0.15);
        --shadow-heavy: 0 10px 30px rgba(0, 0, 0, 0.2);
        --border-radius: 20px;
        --transition: all 0.3s ease;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        color: var(--dark-color);
    }

    /* Hero Section */
    .hero-section {
        background: var(--gradient-primary);
        color: white;
        padding: 3rem 0;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

    .hero-section::before {
        content: '';
        position: absolute;
        width: 200%;
        height: 200%;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="10" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="10" cy="50" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="90" cy="30" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
        animation: float 20s ease-in-out infinite;
        opacity: 0.1;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(180deg); }
    }

    .hero-content {
        position: relative;
        z-index: 1;
        text-align: center;
    }

    .hero-title {
        font-size: 3.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        animation: slideInFromTop 0.8s ease-out;
    }

    .hero-subtitle {
        font-size: 1.3rem;
        opacity: 0.9;
        margin-bottom: 2rem;
        animation: slideInFromBottom 0.8s ease-out;
    }

   @@keyframes slideInFromTop {
        0% { opacity: 0; transform: translateY(-50px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    @@keyframes slideInFromBottom {
        0% { opacity: 0; transform: translateY(50px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    .hero-button {
        background: var(--gradient-accent);
        color: white;
        padding: 1rem 2rem;
        border: none;
        border-radius: var(--border-radius);
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        box-shadow: var(--shadow-medium);
        text-decoration: none;
        display: inline-block;
        animation: pulse 2s ease-in-out infinite;
    }

    .hero-button:hover {
        transform: translateY(-3px);
        box-shadow: var(--shadow-heavy);
        color: white;
        text-decoration: none;
    }

    @@keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    /* Main Content */
    .main-content {
        padding: 0 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    /* Filters Section */
    .filters-section {
        background: white;
        padding: 2rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-light);
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

    .filters-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--gradient-accent);
    }

    .filters-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .filter-group {
        position: relative;
    }

    .filter-label {
        display: block;
        font-weight: 500;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .filter-input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid #e1e8ed;
        border-radius: 12px;
        font-size: 1rem;
        transition: var(--transition);
        background: white;
    }

    .filter-input:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba(231, 126, 34, 0.1);
    }

    .filter-input-icon {
        position: relative;
    }

    .filter-input-icon .filter-input {
        padding-left: 3rem;
    }

    .filter-input-icon .input-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--accent-color);
        font-size: 1.1rem;
    }

    /* Users Grid */
    .users-section {
        background: white;
        padding: 2rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-light);
        position: relative;
        overflow: hidden;
    }

    .users-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--gradient-info);
    }

    .users-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .users-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
        gap: 1.5rem;
    }

    .user-card {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-light);
        overflow: hidden;
        transition: var(--transition);
        position: relative;
        border: 2px solid transparent;
    }

    .user-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-medium);
        border-color: var(--accent-color);
    }

    .user-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--gradient-primary);
    }

    .user-card-header {
        padding: 1.5rem;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        display: flex;
        justify-content: between;
        align-items: center;
    }

    .user-name {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--primary-color);
        margin: 0;
        flex: 1;
    }

    .user-actions {
        position: relative;
    }

    .user-actions .btn {
        background: transparent;
        border: none;
        color: var(--primary-color);
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: var(--transition);
    }

    .user-actions .btn:hover {
        background: rgba(44, 62, 80, 0.1);
    }

    .user-avatar {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background: var(--gradient-accent);
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 1.5rem auto;
        color: white;
        font-size: 2.5rem;
        transition: var(--transition);
    }

    .user-card:hover .user-avatar {
        transform: scale(1.05);
    }

    .user-info {
        padding: 1.5rem;
    }

    .user-info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.75rem;
        padding-bottom: 0.75rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    .user-info-item:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .user-info-label {
        font-weight: 500;
        color: var(--primary-color);
    }

    .user-info-value {
        font-weight: 400;
        color: var(--secondary-color);
        text-align: right;
        max-width: 150px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .user-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        color: white;
        display: inline-block;
    }

    .user-badge.role-admin {
        background: var(--gradient-danger);
    }

    .user-badge.role-manager {
        background: var(--gradient-warning);
    }

    .user-badge.role-waiter {
        background: var(--gradient-info);
    }

    .user-badge.role-kitchen {
        background: var(--gradient-success);
    }

    .user-badge.status-active {
        background: var(--gradient-success);
    }

    .user-badge.status-inactive {
        background: var(--gradient-danger);
    }

    /* Loading State */
    .loading-container {
        text-align: center;
        padding: 3rem;
        color: var(--primary-color);
    }

    .loading-spinner {
        width: 3rem;
        height: 3rem;
        border: 4px solid rgba(231, 126, 34, 0.2);
        border-top: 4px solid var(--accent-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 1rem;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem;
        color: var(--secondary-color);
    }

    .empty-state-icon {
        font-size: 4rem;
        color: var(--accent-color);
        margin-bottom: 1rem;
    }

    .empty-state-message {
        font-size: 1.2rem;
        font-weight: 500;
    }

    /* Modal Styles */
    .modal-content {
        border: none;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-heavy);
        overflow: hidden;
    }

    .modal-header {
        background: var(--gradient-primary);
        color: white;
        padding: 1.5rem;
        border-bottom: none;
    }

    .modal-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0;
    }

    .btn-close {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        border-radius: 50%;
        width: 2rem;
        height: 2rem;
        opacity: 1;
        transition: var(--transition);
    }

    .btn-close:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: scale(1.1);
    }

    .modal-body {
        padding: 2rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        font-weight: 500;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid #e1e8ed;
        border-radius: 12px;
        font-size: 1rem;
        transition: var(--transition);
        background: white;
    }

    .form-control:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba(231, 126, 34, 0.1);
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .form-check-input {
        width: 1.2rem;
        height: 1.2rem;
        border: 2px solid var(--accent-color);
        border-radius: 4px;
        transition: var(--transition);
    }

    .form-check-input:checked {
        background: var(--accent-color);
        border-color: var(--accent-color);
    }

    .form-check-label {
        font-weight: 500;
        color: var(--primary-color);
    }

    .modal-footer {
        padding: 1.5rem;
        background: #f8f9fa;
        border-top: 1px solid rgba(0, 0, 0, 0.05);
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: var(--gradient-accent);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-medium);
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #5a6268;
        transform: translateY(-2px);
    }

    /* Dropdown Styles */
    .dropdown-menu {
        border: none;
        border-radius: 12px;
        box-shadow: var(--shadow-medium);
        padding: 0.5rem;
        margin-top: 0.5rem;
    }

    .dropdown-item {
        padding: 0.75rem 1rem;
        border-radius: 8px;
        transition: var(--transition);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--primary-color);
        text-decoration: none;
    }

    .dropdown-item:hover {
        background: rgba(231, 126, 34, 0.1);
        color: var(--accent-color);
        transform: translateX(5px);
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .hero-title {
            font-size: 2.5rem;
        }

        .hero-subtitle {
            font-size: 1.1rem;
        }

        .main-content {
            padding: 0 1rem;
        }

        .filters-grid {
            grid-template-columns: 1fr;
        }

        .users-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<!-- Hero Section -->
<section class="hero-section">
    <div class="container">
        <div class="hero-content">
            <h1 class="hero-title">
                <i class="fas fa-users"></i> Gestión de Usuarios
            </h1>
            <p class="hero-subtitle">
                Administra todos los usuarios de tu sistema RestBar
            </p>
            <button class="hero-button" onclick="showCreateModal()">
                <i class="fas fa-plus"></i> Nuevo Usuario
            </button>
        </div>
    </div>
</section>

<!-- Main Content -->
<div class="main-content">
    <!-- Filters Section -->
    <section class="filters-section">
        <h2 class="filters-title">
            <i class="fas fa-filter"></i> Filtros de Búsqueda
        </h2>
        <div class="filters-grid">
            <div class="filter-group">
                <label class="filter-label">
                    <i class="fas fa-search"></i> Buscar por nombre o email
                </label>
                <div class="filter-input-icon">
                    <input type="text" id="searchTerm" class="filter-input" placeholder="Buscar usuario...">
                    <i class="fas fa-search input-icon"></i>
                </div>
            </div>
            <div class="filter-group">
                <label class="filter-label">
                    <i class="fas fa-user-tag"></i> Rol
                </label>
                <select id="roleFilter" class="filter-input">
                    <option value="">Todos los roles</option>
                    @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                    {
                        <option value="@role">@role</option>
                    }
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">
                    <i class="fas fa-building"></i> Sucursal
                </label>
                <select id="branchFilter" class="filter-input">
                    <option value="">Todas las sucursales</option>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">
                    <i class="fas fa-toggle-on"></i> Estado
                </label>
                <select id="statusFilter" class="filter-input">
                    <option value="">Todos los estados</option>
                    <option value="true">Activos</option>
                    <option value="false">Inactivos</option>
                </select>
            </div>
        </div>
    </section>

    <!-- Users Section -->
    <section class="users-section">
        <h2 class="users-title">
            <i class="fas fa-users"></i> Usuarios del Sistema
        </h2>
        <div class="users-grid" id="usersGrid">
            <!-- Los usuarios se cargarán aquí dinámicamente -->
        </div>
    </section>
</div>

<!-- Modal para Crear/Editar Usuario -->
<div class="modal fade" id="userModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userModalTitle">
                    <i class="fas fa-user-plus"></i> Nuevo Usuario
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="userForm">
                    <input type="hidden" id="userId">
                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-user"></i> Nombre Completo
                        </label>
                        <input type="text" class="form-control" id="fullName" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-envelope"></i> Email
                        </label>
                        <input type="email" class="form-control" id="email" required>
                    </div>
                    <div class="form-group">
                        <label for="password" class="form-label">
                            <i class="fas fa-lock"></i> Contraseña
                        </label>
                        <input type="password" class="form-control" id="password" name="password" required>
                    </div>
                    <div class="form-group">
                        <label for="confirmPassword" class="form-label">
                            <i class="fas fa-lock"></i> Confirmar Contraseña
                        </label>
                        <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-user-tag"></i> Rol
                        </label>
                        <select class="form-control" id="role" required>
                            @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                            {
                                <option value="@role">@role</option>
                            }
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-building"></i> Compañía
                        </label>
                        <select class="form-control" id="companyId" required>
                            <option value="">Seleccione una compañía</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">
                            <i class="fas fa-store"></i> Sucursal
                        </label>
                        <select class="form-control" id="branchId" required>
                            <option value="">Seleccione una sucursal</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="isActive" checked>
                            <label class="form-check-label">
                                <i class="fas fa-toggle-on"></i> Usuario Activo
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cancelar
                </button>
                <button type="button" class="btn btn-primary" onclick="saveUser()">
                    <i class="fas fa-save"></i> Guardar Usuario
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function getRoleName(roleValue) {
            if (!roleValue) return '';
            // Asegurarnos de que el rol se muestre con la primera letra en mayúscula
            return roleValue.charAt(0).toUpperCase() + roleValue.slice(1).toLowerCase();
        }

        function getRoleClass(role) {
            if (!role) return 'role-admin';
            return `role-${role.toLowerCase()}`;
        }

        function getStatusClass(isActive) {
            return isActive ? 'status-active' : 'status-inactive';
        }

        function getUserInitials(fullName) {
            if (!fullName) return 'U';
            const names = fullName.split(' ');
            if (names.length === 1) return names[0].charAt(0).toUpperCase();
            return (names[0].charAt(0) + names[names.length - 1].charAt(0)).toUpperCase();
        }

        let userModal;
        let branches = [];
        let companies = [];

        async function loadUsers() {
            // Cargar sucursales primero
            try {
                const branchesResponse = await fetch('/User/GetBranches');
                const branchesResult = await branchesResponse.json();
                if (branchesResult.success) {
                    window.allBranches = branchesResult.data;
                    
                    // Llenar el select de filtro de sucursales
                    const branchFilter = document.getElementById('branchFilter');
                    branchFilter.innerHTML = '<option value="">Todas las sucursales</option>';
                    branchesResult.data.forEach(branch => {
                        branchFilter.innerHTML += `<option value="${branch.id}">${branch.name} (${branch.companyName})</option>`;
                    });
                }
            } catch (error) {
                console.error('Error loading branches:', error);
            }

            // Cargar usuarios
            filterUsers();
        }

        // Cargar usuarios al iniciar la página
        document.addEventListener('DOMContentLoaded', function() {
            userModal = new bootstrap.Modal(document.getElementById('userModal'));
            loadCompanies();
            loadUsers();

            // Agregar event listeners para los filtros
            document.getElementById('searchTerm').addEventListener('keyup', filterUsers);
            document.getElementById('roleFilter').addEventListener('change', filterUsers);
            document.getElementById('branchFilter').addEventListener('change', filterUsers);
            document.getElementById('statusFilter').addEventListener('change', filterUsers);

            // Event listener para el cambio de compañía
            document.getElementById('companyId').addEventListener('change', filterBranchesByCompany);
        });

        function loadCompanies() {
            $.get('/User/GetCompanies', function(response) {
                if (response.success) {
                    const companySelect = $('#companyId');
                    companySelect.empty();
                    companySelect.append('<option value="">Seleccione una compañía</option>');
                    response.data.forEach(company => {
                        companySelect.append(`<option value="${company.id}">${company.name}</option>`);
                    });
                }
            });
        }

        function loadBranches() {
            $.get('/User/GetBranches', function(response) {
                if (response.success) {
                    window.allBranches = response.data; // Guardamos todas las sucursales para filtrar después
                    filterBranchesByCompany();
                }
            });
        }

        async function filterBranchesByCompany() {
            const companyId = document.getElementById('companyId').value;
            const branchSelect = document.getElementById('branchId');
            branchSelect.innerHTML = '<option value="">Seleccione una sucursal</option>';

            if (companyId) {
                try {
                    const response = await fetch('/User/GetBranches');
                    const result = await response.json();
                    
                    if (result.success) {
                        const filteredBranches = result.data.filter(b => b.companyId === companyId);
                        filteredBranches.forEach(branch => {
                            branchSelect.innerHTML += `<option value="${branch.id}">${branch.name}</option>`;
                        });
                    }
                } catch (error) {
                    console.error('Error loading branches:', error);
                }
            }
        }

        function filterUsers() {
            const searchTerm = document.getElementById('searchTerm').value;
            const role = document.getElementById('roleFilter').value;
            const branchId = document.getElementById('branchFilter').value;
            const isActive = document.getElementById('statusFilter').value;

            // Construir la URL con los parámetros de filtro
            let url = `/User/GetUsers?searchTerm=${encodeURIComponent(searchTerm)}`;
            if (role) url += `&role=${encodeURIComponent(role)}`;
            if (branchId) url += `&branchId=${encodeURIComponent(branchId)}`;
            if (isActive !== '') url += `&isActive=${encodeURIComponent(isActive)}`;

            // Mostrar indicador de carga
            const usersGrid = document.getElementById('usersGrid');
            usersGrid.innerHTML = `
                <div class="loading-container">
                    <div class="loading-spinner"></div>
                    <p>Cargando usuarios...</p>
                </div>
            `;

            // Cargar usuarios filtrados
            fetch(url)
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        usersGrid.innerHTML = '';
                        if (result.data.length === 0) {
                            usersGrid.innerHTML = `
                                <div class="empty-state">
                                    <i class="fas fa-users empty-state-icon"></i>
                                    <p class="empty-state-message">No se encontraron usuarios</p>
                                </div>
                            `;
                            return;
                        }

                        result.data.forEach(user => {
                            console.log('Usuario:', user); // Para depuración
                            const userInitials = getUserInitials(user.fullName);
                            const roleClass = getRoleClass(user.role);
                            const statusClass = getStatusClass(user.isActive);
                            
                            usersGrid.innerHTML += `
                                <div class="user-card">
                                    <div class="user-card-header">
                                        <h3 class="user-name" title="${user.fullName || 'Sin nombre'}">${user.fullName || 'Sin nombre'}</h3>
                                        <div class="user-actions">
                                            <div class="dropdown">
                                                <button class="btn" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                                    <i class="fas fa-ellipsis-v"></i>
                                                </button>
                                                <ul class="dropdown-menu">
                                                    <li><a class="dropdown-item" href="#" onclick="showEditModal('${user.id}')">
                                                        <i class="fas fa-edit"></i> Editar
                                                    </a></li>
                                                    <li><a class="dropdown-item" href="#" onclick="deleteUser('${user.id}')">
                                                        <i class="fas fa-trash"></i> Eliminar
                                                    </a></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="user-avatar">
                                        <i class="fas fa-user"></i>
                                    </div>
                                    <div class="user-info">
                                        <div class="user-info-item">
                                            <span class="user-info-label">Email:</span>
                                            <span class="user-info-value" title="${user.email}">${user.email}</span>
                                        </div>
                                        <div class="user-info-item">
                                            <span class="user-info-label">Rol:</span>
                                            <span class="user-badge ${roleClass}">${user.role ? user.role.charAt(0).toUpperCase() + user.role.slice(1).toLowerCase() : 'Sin rol'}</span>
                                        </div>
                                        <div class="user-info-item">
                                            <span class="user-info-label">Sucursal:</span>
                                            <span class="user-info-value" title="${user.branchName} (${user.companyName})">${user.branchName || 'Sin sucursal'}</span>
                                        </div>
                                        <div class="user-info-item">
                                            <span class="user-info-label">Estado:</span>
                                            <span class="user-badge ${statusClass}">
                                                ${user.isActive ? 'Activo' : 'Inactivo'}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            `;
                        });
                    } else {
                        usersGrid.innerHTML = `
                            <div class="empty-state">
                                <i class="fas fa-exclamation-triangle empty-state-icon"></i>
                                <p class="empty-state-message">Error al cargar los usuarios</p>
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    console.error('Error al filtrar usuarios:', error);
                    usersGrid.innerHTML = `
                        <div class="empty-state">
                            <i class="fas fa-exclamation-triangle empty-state-icon"></i>
                            <p class="empty-state-message">Error al cargar los usuarios</p>
                        </div>
                    `;
                });
        }

        function showCreateModal() {
            document.getElementById('userModalTitle').innerHTML = '<i class="fas fa-user-plus"></i> Nuevo Usuario';
            document.getElementById('userForm').reset();
            document.getElementById('userId').value = '';
            document.getElementById('password').required = true;
            document.getElementById('confirmPassword').required = true;
            document.getElementById('companyId').value = '';
            document.getElementById('branchId').innerHTML = '<option value="">Seleccione una sucursal</option>';
            userModal.show();
        }

        async function showEditModal(id) {
            try {
                // Guardar el contenido original del modal antes de modificarlo
                const modalBody = document.querySelector('#userModal .modal-body');
                const originalContent = modalBody.innerHTML;
                
                // Mostrar el modal primero
                userModal.show();
                
                // Mostrar loading en el modal
                modalBody.innerHTML = '<div class="loading-container"><div class="loading-spinner"></div><p>Cargando usuario...</p></div>';

                const response = await fetch(`/User/GetUser/${id}`);
                const result = await response.json();

                if (result.success) {
                    const user = result.data;
                    console.log('Datos del usuario:', user);
                    
                    // Restaurar el contenido original del modal
                    modalBody.innerHTML = originalContent;
                    
                    // Ahora que el contenido está restaurado, podemos establecer los valores
                    document.getElementById('userModalTitle').innerHTML = '<i class="fas fa-user-edit"></i> Editar Usuario';
                    document.getElementById('userId').value = user.id;
                    document.getElementById('fullName').value = user.fullName || '';
                    document.getElementById('email').value = user.email;
                    document.getElementById('password').value = '';
                    document.getElementById('confirmPassword').value = '';
                    document.getElementById('password').required = false;
                    document.getElementById('confirmPassword').required = false;
                    
                    // Establecer el rol
                    const roleSelect = document.getElementById('role');
                    if (roleSelect) {
                        roleSelect.value = user.role;
                        console.log('Rol establecido:', user.role);
                    }
                    
                    // Establecer la compañía y la sucursal
                    if (user.companyId) {
                        const companySelect = document.getElementById('companyId');
                        companySelect.value = user.companyId;
                        
                        // Esperar a que se carguen las sucursales
                        await filterBranchesByCompany();
                        
                        // Establecer la sucursal después de que se hayan cargado las opciones
                        setTimeout(() => {
                            const branchSelect = document.getElementById('branchId');
                            if (branchSelect) {
                                branchSelect.value = user.branchId;
                            }
                        }, 100);
                    }
                    
                    document.getElementById('isActive').checked = user.isActive;
                } else {
                    showError(result.message || 'Error al cargar el usuario');
                    userModal.hide();
                }
            } catch (error) {
                console.error('Error loading user:', error);
                showError('Error al cargar el usuario');
                userModal.hide();
            }
        }

        async function saveUser() {
            try {
                // Mostrar loading en el botón de guardar
                const saveButton = document.querySelector('#userModal .btn-primary');
                const originalText = saveButton.innerHTML;
                saveButton.innerHTML = '<span class="loading-spinner" style="width: 1rem; height: 1rem;"></span> Guardando...';
                saveButton.disabled = true;

                const userId = document.getElementById('userId').value;
                const password = document.getElementById('password').value;
                const confirmPassword = document.getElementById('confirmPassword').value;

                // Validar que el password no esté vacío
                if (!password || password.trim() === '') {
                    showError('La contraseña es requerida');
                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                    return;
                }

                // Validar longitud mínima del password
                if (password.length < 6) {
                    showError('La contraseña debe tener al menos 6 caracteres');
                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                    return;
                }

                // Validate passwords match
                if (password !== confirmPassword) {
                    showError('Las contraseñas no coinciden');
                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                    return;
                }

                // Validate required fields
                const fullName = document.getElementById('fullName').value;
                const email = document.getElementById('email').value;
                const role = document.getElementById('role').value;
                const branchIdValue = document.getElementById('branchId').value;

                // Validar que branchId sea un GUID válido
                if (!branchIdValue || branchIdValue === "") {
                    showError('Por favor seleccione una sucursal');
                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                    return;
                }

                // Validar formato GUID
                const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
                if (!guidRegex.test(branchIdValue)) {
                    showError('ID de sucursal inválido');
                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                    return;
                }

                if (!fullName || !email || !password || !role) {
                    showError('Por favor complete todos los campos requeridos');
                    saveButton.innerHTML = originalText;
                    saveButton.disabled = false;
                    return;
                }

                const url = userId ? '/User/Update' : '/User/Create';

                // Crear FormData para envío
                const formData = new FormData();
                if (userId) formData.append('id', userId);
                formData.append('fullName', fullName);
                formData.append('email', email);
                formData.append('password', password);
                formData.append('role', role);
                formData.append('branchId', branchIdValue);
                formData.append('isActive', document.getElementById('isActive').checked);

                console.log('Enviando FormData...');
                console.log('Password length:', password.length);
                console.log('Password value:', password);

                $.ajax({
                    url: url,
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function(result) {
                        if (result.success) {
                            userModal.hide();
                            loadUsers(); // Recargar la lista de usuarios
                            showSuccess('Usuario guardado exitosamente');
                            // Limpiar el formulario
                            document.getElementById('userForm').reset();
                            document.getElementById('userId').value = '';
                        } else {
                            showError(result.message || 'Error al guardar el usuario');
                        }
                    },
                    error: function(xhr, status, error) {
                        console.error('Error saving user:', error);
                        console.error('Response text:', xhr.responseText);
                        showError('Error al guardar el usuario');
                    },
                    complete: function() {
                        // Restaurar el botón
                        saveButton.innerHTML = originalText;
                        saveButton.disabled = false;
                    }
                });
            } catch (error) {
                console.error('Error saving user:', error);
                showError('Error al guardar el usuario');
                // Restaurar el botón en caso de error
                const saveButton = document.querySelector('#userModal .btn-primary');
                saveButton.innerHTML = originalText;
                saveButton.disabled = false;
            }
        }

        async function deleteUser(id) {
            try {
                const result = await Swal.fire({
                    title: '¿Está seguro?',
                    text: "Esta acción no se puede deshacer",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#e74c3c',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Sí, eliminar',
                    cancelButtonText: 'Cancelar',
                    showLoaderOnConfirm: true,
                    preConfirm: async () => {
                        try {
                            const response = await fetch(`/User/Delete/${id}`, {
                                method: 'DELETE'
                            });
                            const result = await response.json();
                            if (!result.success) {
                                throw new Error(result.message || 'Error al eliminar el usuario');
                            }
                            return result;
                        } catch (error) {
                            Swal.showValidationMessage(`Error: ${error.message}`);
                        }
                    },
                    allowOutsideClick: () => !Swal.isLoading()
                });

                if (result.isConfirmed) {
                    await loadUsers();
                    Swal.fire(
                        '¡Eliminado!',
                        'El usuario ha sido eliminado.',
                        'success'
                    );
                }
            } catch (error) {
                console.error('Error deleting user:', error);
                showError('Error al eliminar el usuario');
            }
        }

        function showSuccess(message) {
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'success',
                    title: '¡Éxito!',
                    text: message,
                    confirmButtonColor: '#27ae60'
                });
            } else {
                alert('Éxito: ' + message);
            }
        }

        function showError(message) {
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: message,
                    confirmButtonColor: '#e74c3c'
                });
            } else {
                alert('Error: ' + message);
            }
        }
    </script>
} 