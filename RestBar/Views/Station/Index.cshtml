@model IEnumerable<RestBar.Models.Station>

@{
    ViewData["Title"] = "Gestión de Estaciones";
}

<div class="container-fluid">
    <!-- Header con filtros -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h3 class="mb-0">
                            <i class="fas fa-fire"></i> Gestión de Estaciones
                        </h3>
                        <button class="btn btn-light" onclick="openCreateModal()">
                            <i class="fas fa-plus"></i> Nueva Estación
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="searchInput" class="form-label">
                                    <i class="fas fa-search"></i> Buscar Estación
                                </label>
                                <input type="text" class="form-control" id="searchInput" placeholder="Buscar por nombre...">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="typeFilter" class="form-label">
                                    <i class="fas fa-filter"></i> Filtrar por Tipo
                                </label>
                                <select class="form-select" id="typeFilter">
                                    <option value="">Todos los tipos</option>
                                    <option value="Cocina">Cocina</option>
                                    <option value="Bar">Bar</option>
                                    <option value="Café">Café</option>
                                    <option value="Postres">Postres</option>
                                    <option value="Parrilla">Parrilla</option>
                                    <option value="Sushi">Sushi</option>
                                    <option value="Pizza">Pizza</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label for="productFilter" class="form-label">
                                    <i class="fas fa-box"></i> Filtrar por Productos
                                </label>
                                <select class="form-select" id="productFilter">
                                    <option value="">Todas las estaciones</option>
                                    <option value="with">Con productos</option>
                                    <option value="without">Sin productos</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Contenedor de cards -->
    <div class="row" id="stationsContainer">
        @foreach (var station in Model)
        {
            <div class="col-lg-4 col-md-6 mb-4 station-card" 
                 data-name="@station.Name.ToLower()" 
                 data-type="@station.Type" 
                 data-products="@(station.Products.Any() ? "with" : "without")">
                <div class="card h-100 station-card-inner">
                    <div class="card-header bg-gradient-primary text-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="fas fa-fire"></i> @station.Name
                            </h5>
                            <div class="dropdown">
                                <button class="btn btn-sm btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" onclick="viewStation('@station.Id')">
                                        <i class="fas fa-eye"></i> Ver Detalles
                                    </a></li>
                                    <li><a class="dropdown-item" href="#" onclick="editStation('@station.Id')">
                                        <i class="fas fa-edit"></i> Editar
                                    </a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item text-danger" href="#" onclick="deleteStation('@station.Id', '@station.Name')">
                                        <i class="fas fa-trash"></i> Eliminar
                                    </a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-6">
                                <p class="mb-1"><strong>Tipo:</strong></p>
                                <span class="badge bg-info">@station.Type</span>
                            </div>
                            <div class="col-6">
                                <p class="mb-1"><strong>Productos:</strong></p>
                                @if (station.Products.Any())
                                {
                                    <span class="badge bg-warning">@station.Products.Count producto(s)</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary">Sin productos</span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card-footer bg-transparent">
                        <div class="d-grid gap-2">
                            <button class="btn btn-outline-primary btn-sm" onclick="viewStation('@station.Id')">
                                <i class="fas fa-eye"></i> Ver Detalles
                            </button>
                            <button class="btn btn-outline-warning btn-sm" onclick="editStation('@station.Id')">
                                <i class="fas fa-edit"></i> Editar
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Mensaje cuando no hay estaciones -->
    <div class="row" id="noStationsMessage" style="display: none;">
        <div class="col-12">
            <div class="alert alert-info text-center">
                <i class="fas fa-info-circle fa-2x mb-3"></i>
                <h4>No se encontraron estaciones</h4>
                <p>No hay estaciones que coincidan con los filtros aplicados.</p>
                <button class="btn btn-primary" onclick="clearFilters()">
                    <i class="fas fa-times"></i> Limpiar Filtros
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Crear/Editar Estación -->
<div class="modal fade" id="stationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">Nueva Estación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="stationForm">
                    <input type="hidden" id="stationId" name="Id">
                    <div class="mb-3">
                        <label for="stationName" class="form-label">Nombre de la Estación</label>
                        <input type="text" class="form-control" id="stationName" name="Name" required>
                    </div>
                    <div class="mb-3">
                        <label for="stationType" class="form-label">Tipo de Estación</label>
                        <select class="form-select" id="stationType" name="Type" required>
                            <option value="">Seleccione un tipo...</option>
                            <option value="Cocina">Cocina</option>
                            <option value="Bar">Bar</option>
                            <option value="Café">Café</option>
                            <option value="Postres">Postres</option>
                            <option value="Parrilla">Parrilla</option>
                            <option value="Sushi">Sushi</option>
                            <option value="Pizza">Pizza</option>
                            <option value="Otro">Otro</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="stationIcon" class="form-label">Ícono (clase de Font Awesome)</label>
                        <input type="text" class="form-control" id="stationIcon" name="Icon" placeholder="Ej: fas fa-utensils">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" id="saveStationBtn">
                    <i class="fas fa-save"></i> Guardar
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Ver Detalles -->
<div class="modal fade" id="detailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Detalles de la Estación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="detailsContent">
                <!-- Contenido dinámico -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .station-card {
            position: relative;
            z-index: 1;
        }

        .station-card:hover {
            z-index: 2;
        }
        
        .station-card-inner {
            transition: all 0.3s ease;
            border: none;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        .station-card:hover .station-card-inner {
            transform: translateY(-5px);
            box-shadow: 0 8px 15px rgba(0, 0, 0, 0.2);
        }

        .bg-gradient-primary {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        }

        .card-header {
            border-bottom: none;
        }

        .badge {
            font-size: 0.8rem;
        }

        .dropdown-item:hover {
            background-color: #f8f9fa;
        }

        .station-card.hidden {
            display: none !important;
        }

        .form-control:focus, .form-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        let isEditMode = false;
        let currentStationId = null;

        $(document).ready(function() {
            // Filtros
            $('#searchInput, #typeFilter, #productFilter').on('input change', filterStations);
            
            // Auto-completar tipo personalizado
            $('#stationType').on('change', function() {
                if ($(this).val() === 'Otro') {
                    Swal.fire({
                        title: 'Tipo Personalizado',
                        input: 'text',
                        inputLabel: 'Ingrese el tipo de estación',
                        inputPlaceholder: 'Ej: Parrilla, Sushi, etc.',
                        showCancelButton: true,
                        confirmButtonText: 'Agregar',
                        cancelButtonText: 'Cancelar',
                        inputValidator: (value) => {
                            if (!value || value.trim() === '') {
                                return 'Debe ingresar un tipo válido';
                            }
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const customType = result.value.trim();
                            $(this).append(new Option(customType, customType, true, true));
                        } else {
                            $(this).val('');
                        }
                    });
                }
            });

            // Guardar estación
            $('#saveStationBtn').on('click', saveStation);
        });

        function filterStations() {
            const searchTerm = $('#searchInput').val().toLowerCase();
            const typeFilter = $('#typeFilter').val();
            const productFilter = $('#productFilter').val();
            let visibleCount = 0;

            $('.station-card').each(function() {
                const card = $(this);
                const name = card.data('name');
                const type = card.data('type');
                const products = card.data('products');

                let show = true;

                // Filtro de búsqueda
                if (searchTerm && !name.includes(searchTerm)) {
                    show = false;
                }

                // Filtro de tipo
                if (typeFilter && type !== typeFilter) {
                    show = false;
                }

                // Filtro de productos
                if (productFilter && products !== productFilter) {
                    show = false;
                }

                if (show) {
                    card.removeClass('hidden');
                    visibleCount++;
                } else {
                    card.addClass('hidden');
                }
            });

            // Mostrar/ocultar mensaje de no resultados
            if (visibleCount === 0) {
                $('#noStationsMessage').show();
            } else {
                $('#noStationsMessage').hide();
            }
        }

        function clearFilters() {
            $('#searchInput').val('');
            $('#typeFilter').val('');
            $('#productFilter').val('');
            filterStations();
        }

        function openCreateModal() {
            isEditMode = false;
            currentStationId = null;
            $('#modalTitle').text('Nueva Estación');
            $('#stationForm')[0].reset();
            $('#stationId').val('');
            $('#stationModal').modal('show');
        }

        function editStation(id) {
            isEditMode = true;
            currentStationId = id;
            $('#modalTitle').text('Editar Estación');
            
            // Cargar datos de la estación
            $.get(`/Station/GetStationById/${id}`)
                .done(function(response) {
                    if (response.success) {
                        const station = response.data;
                        $('#stationId').val(station.id);
                        $('#stationName').val(station.name);
                        $('#stationType').val(station.type);
                        $('#stationIcon').val(station.icon);
                        $('#stationModal').modal('show');
                    } else {
                        Swal.fire('Error', 'No se pudo cargar la estación', 'error');
                    }
                })
                .fail(function() {
                    Swal.fire('Error', 'Error al cargar la estación', 'error');
                });
        }

        function saveStation() {
            const formData = new FormData();

            // Solo enviamos el Id si estamos editando
            if (isEditMode) {
                formData.append('Id', $('#stationId').val());
            }

            const name = $('#stationName').val().trim();
            const type = $('#stationType').val();
            const icon = $('#stationIcon').val();

            formData.append('Name', name);
            formData.append('Type', type);
            formData.append('Icon', icon);

            // Validaciones frontend
            if (!name) {
                Swal.fire('Error', 'El nombre de la estación es requerido', 'error');
                return;
            }

            if (!type) {
                Swal.fire('Error', 'El tipo de estación es requerido', 'error');
                return;
            }

            const url = isEditMode ? `/Station/EditAjax/${$('#stationId').val()}` : '/Station/CreateAjax';

            $.ajax({
                url: url,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false
            })
            .done(function (response) {
                if (response.success) {
                    Swal.fire({
                        title: '¡Éxito!',
                        text: isEditMode ? 'Estación actualizada correctamente' : 'Estación creada correctamente',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire('Error', response.message || 'Error al guardar la estación', 'error');
                    if (response.errors) {
                        console.error("Errores del modelo:", response.errors);
                    }
                }
            })
            .fail(function (xhr) {
                let errorMessage = 'Error al guardar la estación';
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMessage = xhr.responseJSON.message;
                }
                Swal.fire('Error', errorMessage, 'error');
            });
        }

        function viewStation(id) {
            $.get(`/Station/DetailsAjax/${id}`)
                .done(function(response) {
                    $('#detailsContent').html(response);
                    $('#detailsModal').modal('show');
                })
                .fail(function() {
                    Swal.fire('Error', 'Error al cargar los detalles', 'error');
                });
        }

        function deleteStation(id, name) {
            Swal.fire({
                title: '¿Está seguro?',
                text: `¿Desea eliminar la estación "${name}"? Esta acción no se puede deshacer.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'Sí, eliminar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post(`/Station/DeleteAjax/${id}`)
                    .done(function(response) {
                        if (response.success) {
                            Swal.fire({
                                title: '¡Eliminado!',
                                text: 'La estación ha sido eliminada correctamente',
                                icon: 'success',
                                timer: 2000,
                                showConfirmButton: false
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire('Error', response.message || 'Error al eliminar la estación', 'error');
                        }
                    })
                    .fail(function(xhr) {
                        let errorMessage = 'Error al eliminar la estación';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        Swal.fire('Error', errorMessage, 'error');
                    });
                }
            });
        }
    </script>
} 