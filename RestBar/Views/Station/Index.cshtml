@model IEnumerable<RestBar.Models.Station>

@{
    ViewData["Title"] = "Gesti√≥n de Estaciones";
}

<style>
    :root {
        --primary-color: #2c3e50;
        --secondary-color: #34495e;
        --accent-color: #e67e22;
        --success-color: #27ae60;
        --danger-color: #e74c3c;
        --warning-color: #f39c12;
        --info-color: #3498db;
        --light-color: #ecf0f1;
        --dark-color: #2c3e50;
        --gradient-primary: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        --gradient-accent: linear-gradient(135deg, var(--accent-color), #d35400);
        --gradient-success: linear-gradient(135deg, var(--success-color), #229954);
        --gradient-danger: linear-gradient(135deg, var(--danger-color), #c0392b);
        --gradient-warning: linear-gradient(135deg, var(--warning-color), #e67e22);
        --gradient-info: linear-gradient(135deg, var(--info-color), #2980b9);
        --shadow-light: 0 4px 6px rgba(0, 0, 0, 0.1);
        --shadow-medium: 0 8px 15px rgba(0, 0, 0, 0.15);
        --shadow-heavy: 0 10px 30px rgba(0, 0, 0, 0.2);
        --border-radius: 20px;
        --transition: all 0.3s ease;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        color: var(--dark-color);
    }

    /* Hero Section */
    .hero-section {
        background: var(--gradient-primary);
        color: white;
        padding: 3rem 0;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

    .hero-section::before {
        content: '';
        position: absolute;
        width: 200%;
        height: 200%;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="10" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="10" cy="50" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="90" cy="30" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
        animation: float 20s ease-in-out infinite;
        opacity: 0.1;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(180deg); }
    }

    .hero-content {
        position: relative;
        z-index: 1;
        text-align: center;
    }

    .hero-title {
        font-size: 3.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        animation: slideInFromTop 0.8s ease-out;
    }

    .hero-subtitle {
        font-size: 1.3rem;
        opacity: 0.9;
        margin-bottom: 2rem;
        animation: slideInFromBottom 0.8s ease-out;
    }

    @@keyframes slideInFromTop {
        0% { opacity: 0; transform: translateY(-50px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    @@keyframes slideInFromBottom {
        0% { opacity: 0; transform: translateY(50px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    .hero-button {
        background: var(--gradient-accent);
        color: white;
        padding: 1rem 2rem;
        border: none;
        border-radius: var(--border-radius);
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        box-shadow: var(--shadow-medium);
        text-decoration: none;
        display: inline-block;
        animation: pulse 2s ease-in-out infinite;
    }

    .hero-button:hover {
        transform: translateY(-3px);
        box-shadow: var(--shadow-heavy);
        color: white;
        text-decoration: none;
    }

    @@keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    /* Main Content */
    .main-content {
        padding: 0 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    /* Filters Section */
    .filters-section {
        background: white;
        padding: 2rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-light);
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

    .filters-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--gradient-accent);
    }

    .filters-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .filters-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
        gap: 1.5rem;
    }

    .filter-group {
        position: relative;
    }

    .filter-label {
        display: block;
        font-weight: 500;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .filter-input {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid #e1e8ed;
        border-radius: 12px;
        font-size: 1rem;
        transition: var(--transition);
        background: white;
    }

    .filter-input:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba(231, 126, 34, 0.1);
    }

    .filter-input-icon {
        position: relative;
    }

    .filter-input-icon .filter-input {
        padding-left: 3rem;
    }

    .filter-input-icon .input-icon {
        position: absolute;
        left: 1rem;
        top: 50%;
        transform: translateY(-50%);
        color: var(--accent-color);
        font-size: 1.1rem;
    }

    /* Stations Section */
    .stations-section {
        background: white;
        padding: 2rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-light);
        position: relative;
        overflow: hidden;
    }

    .stations-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--gradient-info);
    }

    .stations-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .stations-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 1.5rem;
    }

    .station-card {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-light);
        overflow: hidden;
        transition: var(--transition);
        position: relative;
        border: 2px solid transparent;
    }

    .station-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-medium);
        border-color: var(--accent-color);
    }

    .station-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--gradient-primary);
    }

    .station-card-header {
        padding: 1.5rem;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .station-name {
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--primary-color);
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .station-icon {
        color: var(--accent-color);
        font-size: 1.5rem;
    }

    .station-actions {
        position: relative;
    }

    .station-actions .btn {
        background: transparent;
        border: none;
        color: var(--primary-color);
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 50%;
        transition: var(--transition);
    }

    .station-actions .btn:hover {
        background: rgba(44, 62, 80, 0.1);
    }

    .station-card-body {
        padding: 1.5rem;
    }

    .station-info {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    @@media (min-width: 1200px) {
        .station-info {
            grid-template-columns: 1fr 1fr 1fr 1fr;
            gap: 0.75rem;
        }
        
        .station-info-item {
            text-align: center;
        }
        
        .station-badge {
            font-size: 0.75rem;
            padding: 0.4rem 0.8rem;
        }
    }

    .station-info-item {
        text-align: center;
    }

    .station-info-label {
        font-weight: 500;
        color: var(--primary-color);
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
    }

    .station-badge {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        color: white;
        display: inline-block;
    }

    .station-badge.type {
        background: var(--gradient-info);
    }

    .station-badge.products-with {
        background: var(--gradient-warning);
    }

    .station-badge.products-without {
        background: var(--gradient-danger);
    }

    .station-badge.area {
        background: var(--gradient-info);
    }

    .station-badge.no-area {
        background: var(--gradient-secondary);
        background: linear-gradient(135deg, #6c757d, #5a6268);
    }

    .station-badge.status-active {
        background: var(--gradient-success);
    }

    .station-badge.status-inactive {
        background: var(--gradient-danger);
    }

    .station-badge.inactive-badge {
        background: var(--gradient-danger);
        font-size: 0.75rem;
        margin-left: 0.5rem;
    }

    /* Estilo para estaciones inactivas */
    .station-card.station-inactive {
        opacity: 0.7;
        border-color: #dc3545;
    }

    .station-card.station-inactive::before {
        background: var(--gradient-danger);
    }

    .station-card.station-inactive .station-card-header {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
    }

    .station-card-footer {
        padding: 1.5rem;
        background: #f8f9fa;
        border-top: 1px solid rgba(0, 0, 0, 0.05);
    }

    .station-footer-actions {
        display: flex;
        gap: 0.75rem;
    }

    .station-action-btn {
        flex: 1;
        padding: 0.75rem 1rem;
        border: 2px solid transparent;
        border-radius: 12px;
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

    .station-action-btn.view {
        background: var(--gradient-info);
        color: white;
    }

    .station-action-btn.view:hover {
        background: var(--info-color);
        transform: translateY(-2px);
        box-shadow: var(--shadow-light);
    }

    .station-action-btn.edit {
        background: var(--gradient-warning);
        color: white;
    }

    .station-action-btn.edit:hover {
        background: var(--warning-color);
        transform: translateY(-2px);
        box-shadow: var(--shadow-light);
    }

    /* Hidden state for filtering */
    .station-card.hidden {
        display: none !important;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem;
        color: var(--secondary-color);
        grid-column: 1 / -1;
    }

    .empty-state-icon {
        font-size: 4rem;
        color: var(--accent-color);
        margin-bottom: 1rem;
    }

    .empty-state-message {
        font-size: 1.2rem;
        font-weight: 500;
        margin-bottom: 1rem;
    }

    .empty-state-description {
        font-size: 1rem;
        color: var(--secondary-color);
        margin-bottom: 2rem;
    }

    /* Modal Styles */
    .modal-content {
        border: none;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-heavy);
        overflow: hidden;
    }

    .modal-header {
        background: var(--gradient-primary);
        color: white;
        padding: 1.5rem;
        border-bottom: none;
    }

    .modal-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0;
    }

    .btn-close {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        border-radius: 50%;
        width: 2rem;
        height: 2rem;
        opacity: 1;
        transition: var(--transition);
    }

    .btn-close:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: scale(1.1);
    }

    .modal-body {
        padding: 2rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        font-weight: 500;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid #e1e8ed;
        border-radius: 12px;
        font-size: 1rem;
        transition: var(--transition);
        background: white;
    }

            .form-control:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(231, 126, 34, 0.1);
        }

        .form-text {
            font-size: 0.85rem;
            color: #6c757d;
            margin-top: 5px;
            display: flex;
            align-items: center;
        }

        .form-text i {
            color: var(--info-color);
        }

        /* Estilos para secciones del modal */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-group:not(:last-child) {
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            padding-bottom: 1rem;
        }

        /* Separadores visuales */
        .form-group:has(+ .form-group) {
            margin-bottom: 2rem;
        }

        /* Estilos para campos requeridos */
        .form-label:has(+ .form-control[required]) {
            font-weight: 600;
        }

        /* Mejorar espaciado en el modal */
        .modal-body {
            padding: 1.5rem;
        }

        .modal-body .form-group:first-child {
            margin-top: 0;
        }

        .modal-body .form-group:last-child {
            margin-bottom: 0;
            border-bottom: none;
            padding-bottom: 0;
        }

    .modal-footer {
        padding: 1.5rem;
        background: #f8f9fa;
        border-top: 1px solid rgba(0, 0, 0, 0.05);
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: var(--gradient-accent);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-medium);
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #5a6268;
        transform: translateY(-2px);
    }

    .btn-danger {
        background: var(--gradient-danger);
        color: white;
    }

    .btn-danger:hover {
        background: var(--danger-color);
        transform: translateY(-2px);
        box-shadow: var(--shadow-medium);
    }

    /* Dropdown Styles */
    .dropdown-menu {
        border: none;
        border-radius: 12px;
        box-shadow: var(--shadow-medium);
        padding: 0.5rem;
        margin-top: 0.5rem;
    }

    .dropdown-item {
        padding: 0.75rem 1rem;
        border-radius: 8px;
        transition: var(--transition);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--primary-color);
        text-decoration: none;
    }

    .dropdown-item:hover {
        background: rgba(231, 126, 34, 0.1);
        color: var(--accent-color);
        transform: translateX(5px);
    }

    .dropdown-item.text-danger:hover {
        background: rgba(231, 76, 60, 0.1);
        color: var(--danger-color);
    }

    /* Clear Filters Button */
    .clear-filters-btn {
        background: var(--gradient-primary);
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .clear-filters-btn:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-medium);
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .hero-title {
            font-size: 2.5rem;
        }

        .hero-subtitle {
            font-size: 1.1rem;
        }

        .main-content {
            padding: 0 1rem;
        }

        .filters-grid {
            grid-template-columns: 1fr;
        }

        .stations-grid {
            grid-template-columns: 1fr;
        }

        .station-info {
            grid-template-columns: 1fr;
        }

        .station-footer-actions {
            flex-direction: column;
        }
    }
</style>

<!-- Hero Section -->
<section class="hero-section">
    <div class="container">
        <div class="hero-content">
            <h1 class="hero-title">
                <i class="fas fa-fire"></i> Gesti√≥n de Estaciones
            </h1>
            <p class="hero-subtitle">
                Administra las estaciones de trabajo de tu cocina y bar
            </p>
            <button class="hero-button" onclick="openCreateModal()">
                <i class="fas fa-plus"></i> Nueva Estaci√≥n
            </button>
        </div>
    </div>
</section>

<!-- Main Content -->
<div class="main-content">
    <!-- Filters Section -->
    <section class="filters-section">
        <h2 class="filters-title">
            <i class="fas fa-filter"></i> Filtros de B√∫squeda
        </h2>
        <div class="filters-grid">
            <div class="filter-group">
                <label class="filter-label">
                    <i class="fas fa-search"></i> Buscar Estaci√≥n
                </label>
                <div class="filter-input-icon">
                    <input type="text" id="searchInput" class="filter-input" placeholder="Buscar por nombre...">
                    <i class="fas fa-search input-icon"></i>
                </div>
            </div>
            <div class="filter-group">
                <label class="filter-label">
                    <i class="fas fa-tags"></i> Filtrar por Tipo
                </label>
                <select class="filter-input" id="typeFilter">
                    <option value="">Todos los tipos</option>
                    <option value="Cocina">Cocina</option>
                    <option value="Bar">Bar</option>
                    <option value="Caf√©">Caf√©</option>
                    <option value="Postres">Postres</option>
                    <option value="Parrilla">Parrilla</option>
                    <option value="Sushi">Sushi</option>
                    <option value="Pizza">Pizza</option>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">
                    <i class="fas fa-box"></i> Filtrar por Productos
                </label>
                <select class="filter-input" id="productFilter">
                    <option value="">Todas las estaciones</option>
                    <option value="with">Con productos</option>
                    <option value="without">Sin productos</option>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">
                    <i class="fas fa-map-marker-alt"></i> Filtrar por √Årea
                </label>
                <select class="filter-input" id="areaFilter">
                    <option value="">Todas las √°reas</option>
                    @{
                        var areas = Model.Where(s => s.Area != null).Select(s => s.Area).Distinct().OrderBy(a => a.Name);
                    }
                    @foreach (var area in areas)
                    {
                        <option value="@area.Name">@area.Name</option>
                    }
                    <option value="sin-area">Sin √°rea asignada</option>
                </select>
            </div>
            <div class="filter-group">
                <label class="filter-label">
                    <i class="fas fa-toggle-on"></i> Filtrar por Estado
                </label>
                <select class="filter-input" id="statusFilter">
                    <option value="">Todos los estados</option>
                    <option value="active">Activas</option>
                    <option value="inactive">Inactivas</option>
                </select>
            </div>
        </div>
    </section>

    <!-- Stations Section -->
    <section class="stations-section">
        <h2 class="stations-title">
            <i class="fas fa-fire"></i> Estaciones de Trabajo
        </h2>
        <div class="stations-grid" id="stationsContainer">
            @foreach (var station in Model)
            {
                <div class="station-card @(station.IsActive ? "" : "station-inactive")" 
                     data-name="@station.Name.ToLower()" 
                     data-type="@station.Type" 
                     data-products="@(station.Products.Any() ? "with" : "without")"
                     data-area="@(station.Area?.Name ?? "sin-area")"
                     data-status="@(station.IsActive ? "active" : "inactive")">
                    <div class="station-card-header">
                        <h3 class="station-name">
                            @if (!string.IsNullOrWhiteSpace(station.Icon))
                            {
                                <i class="fas @station.Icon station-icon"></i>
                            }
                            else
                            {
                                <i class="fas fa-fire station-icon"></i>
                            }
                            @station.Name
                            @if (!station.IsActive)
                            {
                                <span class="station-badge inactive-badge">
                                    <i class="fas fa-ban"></i> Inactiva
                                </span>
                            }
                        </h3>
                        <div class="station-actions">
                            <div class="dropdown">
                                <button class="btn" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu">
                                    <li><a class="dropdown-item" href="#" onclick="viewStation('@station.Id')">
                                        <i class="fas fa-eye"></i> Ver Detalles
                                    </a></li>
                                    <li><a class="dropdown-item" href="#" onclick="editStation('@station.Id')">
                                        <i class="fas fa-edit"></i> Editar
                                    </a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><a class="dropdown-item text-danger" href="#" onclick="deleteStation('@station.Id', '@station.Name')">
                                        <i class="fas fa-trash"></i> Eliminar
                                    </a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="station-card-body">
                        <div class="station-info">
                            <div class="station-info-item">
                                <div class="station-info-label">Tipo:</div>
                                <span class="station-badge type">@station.Type</span>
                            </div>
                            <div class="station-info-item">
                                <div class="station-info-label">√Årea:</div>
                                @if (station.Area != null)
                                {
                                    <span class="station-badge area">
                                        <i class="fas fa-map-marker-alt"></i> @station.Area.Name
                                    </span>
                                }
                                else
                                {
                                    <span class="station-badge no-area">
                                        <i class="fas fa-question-circle"></i> Sin √°rea
                                    </span>
                                }
                            </div>
                            <div class="station-info-item">
                                <div class="station-info-label">Estado:</div>
                                @if (station.IsActive)
                                {
                                    <span class="station-badge status-active">
                                        <i class="fas fa-check-circle"></i> Activa
                                    </span>
                                }
                                else
                                {
                                    <span class="station-badge status-inactive">
                                        <i class="fas fa-ban"></i> Inactiva
                                    </span>
                                }
                            </div>
                            <div class="station-info-item">
                                <div class="station-info-label">Productos:</div>
                                @if (station.Products.Any())
                                {
                                    <span class="station-badge products-with">
                                        <i class="fas fa-box"></i> @station.Products.Count producto(s)
                                    </span>
                                }
                                else
                                {
                                    <span class="station-badge products-without">
                                        <i class="fas fa-inbox"></i> Sin productos
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="station-card-footer">
                        <div class="station-footer-actions">
                            <button class="station-action-btn view" onclick="viewStation('@station.Id')">
                                <i class="fas fa-eye"></i> Ver Detalles
                            </button>
                            <button class="station-action-btn edit" onclick="editStation('@station.Id')">
                                <i class="fas fa-edit"></i> Editar
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Empty State -->
        <div class="empty-state" id="noStationsMessage" style="display: none;">
            <i class="fas fa-info-circle empty-state-icon"></i>
            <h4 class="empty-state-message">No se encontraron estaciones</h4>
            <p class="empty-state-description">No hay estaciones que coincidan con los filtros aplicados.</p>
            <button class="clear-filters-btn" onclick="clearFilters()">
                <i class="fas fa-times"></i> Limpiar Filtros
            </button>
        </div>
    </section>
</div>

<!-- Modal para Crear/Editar Estaci√≥n -->
<div class="modal fade" id="stationModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">
                    <i class="fas fa-plus"></i> Nueva Estaci√≥n
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="stationForm">
                    <input type="hidden" id="stationId" name="Id">
                    
                    <!-- 1. Informaci√≥n B√°sica -->
                    <div class="form-group">
                        <label for="stationName" class="form-label">
                            <i class="fas fa-fire"></i> Nombre de la Estaci√≥n *
                        </label>
                        <input type="text" class="form-control" id="stationName" name="Name" required placeholder="Ingrese el nombre de la estaci√≥n">
                    </div>
                    
                    <div class="form-group">
                        <label for="stationType" class="form-label">
                            <i class="fas fa-tags"></i> Tipo de Estaci√≥n *
                        </label>
                        <select class="form-control" id="stationType" name="Type" required>
                            <option value="">Seleccione un tipo...</option>
                            <option value="Cocina">Cocina</option>
                            <option value="Bar">Bar</option>
                            <option value="Caf√©">Caf√©</option>
                            <option value="Postres">Postres</option>
                            <option value="Parrilla">Parrilla</option>
                            <option value="Sushi">Sushi</option>
                            <option value="Pizza">Pizza</option>
                            <option value="Otro">Otro</option>
                        </select>
                    </div>
                    
                    <!-- 2. Ubicaci√≥n Organizacional -->
                    <div class="form-group">
                        <label for="stationCompany" class="form-label">
                            <i class="fas fa-building"></i> Compa√±√≠a (Autom√°tica)
                        </label>
                        <input type="text" class="form-control" id="stationCompany" readonly placeholder="Cargando compa√±√≠a...">
                        <small class="form-text text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            La compa√±√≠a se asigna autom√°ticamente seg√∫n tu usuario logueado
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <label for="stationBranch" class="form-label">
                            <i class="fas fa-store-alt"></i> Sucursal *
                        </label>
                        <select class="form-control" id="stationBranch" name="BranchId" required>
                            <option value="">Cargando sucursales...</option>
                        </select>
                        <small class="form-text text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            Solo se muestran las sucursales de su compa√±√≠a
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <label for="stationArea" class="form-label">
                            <i class="fas fa-map-marker-alt"></i> √Årea
                        </label>
                        <select class="form-control" id="stationArea" name="AreaId">
                            <option value="">Seleccione una sucursal primero...</option>
                        </select>
                        <small class="form-text text-muted">
                            <i class="fas fa-info-circle me-1"></i>
                            Las √°reas se cargan autom√°ticamente seg√∫n la sucursal seleccionada
                        </small>
                    </div>
                    
                    <!-- 3. Configuraci√≥n Visual -->
                    <div class="form-group">
                        <label for="stationIcon" class="form-label">
                            <i class="fas fa-icons"></i> √çcono
                        </label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i id="modalIconPreview" class="fas fa-fire"></i>
                            </span>
                            <select class="form-control" id="stationIcon" name="Icon">
                                <option value="">-- Seleccione un √≠cono --</option>
                                <option value="fa-utensils">üç¥ Utensils (Cocina)</option>
                                <option value="fa-cocktail">üç∏ Cocktail (Bar)</option>
                                <option value="fa-coffee">‚òï Coffee (Caf√©)</option>
                                <option value="fa-fire">üî• Fire (Parrilla)</option>
                                <option value="fa-pizza-slice">üçï Pizza</option>
                                <option value="fa-cookie-bite">üç™ Cookie (Postres)</option>
                                <option value="fa-ice-cream">üç¶ Ice Cream (Postres)</option>
                                <option value="fa-fish">üêü Fish (Sushi)</option>
                                <option value="fa-hamburger">üçî Hamburger</option>
                                <option value="fa-wine-glass">üç∑ Wine Glass (Bar)</option>
                                <option value="fa-beer">üç∫ Beer (Bar)</option>
                                <option value="fa-mortar-pestle">üß™ Mortar (Especial)</option>
                                <option value="fa-bread-slice">üçû Bread (Panader√≠a)</option>
                                <option value="fa-cheese">üßÄ Cheese (L√°cteos)</option>
                                <option value="fa-drumstick-bite">üçó Chicken (Pollo)</option>
                            </select>
                        </div>
                    </div>
                    
                    <!-- 4. Estado -->
                    <div class="form-group">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="stationIsActive" name="IsActive" checked>
                            <label class="form-check-label" for="stationIsActive">
                                <i class="fas fa-toggle-on text-success"></i> Estaci√≥n Activa
                            </label>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cancelar
                </button>
                <button type="button" class="btn btn-primary" id="saveStationBtn">
                    <i class="fas fa-save"></i> Guardar Estaci√≥n
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Ver Detalles -->
<div class="modal fade" id="detailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-info-circle"></i> Detalles de la Estaci√≥n
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="detailsContent">
                <!-- Contenido din√°mico -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                    <i class="fas fa-times"></i> Cerrar
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Variables globales
        let isEditMode = false;
        let currentStationId = null;

        // Funciones globales
        window.openCreateModal = function() {
            isEditMode = false;
            currentStationId = null;
            $('#modalTitle').html('<i class="fas fa-plus"></i> Nueva Estaci√≥n');
            
            // Cargar compa√±√≠a y sucursales
            loadUserCompanyAndBranches();
            
            // Resetear el formulario
            $('#stationForm')[0].reset();
            $('#stationId').val('');
            $('#stationIsActive').prop('checked', true).trigger('change');
            $('#modalIconPreview').removeClass().addClass('fas fa-fire');
            $('#stationArea').empty().append('<option value="">Seleccione una sucursal primero...</option>');
            $('#stationModal').modal('show');
        };

        window.editStation = function(id) {
            isEditMode = true;
            currentStationId = id;
            $('#modalTitle').html('<i class="fas fa-edit"></i> Editar Estaci√≥n');
            
            // Cargar compa√±√≠a y sucursales
            loadUserCompanyAndBranches();
            
            // Cargar datos de la estaci√≥n
            $.get(`/Station/GetStationById/${id}`)
                .done(function(response) {
                    if (response.success) {
                        const station = response.data;
                        
                        // Poblar los campos con un peque√±o delay para asegurar que se actualicen
                        setTimeout(() => {
                            $('#stationId').val(station.id);
                            $('#stationName').val(station.name);
                            $('#stationType').val(station.type);
                            
                            // Establecer la sucursal despu√©s de que se carguen
                            if (station.branchId) {
                                $('#stationBranch').val(station.branchId);
                                // Cargar las √°reas de esta sucursal
                                loadAreasByBranch(station.branchId);
                                
                                // Establecer el √°rea despu√©s de que se carguen las √°reas
                                setTimeout(() => {
                                    if (station.areaId) {
                                        const areaOption = $('#stationArea option[value="' + station.areaId + '"]');
                                        if (areaOption.length > 0) {
                                            $('#stationArea').val(station.areaId);
                                        } else {
                                            $('#stationArea').val('');
                                        }
                                    } else {
                                        $('#stationArea').val('');
                                    }
                                }, 500);
                            } else {
                                $('#stationArea').empty().append('<option value="">Seleccione una sucursal primero...</option>');
                            }
                            
                            $('#stationIcon').val(station.icon || '').trigger('change');
                            $('#stationIsActive').prop('checked', station.isActive).trigger('change');
                            
                            $('#stationModal').modal('show');
                        }, 100);
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message || 'No se pudo cargar la estaci√≥n',
                            confirmButtonColor: '#e74c3c'
                        });
                    }
                })
                .fail(function() {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error al cargar la estaci√≥n',
                        confirmButtonColor: '#e74c3c'
                    });
                });
        };

        window.deleteStation = function(id, name) {
            Swal.fire({
                title: '¬øEst√° seguro?',
                text: `¬øDesea eliminar la estaci√≥n "${name}"? Esta acci√≥n no se puede deshacer.`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#e74c3c',
                cancelButtonColor: '#6c757d',
                confirmButtonText: 'S√≠, eliminar',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.post(`/Station/DeleteAjax/${id}`)
                    .done(function(response) {
                        if (response.success) {
                            Swal.fire({
                                icon: 'success',
                                title: '¬°Eliminado!',
                                text: 'La estaci√≥n ha sido eliminada correctamente',
                                timer: 2000,
                                showConfirmButton: false,
                                confirmButtonColor: '#27ae60'
                            }).then(() => {
                                location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Error',
                                text: response.message || 'Error al eliminar la estaci√≥n',
                                confirmButtonColor: '#e74c3c'
                            });
                        }
                    })
                    .fail(function(xhr) {
                        let errorMessage = 'Error al eliminar la estaci√≥n';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: errorMessage,
                            confirmButtonColor: '#e74c3c'
                        });
                    });
                }
            });
        };

        window.viewStation = function(id) {
            $.get(`/Station/DetailsAjax/${id}`)
                .done(function(response) {
                    $('#detailsContent').html(response);
                    $('#detailsModal').modal('show');
                })
                .fail(function() {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Error al cargar los detalles',
                        confirmButtonColor: '#e74c3c'
                    });
                });
        };

        window.saveStation = function() {
            const formData = new FormData();

            // Solo enviamos el Id si estamos editando
            if (isEditMode) {
                formData.append('Id', $('#stationId').val());
            }

            const name = $('#stationName').val().trim();
            const type = $('#stationType').val();
            const icon = $('#stationIcon').val();
            const areaId = $('#stationArea').val();
            const isActive = $('#stationIsActive').is(':checked');

            formData.append('Name', name);
            formData.append('Type', type);
            
            // Solo enviar el √≠cono si no est√° vac√≠o
            if (icon && icon.trim() !== '') {
                formData.append('Icon', icon.trim());
            } else {
                formData.append('Icon', '');
            }
            
            formData.append('AreaId', areaId || '');
            formData.append('IsActive', isActive);

            // Validaciones frontend
            if (!name) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'El nombre de la estaci√≥n es requerido',
                    confirmButtonColor: '#e74c3c'
                });
                return;
            }

            if (!type) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'El tipo de estaci√≥n es requerido',
                    confirmButtonColor: '#e74c3c'
                });
                return;
            }

            const url = isEditMode ? `/Station/EditAjax/${$('#stationId').val()}` : '/Station/CreateAjax';

            $.ajax({
                url: url,
                method: 'POST',
                data: formData,
                processData: false,
                contentType: false
            })
            .done(function (response) {
                if (response.success) {
                    Swal.fire({
                        icon: 'success',
                        title: '¬°√âxito!',
                        text: isEditMode ? 'Estaci√≥n actualizada correctamente' : 'Estaci√≥n creada correctamente',
                        timer: 2000,
                        showConfirmButton: false,
                        confirmButtonColor: '#27ae60'
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: response.message || 'Error al guardar la estaci√≥n',
                        confirmButtonColor: '#e74c3c'
                    });
                    if (response.errors) {
                        console.error("Errores del modelo:", response.errors);
                    }
                }
            })
            .fail(function (xhr) {
                let errorMessage = 'Error al guardar la estaci√≥n';
                if (xhr.responseJSON && xhr.responseJSON.message) {
                    errorMessage = xhr.responseJSON.message;
                }
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: errorMessage,
                    confirmButtonColor: '#e74c3c'
                });
            });
        };

        $(document).ready(function() {
            // Filtros
            $('#searchInput, #typeFilter, #productFilter, #areaFilter, #statusFilter').on('input change', filterStations);
            
            // Auto-completar tipo personalizado
            $('#stationType').on('change', function() {
                if ($(this).val() === 'Otro') {
                    Swal.fire({
                        title: 'Tipo Personalizado',
                        input: 'text',
                        inputLabel: 'Ingrese el tipo de estaci√≥n',
                        inputPlaceholder: 'Ej: Parrilla, Sushi, etc.',
                        showCancelButton: true,
                        confirmButtonText: 'Agregar',
                        cancelButtonText: 'Cancelar',
                        confirmButtonColor: '#e67e22',
                        cancelButtonColor: '#6c757d',
                        inputValidator: (value) => {
                            if (!value || value.trim() === '') {
                                return 'Debe ingresar un tipo v√°lido';
                            }
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const customType = result.value.trim();
                            $(this).append(new Option(customType, customType, true, true));
                        } else {
                            $(this).val('');
                        }
                    });
                }
            });

            // Guardar estaci√≥n
            $('#saveStationBtn').on('click', saveStation);

            // Cargar datos iniciales
            loadUserCompanyAndBranches();
            
            // Evento para cargar √°reas cuando se selecciona una sucursal
            $('#stationBranch').on('change', function() {
                const branchId = $(this).val();
                console.log('üîÑ Evento change en stationBranch, branchId:', branchId);
                loadAreasByBranch(branchId);
            });

            // Preview del √≠cono en el modal
            $('#stationIcon').on('change', function() {
                var selectedIcon = $(this).val();
                var iconPreview = $('#modalIconPreview');
                
                if (selectedIcon && selectedIcon.trim() !== '') {
                    iconPreview.removeClass().addClass('fas ' + selectedIcon);
                } else {
                    iconPreview.removeClass().addClass('fas fa-fire');
                }
            });

            // Toggle visual para IsActive en el modal
            $('#stationIsActive').on('change', function() {
                var label = $(this).next('label');
                var icon = label.find('i');
                
                if ($(this).is(':checked')) {
                    icon.removeClass('fa-toggle-off text-danger').addClass('fa-toggle-on text-success');
                    label.contents().filter(function() {
                        return this.nodeType === 3; // Text nodes
                    }).first().replaceWith(' Estaci√≥n Activa');
                } else {
                    icon.removeClass('fa-toggle-on text-success').addClass('fa-toggle-off text-danger');
                    label.contents().filter(function() {
                        return this.nodeType === 3; // Text nodes
                    }).first().replaceWith(' Estaci√≥n Inactiva');
                }
            });
        });

        function filterStations() {
            const searchTerm = $('#searchInput').val().toLowerCase();
            const typeFilter = $('#typeFilter').val();
            const productFilter = $('#productFilter').val();
            const areaFilter = $('#areaFilter').val();
            const statusFilter = $('#statusFilter').val();
            let visibleCount = 0;

            $('.station-card').each(function() {
                const card = $(this);
                const name = card.data('name');
                const type = card.data('type');
                const products = card.data('products');
                const area = card.data('area');
                const status = card.data('status');

                let show = true;

                // Filtro de b√∫squeda
                if (searchTerm && !name.includes(searchTerm)) {
                    show = false;
                }

                // Filtro de tipo
                if (typeFilter && type !== typeFilter) {
                    show = false;
                }

                // Filtro de productos
                if (productFilter && products !== productFilter) {
                    show = false;
                }

                // Filtro de √°rea
                if (areaFilter && area !== areaFilter) {
                    show = false;
                }

                // Filtro de estado
                if (statusFilter && status !== statusFilter) {
                    show = false;
                }

                if (show) {
                    card.removeClass('hidden');
                    visibleCount++;
                } else {
                    card.addClass('hidden');
                }
            });

            // Mostrar/ocultar mensaje de no resultados
            if (visibleCount === 0) {
                $('#noStationsMessage').show();
            } else {
                $('#noStationsMessage').hide();
            }
        }

        function clearFilters() {
            $('#searchInput').val('');
            $('#typeFilter').val('');
            $('#productFilter').val('');
            $('#areaFilter').val('');
            $('#statusFilter').val('');
            filterStations();
        }

        function loadUserCompanyAndBranches() {
            console.log('üîç Iniciando carga de compa√±√≠a y sucursales...');
            // Cargar compa√±√≠a del usuario
            $.get('/Station/GetUserCompany', function (res) {
                console.log('üì° Respuesta de compa√±√≠a:', res);
                if (res.success) {
                    console.log('‚úÖ Compa√±√≠a cargada:', res.data.companyName);
                    $('#stationCompany').val(res.data.companyName);
                    
                    // Cargar sucursales de la compa√±√≠a del usuario
                    loadBranchesByUserCompany();
                } else {
                    console.log('‚ùå Error al cargar compa√±√≠a:', res.message);
                    $('#stationCompany').val('Error al cargar compa√±√≠a');
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: res.message || 'No se pudo cargar la compa√±√≠a del usuario'
                    });
                }
            }).fail(function(xhr, status, error) {
                console.log('‚ùå Error en petici√≥n de compa√±√≠a:', error);
                $('#stationCompany').val('Error al cargar compa√±√≠a');
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error al cargar la compa√±√≠a del usuario'
                });
            });
        }

        function loadBranchesByUserCompany() {
            console.log('üîç Iniciando carga de sucursales...');
            $.get('/Station/GetBranchesByUserCompany', function (res) {
                console.log('üì° Respuesta de sucursales:', res);
                if (res.success) {
                    const select = $('#stationBranch');
                    select.empty().append('<option value="">Seleccione una sucursal</option>');
                    if (res.data && Array.isArray(res.data)) {
                        console.log('‚úÖ Sucursales encontradas:', res.data.length);
                        res.data.forEach(branch => {
                            console.log('‚ûï Agregando sucursal:', branch.name);
                            select.append(`<option value="${branch.id}">${branch.name}</option>`);
                        });
                    } else {
                        console.log('‚ö†Ô∏è No hay datos de sucursales o formato incorrecto');
                    }
                    
                    // Mostrar informaci√≥n de depuraci√≥n si est√° disponible
                    if (res.debug) {
                        console.log('=== INFORMACI√ìN DE DEPURACI√ìN ===');
                        console.log('Compa√±√≠a del usuario:', res.debug.userCompanyId);
                        console.log('Total de sucursales en BD:', res.debug.totalBranchesInDb);
                        console.log('Sucursales filtradas:', res.debug.filteredBranchesCount);
                        console.log('Todas las sucursales:', res.debug.allBranches);
                        console.log('=====================================');
                    }
                } else {
                    console.log('‚ùå Error al cargar sucursales:', res.message);
                    const select = $('#stationBranch');
                    select.empty().append('<option value="">Error al cargar sucursales</option>');
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: res.message || 'No se pudieron cargar las sucursales'
                    });
                }
            }).fail(function(xhr, status, error) {
                console.log('‚ùå Error en petici√≥n de sucursales:', error);
                const select = $('#stationBranch');
                select.empty().append('<option value="">Error al cargar sucursales</option>');
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error al cargar las sucursales'
                });
            });
        }

        function loadAreasByBranch(branchId) {
            console.log('üîç Iniciando carga de √°reas para sucursal:', branchId);
            if (!branchId) {
                console.log('‚ö†Ô∏è No hay branchId, limpiando dropdown de √°reas');
                $('#stationArea').empty().append('<option value="">Seleccione una sucursal primero...</option>');
                return;
            }

            $.get(`/Station/GetAreasByBranch/${branchId}`, function (res) {
                console.log('üì° Respuesta de √°reas:', res);
                if (res.success) {
                    const select = $('#stationArea');
                    select.empty().append('<option value="">Seleccione un √°rea...</option>');
                    if (res.data && Array.isArray(res.data)) {
                        console.log('‚úÖ √Åreas encontradas:', res.data.length);
                        res.data.forEach(area => {
                            console.log('‚ûï Agregando √°rea:', area.name);
                            select.append(`<option value="${area.id}">${area.name}</option>`);
                        });
                    } else {
                        console.log('‚ö†Ô∏è No hay datos de √°reas o formato incorrecto');
                    }
                    
                    // Mostrar informaci√≥n de depuraci√≥n si est√° disponible
                    if (res.debug) {
                        console.log('=== INFORMACI√ìN DE DEPURACI√ìN DE √ÅREAS ===');
                        console.log('Sucursal solicitada:', res.debug.requestedBranchId);
                        console.log('Total de √°reas en BD:', res.debug.totalAreasInDb);
                        console.log('√Åreas filtradas:', res.debug.filteredAreasCount);
                        console.log('Todas las √°reas:', res.debug.allAreas);
                        console.log('===========================================');
                    }
                } else {
                    console.log('‚ùå Error al cargar √°reas:', res.message);
                    const select = $('#stationArea');
                    select.empty().append('<option value="">Error al cargar √°reas</option>');
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: res.message || 'No se pudieron cargar las √°reas'
                    });
                }
            }).fail(function(xhr, status, error) {
                console.log('‚ùå Error en petici√≥n de √°reas:', error);
                const select = $('#stationArea');
                select.empty().append('<option value="">Error al cargar √°reas</option>');
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Error al cargar las √°reas'
                });
            });
        }

        function loadAreas() {
            $.get('/Station/GetAreas')
                .done(function(response) {
                    if (response.success) {
                        var areaSelect = $('#stationArea');
                        areaSelect.find('option:not(:first)').remove();
                        
                        response.data.forEach(function(area) {
                            areaSelect.append(new Option(area.name, area.id));
                        });
                    }
                })
                .fail(function() {
                    console.error('Error al cargar las √°reas');
                });
        }

        function openCreateModal() {
            isEditMode = false;
            currentStationId = null;
            $('#modalTitle').html('<i class="fas fa-plus"></i> Nueva Estaci√≥n');
            
            // Cargar compa√±√≠a y sucursales
            loadUserCompanyAndBranches();
            
            // Resetear el formulario
            $('#stationForm')[0].reset();
            $('#stationId').val('');
            $('#stationIsActive').prop('checked', true).trigger('change');
            $('#modalIconPreview').removeClass().addClass('fas fa-fire');
            $('#stationArea').empty().append('<option value="">Seleccione una sucursal primero...</option>');
            $('#stationModal').modal('show');
        }

        // Funci√≥n para cargar √°reas
        function loadAreas() {
            return new Promise((resolve, reject) => {
                $.get('/Station/GetAreas')
                    .done(function(response) {
                        if (response.success) {
                            const areaSelect = $('#stationArea');
                            areaSelect.empty();
                            areaSelect.append('<option value="">Seleccione un √°rea...</option>');
                            
                            if (response.data && response.data.length > 0) {
                                response.data.forEach(function(area) {
                                    areaSelect.append(`<option value="${area.id}">${area.name}</option>`);
                                });
                            }
                            
                            resolve();
                        } else {
                            reject(response.message || 'Error al cargar las √°reas');
                        }
                    })
                    .fail(function(xhr, status, error) {
                        reject('Error al cargar las √°reas');
                    });
            });
        }




    </script>
} 