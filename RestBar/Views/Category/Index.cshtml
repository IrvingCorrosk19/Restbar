@model IEnumerable<RestBar.Models.Category>

@{
    ViewData["Title"] = "Categor√≠as";
}

<style>
    :root {
        --primary-color: #2c3e50;
        --secondary-color: #34495e;
        --accent-color: #e67e22;
        --success-color: #27ae60;
        --danger-color: #e74c3c;
        --warning-color: #f39c12;
        --info-color: #3498db;
        --light-color: #ecf0f1;
        --dark-color: #2c3e50;
        --gradient-primary: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        --gradient-accent: linear-gradient(135deg, var(--accent-color), #d35400);
        --gradient-success: linear-gradient(135deg, var(--success-color), #229954);
        --gradient-danger: linear-gradient(135deg, var(--danger-color), #c0392b);
        --gradient-warning: linear-gradient(135deg, var(--warning-color), #e67e22);
        --gradient-info: linear-gradient(135deg, var(--info-color), #2980b9);
        --shadow-light: 0 4px 6px rgba(0, 0, 0, 0.1);
        --shadow-medium: 0 8px 15px rgba(0, 0, 0, 0.15);
        --shadow-heavy: 0 10px 30px rgba(0, 0, 0, 0.2);
        --border-radius: 20px;
        --transition: all 0.3s ease;
    }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        min-height: 100vh;
        color: var(--dark-color);
    }

    /* Hero Section */
    .hero-section {
        background: var(--gradient-primary);
        color: white;
        padding: 3rem 0;
        margin-bottom: 2rem;
        position: relative;
        overflow: hidden;
    }

    .hero-section::before {
        content: '';
        position: absolute;
        width: 200%;
        height: 200%;
        background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="10" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="10" cy="50" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="90" cy="30" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
        animation: float 20s ease-in-out infinite;
        opacity: 0.1;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); }
        50% { transform: translateY(-20px) rotate(180deg); }
    }

    .hero-content {
        position: relative;
        z-index: 1;
        text-align: center;
    }

    .hero-title {
        font-size: 3.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        animation: slideInFromTop 0.8s ease-out;
    }

    .hero-subtitle {
        font-size: 1.3rem;
        opacity: 0.9;
        margin-bottom: 2rem;
        animation: slideInFromBottom 0.8s ease-out;
    }

    @@keyframes slideInFromTop {
        0% { opacity: 0; transform: translateY(-50px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    @@keyframes slideInFromBottom {
        0% { opacity: 0; transform: translateY(50px); }
        100% { opacity: 1; transform: translateY(0); }
    }

    .hero-button {
        background: var(--gradient-accent);
        color: white;
        padding: 1rem 2rem;
        border: none;
        border-radius: var(--border-radius);
        font-size: 1.1rem;
        font-weight: 600;
        cursor: pointer;
        transition: var(--transition);
        box-shadow: var(--shadow-medium);
        text-decoration: none;
        display: inline-block;
        animation: pulse 2s ease-in-out infinite;
    }

    .hero-button:hover {
        transform: translateY(-3px);
        box-shadow: var(--shadow-heavy);
        color: white;
        text-decoration: none;
    }

    @@keyframes pulse {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
    }

    /* Success Message */
    .success-message {
        background: var(--gradient-success);
        color: white;
        padding: 1rem 2rem;
        border-radius: var(--border-radius);
        margin: 2rem auto;
        max-width: 800px;
        text-align: center;
        box-shadow: var(--shadow-light);
        animation: slideInFromTop 0.5s ease-out;
    }

    .success-message .btn-close {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        border-radius: 50%;
        width: 2rem;
        height: 2rem;
        opacity: 1;
        transition: var(--transition);
        filter: invert(1);
    }

    .success-message .btn-close:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: scale(1.1);
    }

    /* Main Content */
    .main-content {
        padding: 0 2rem;
        max-width: 1400px;
        margin: 0 auto;
    }

    /* Categories Section */
    .categories-section {
        background: white;
        padding: 2rem;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-light);
        position: relative;
        overflow: hidden;
    }

    .categories-section::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--gradient-info);
    }

    .categories-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .categories-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .category-card {
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-light);
        overflow: hidden;
        transition: var(--transition);
        position: relative;
        border: 2px solid transparent;
    }

    .category-card:hover {
        transform: translateY(-5px);
        box-shadow: var(--shadow-medium);
        border-color: var(--accent-color);
    }

    .category-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: var(--gradient-accent);
    }

    .category-card-header {
        padding: 1.5rem;
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }

    .category-name {
        font-size: 1.3rem;
        font-weight: 600;
        color: var(--primary-color);
        margin: 0;
    }

    .category-description {
        color: var(--secondary-color);
        margin: 0.75rem 0 0 0;
        font-size: 0.95rem;
        line-height: 1.5;
    }

    .category-card-body {
        padding: 1.5rem;
    }

    .category-status {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .category-badge {
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-size: 0.85rem;
        font-weight: 500;
        color: white;
        display: inline-block;
    }

    .category-badge.active {
        background: var(--gradient-success);
    }

    .category-badge.inactive {
        background: var(--gradient-danger);
    }

    .category-actions {
        display: flex;
        gap: 0.5rem;
    }

    .category-action-btn {
        padding: 0.5rem 1rem;
        border: 2px solid transparent;
        border-radius: 10px;
        font-size: 0.9rem;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .category-action-btn.edit {
        background: var(--gradient-info);
        color: white;
    }

    .category-action-btn.edit:hover {
        background: var(--info-color);
        transform: translateY(-2px);
        box-shadow: var(--shadow-light);
    }

    .category-action-btn.delete {
        background: var(--gradient-danger);
        color: white;
    }

    .category-action-btn.delete:hover {
        background: var(--danger-color);
        transform: translateY(-2px);
        box-shadow: var(--shadow-light);
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 3rem;
        color: var(--secondary-color);
    }

    .empty-state-icon {
        font-size: 4rem;
        color: var(--accent-color);
        margin-bottom: 1rem;
    }

    .empty-state-message {
        font-size: 1.2rem;
        font-weight: 500;
    }

    /* Modal Styles */
    .modal-content {
        border: none;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow-heavy);
        overflow: hidden;
    }

    .modal-header {
        background: var(--gradient-primary);
        color: white;
        padding: 1.5rem;
        border-bottom: none;
    }

    .modal-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin: 0;
    }

    .btn-close {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        border-radius: 50%;
        width: 2rem;
        height: 2rem;
        opacity: 1;
        transition: var(--transition);
    }

    .btn-close:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: scale(1.1);
    }

    .modal-body {
        padding: 2rem;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-label {
        display: block;
        font-weight: 500;
        color: var(--primary-color);
        margin-bottom: 0.5rem;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 2px solid #e1e8ed;
        border-radius: 12px;
        font-size: 1rem;
        transition: var(--transition);
        background: white;
        resize: vertical;
    }

    .form-control:focus {
        outline: none;
        border-color: var(--accent-color);
        box-shadow: 0 0 0 3px rgba(231, 126, 34, 0.1);
    }

    .form-control:disabled {
        background-color: #f8f9fa;
        color: #6c757d;
        cursor: not-allowed;
    }

    .form-control:disabled {
        background-color: #f8f9fa;
        color: #6c757d;
        cursor: not-allowed;
    }

    .form-check {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .form-check-input {
        width: 1.2rem;
        height: 1.2rem;
        border: 2px solid var(--accent-color);
        border-radius: 4px;
        transition: var(--transition);
    }

    .form-check-input:checked {
        background: var(--accent-color);
        border-color: var(--accent-color);
    }

    .form-check-label {
        font-weight: 500;
        color: var(--primary-color);
    }

    /* Form text styles */
    .form-text {
        font-size: 0.875rem;
        color: #6c757d;
        margin-top: 0.25rem;
    }

    .form-text i {
        margin-right: 0.25rem;
    }

    .modal-footer {
        padding: 1.5rem;
        background: #f8f9fa;
        border-top: 1px solid rgba(0, 0, 0, 0.05);
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: var(--gradient-accent);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-medium);
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #5a6268;
        transform: translateY(-2px);
    }

    .btn-danger {
        background: var(--gradient-danger);
        color: white;
    }

    .btn-danger:hover {
        background: var(--danger-color);
        transform: translateY(-2px);
        box-shadow: var(--shadow-medium);
    }

    /* Form text styles */
    .form-text {
        font-size: 0.875rem;
        color: #6c757d;
        margin-top: 0.25rem;
    }

    .form-text i {
        margin-right: 0.25rem;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .hero-title {
            font-size: 2.5rem;
        }

        .hero-subtitle {
            font-size: 1.1rem;
        }

        .main-content {
            padding: 0 1rem;
        }

        .categories-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<!-- Hero Section -->
<section class="hero-section">
    <div class="container">
        <div class="hero-content">
            <h1 class="hero-title">
                <i class="fas fa-tags"></i> Gesti√≥n de Categor√≠as
            </h1>
            <p class="hero-subtitle">
                Organiza y administra las categor√≠as de productos de tu restaurante
            </p>
            <button class="hero-button" onclick="openCreateModal()">
                <i class="fas fa-plus"></i> Nueva Categor√≠a
            </button>
        </div>
    </div>
</section>

<!-- Success Message -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="success-message alert alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<!-- Main Content -->
<div class="main-content">
    <!-- Categories Section -->
    <section class="categories-section">
        <h2 class="categories-title">
            <i class="fas fa-tags"></i> Categor√≠as del Sistema
        </h2>
        <div class="categories-grid">
            @if (Model.Any())
            {
                @foreach (var category in Model)
                {
                    <div class="category-card">
                        <div class="category-card-header">
                            <h3 class="category-name">@category.Name</h3>
                            <p class="category-description">
                                @(!string.IsNullOrWhiteSpace(category.Description) ? category.Description : "Sin descripci√≥n disponible")
                            </p>
                        </div>
                        <div class="category-card-body">
                            <div class="category-status">
                                <span class="category-badge @(category.IsActive ? "active" : "inactive")">
                                    @(category.IsActive ? "Activa" : "Inactiva")
                                </span>
                                <div class="category-actions">
                                                                         <button type="button" class="category-action-btn edit" onclick="editCategory('@category.Id', '@category.Name', '@category.Description', '@category.BranchId', '@category.IsActive.ToString().ToLower()')">
                                        <i class="fas fa-edit"></i> Editar
                                    </button>
                                    <button type="button" class="category-action-btn delete" 
                                            onclick="confirmDelete('@category.Id', '@category.Name')">
                                        <i class="fas fa-trash"></i> Eliminar
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-tags empty-state-icon"></i>
                    <p class="empty-state-message">No hay categor√≠as registradas</p>
                </div>
            }
        </div>
    </section>
</div>

<!-- Modal de Creaci√≥n -->
<div class="modal fade" id="createModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle">
                    <i class="fas fa-plus"></i> Nueva Categor√≠a
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createCategoryForm" autocomplete="off">
                <div class="modal-body">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                    
                    <!-- Informaci√≥n B√°sica -->
                    <div class="form-group">
                        <label for="Name" class="form-label">
                            <i class="fas fa-tag"></i> Nombre *
                        </label>
                        <input type="text" class="form-control" id="Name" name="Name" required placeholder="Ingrese el nombre de la categor√≠a" autocomplete="off" />
                    </div>
                    
                    <div class="form-group">
                        <label for="Description" class="form-label">
                            <i class="fas fa-align-left"></i> Descripci√≥n
                        </label>
                        <textarea class="form-control" id="Description" name="Description" rows="3" placeholder="Describa la categor√≠a (opcional)" autocomplete="off"></textarea>
                    </div>

                    <!-- Ubicaci√≥n Organizacional -->
                    <div class="form-group">
                        <label for="CompanyName" class="form-label">
                            <i class="fas fa-building"></i> Compa√±√≠a (Autom√°tica) *
                        </label>
                        <input type="text" class="form-control" id="CompanyName" name="CompanyName" readonly placeholder="Cargando compa√±√≠a..." autocomplete="off" />
                        <small class="form-text">
                            <i class="fas fa-info-circle"></i> La compa√±√≠a se asigna autom√°ticamente seg√∫n el usuario logueado
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <label for="BranchId" class="form-label">
                            <i class="fas fa-store"></i> Sucursal *
                        </label>
                        <select class="form-control" id="BranchId" name="BranchId" required autocomplete="off">
                            <option value="">Seleccione una sucursal...</option>
                        </select>
                        <small class="form-text">
                            <i class="fas fa-info-circle"></i> Seleccione la sucursal donde se crear√° la categor√≠a
                        </small>
                    </div>
                    
                    <div class="form-group">
                        <div class="form-check">
                            <input type="checkbox" class="form-check-input" id="IsActive" name="IsActive" checked />
                            <label class="form-check-label" for="IsActive">
                                <i class="fas fa-toggle-on"></i> Categor√≠a Activa
                            </label>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> Cancelar
                    </button>
                    <button type="button" class="btn btn-primary" id="saveCategoryBtn">
                        <i class="fas fa-save"></i> Guardar Categor√≠a
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Modal de Confirmaci√≥n de Eliminaci√≥n -->
<div class="modal fade" id="deleteModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-exclamation-triangle"></i> Confirmar Eliminaci√≥n
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>¬øEst√° seguro que desea eliminar la categor√≠a <strong id="categoryName"></strong>?</p>
                <p class="text-muted">Esta acci√≥n no se puede deshacer.</p>
            </div>
            <div class="modal-footer">
                <form id="deleteForm" asp-action="Delete" method="post">
                    <input type="hidden" id="categoryId" name="id" />
                    @Html.AntiForgeryToken()
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times"></i> Cancelar
                    </button>
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash"></i> Eliminar
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Variables globales
        let isEditMode = false;
        let currentCategoryId = null;

        // Funciones globales
        window.openCreateModal = function() {
            isEditMode = false;
            currentCategoryId = null;
            window.currentBranchId = null; // Limpiar branchId para crear nueva categor√≠a
            $('#modalTitle').html('<i class="fas fa-plus"></i> Nueva Categor√≠a');
            $('#saveCategoryBtn').html('<i class="fas fa-save"></i> Guardar Categor√≠a');
            loadUserCompanyAndBranches();
            $('#createModal').modal('show');
        };

        window.editCategory = function(id, name, description, branchId, isActive) {
            isEditMode = true;
            currentCategoryId = id;
            $('#modalTitle').html('<i class="fas fa-edit"></i> Editar Categor√≠a');
            $('#saveCategoryBtn').html('<i class="fas fa-save"></i> Actualizar Categor√≠a');
            
            // Llenar el formulario con los datos existentes
            $('#Name').val(name);
            $('#Description').val(description);
            
            // Manejar el checkbox correctamente
            console.log('üîç Valor isActive recibido:', isActive);
            console.log('üîç Tipo de isActive:', typeof isActive);
            const isActiveBool = isActive === 'true' || isActive === true;
            console.log('üîç Valor booleano calculado:', isActiveBool);
            $('#IsActive').prop('checked', isActiveBool);
            
            // Guardar el branchId para seleccionarlo despu√©s de cargar las sucursales
            window.currentBranchId = branchId;
            
            loadUserCompanyAndBranches();
            $('#createModal').modal('show');
        };

        window.deleteCategory = function(id) {
            // Implementar si es necesario
        };

        window.viewCategory = function(id) {
            // Implementar si es necesario
        };

        window.saveCategory = function() {
            // Implementar si es necesario
        };

        function confirmDelete(id, name) {
            document.getElementById('categoryId').value = id;
            document.getElementById('categoryName').textContent = name;
            new bootstrap.Modal(document.getElementById('deleteModal')).show();
        }

        // Cargar compa√±√≠a y sucursales
        function loadUserCompanyAndBranches() {
            console.log('üîç Iniciando carga de compa√±√≠a y sucursales...');
            
            // Cargar compa√±√≠a
            $.get('/Category/GetUserCompany', function(res) {
                console.log('üì° Respuesta de compa√±√≠a:', res);
                if (res.success) {
                    $('#CompanyName').val(res.data.companyName);
                    console.log('‚úÖ Compa√±√≠a cargada:', res.data.companyName);
                } else {
                    console.error('‚ùå Error al cargar compa√±√≠a:', res.message);
                }
            });

            // Cargar sucursales
            loadBranchesByUserCompany();
        }

        function loadBranchesByUserCompany() {
            console.log('üîç Iniciando carga de sucursales...');
            
            $.get('/Category/GetBranchesByUserCompany', function(res) {
                console.log('üì° Respuesta de sucursales:', res);
                
                const branchSelect = $('#BranchId');
                branchSelect.empty();
                branchSelect.append('<option value="">Seleccione una sucursal...</option>');
                
                if (res.success && res.data) {
                    console.log('‚úÖ Sucursales encontradas:', res.data.length);
                    res.data.forEach(function(branch) {
                        console.log('‚ûï Agregando sucursal:', branch.name);
                        branchSelect.append(`<option value="${branch.id}">${branch.name}</option>`);
                    });
                    
                    // Si estamos en modo edici√≥n, seleccionar la sucursal correcta
                    if (isEditMode && window.currentBranchId) {
                        console.log('üéØ Seleccionando sucursal para edici√≥n:', window.currentBranchId);
                        branchSelect.val(window.currentBranchId);
                        console.log('‚úÖ Sucursal seleccionada:', branchSelect.val());
                    }
                } else {
                    console.error('‚ùå Error al cargar sucursales:', res.message);
                }

                // Informaci√≥n de depuraci√≥n
                if (res.debug) {
                    console.log('=== INFORMACI√ìN DE DEPURACI√ìN ===');
                    console.log('Compa√±√≠a del usuario:', res.debug.userCompanyId);
                    console.log('Total de sucursales en BD:', res.debug.totalBranchesInDb);
                    console.log('Sucursales filtradas:', res.debug.filteredBranchesCount);
                    console.log('Todas las sucursales:', res.debug.allBranches);
                    console.log('=====================================');
                }
            });
        }

        // Limpiar el formulario cuando se cierra el modal
        $('#createModal').on('hidden.bs.modal', function () {
            $('#createCategoryForm')[0].reset();
            $('#CompanyName').val('');
            $('#BranchId').empty().append('<option value="">Seleccione una sucursal...</option>');
        });

        // Manejar la creaci√≥n/edici√≥n de categor√≠a v√≠a AJAX
        $('#saveCategoryBtn').on('click', function () {
            const form = $('#createCategoryForm');
            const data = {
                Name: form.find('[name="Name"]').val(),
                Description: form.find('[name="Description"]').val(),
                BranchId: form.find('[name="BranchId"]').val(),
                IsActive: form.find('[name="IsActive"]').is(':checked')
            };

            if (!data.Name) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'El nombre es requerido',
                    confirmButtonColor: '#e74c3c'
                });
                return;
            }

            if (!data.BranchId) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Debe seleccionar una sucursal',
                    confirmButtonColor: '#e74c3c'
                });
                return;
            }

            const isCreating = !isEditMode;
            const actionText = isCreating ? 'Creando' : 'Actualizando';
            const url = isCreating ? '/Category/CreateAjax' : `/Category/EditAjax/${currentCategoryId}`;

            Swal.fire({
                title: `${actionText} categor√≠a...`,
                allowOutsideClick: false,
                didOpen: () => { Swal.showLoading(); }
            });

            $.ajax({
                url: url,
                type: 'POST',
                data: data,
                success: function (res) {
                    Swal.close();
                    if (res.success) {
                        $('#createModal').modal('hide');
                        form[0].reset();
                        
                        if (isCreating) {
                            // Crear el nuevo elemento de categor√≠a
                            const newCategory = `
                                <div class="category-card">
                                    <div class="category-card-header">
                                        <h3 class="category-name">${data.Name}</h3>
                                        <p class="category-description">${data.Description || 'Sin descripci√≥n disponible'}</p>
                                    </div>
                                    <div class="category-card-body">
                                        <div class="category-status">
                                            <span class="category-badge ${data.IsActive ? 'active' : 'inactive'}">
                                                ${data.IsActive ? 'Activa' : 'Inactiva'}
                                            </span>
                                            <div class="category-actions">
                                                <button type="button" class="category-action-btn edit" onclick="editCategory('${res.data.id}', '${data.Name}', '${data.Description}', '${data.BranchId}', ${data.IsActive})">
                                                    <i class="fas fa-edit"></i> Editar
                                                </button>
                                                <button type="button" class="category-action-btn delete" 
                                                        onclick="confirmDelete('${res.data.id}', '${data.Name}')">
                                                    <i class="fas fa-trash"></i> Eliminar
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                            
                            // Agregar la nueva categor√≠a al inicio de la lista
                            $('.categories-grid').prepend(newCategory);
                            
                            // Eliminar el empty state si existe
                            $('.empty-state').remove();
                        } else {
                            // Actualizar la categor√≠a existente en el DOM
                            const categoryCard = $(`.category-card:has(button[onclick*="${currentCategoryId}"])`);
                            if (categoryCard.length) {
                                categoryCard.find('.category-name').text(data.Name);
                                categoryCard.find('.category-description').text(data.Description || 'Sin descripci√≥n disponible');
                                categoryCard.find('.category-badge').removeClass('active inactive').addClass(data.IsActive ? 'active' : 'inactive').text(data.IsActive ? 'Activa' : 'Inactiva');
                                
                                // Actualizar el onclick del bot√≥n editar
                                const editBtn = categoryCard.find('.category-action-btn.edit');
                                editBtn.attr('onclick', `editCategory('${currentCategoryId}', '${data.Name}', '${data.Description}', '${data.BranchId}', ${data.IsActive})`);
                            }
                        }
                        
                        Swal.fire({
                            icon: 'success',
                            title: '¬°√âxito!',
                            text: isCreating ? 'Categor√≠a creada correctamente.' : 'Categor√≠a actualizada correctamente.',
                            timer: 2000,
                            showConfirmButton: false,
                            confirmButtonColor: '#27ae60'
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: res.message || `No se pudo ${isCreating ? 'crear' : 'actualizar'} la categor√≠a.`,
                            confirmButtonColor: '#e74c3c'
                        });
                    }
                },
                error: function () {
                    Swal.close();
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: `No se pudo ${isCreating ? 'crear' : 'actualizar'} la categor√≠a.`,
                        confirmButtonColor: '#e74c3c'
                    });
                }
            });
        });
    </script>
} 