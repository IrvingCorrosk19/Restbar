@using RestBar.Models
@model List<RestBar.ViewModel.KitchenOrderViewModel>
@{
    Layout = "~/Views/Shared/_KitchenLayout.cshtml";
    string TimeAgo(DateTime? dt) {
        if (dt == null) return "-";
        var ts = DateTime.Now - dt.Value;
        if (ts.TotalMinutes < 1) return "Hace unos segundos";
        if (ts.TotalMinutes < 60) return $"Hace {Math.Floor(ts.TotalMinutes)} minuto{(ts.TotalMinutes < 2 ? "" : "s")}";
        if (ts.TotalHours < 24) return $"Hace {Math.Floor(ts.TotalHours)} hora{(ts.TotalHours < 2 ? "" : "s")}";
        return dt.Value.ToString("dd/MM/yyyy HH:mm");
    }
}

@Html.AntiForgeryToken()

@if (!Model.Any())
{
    <div class="no-orders-container">
        <div class="no-orders-content">
            <div class="no-orders-icon">
                <i class="fas fa-clipboard-check"></i>
            </div>
            <h3>No hay pedidos pendientes</h3>
            <p>Todos los pedidos están al día. ¡Excelente trabajo!</p>
        </div>
    </div>
}
else
{
    <div class="orders-stats">
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.Count</div>
                <div class="stat-label">Órdenes Activas</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-list-check"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.Sum(o => o.TotalItems)</div>
                <div class="stat-label">Items Totales</div>
            </div>
        </div>
        <div class="stat-card">
            <div class="stat-icon">
                <i class="fas fa-hourglass-half"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">@Model.Sum(o => o.PendingItems + o.PreparingItems)</div>
                <div class="stat-label">Items Pendientes</div>
            </div>
        </div>
    </div>

    <main class="orders-grid">
@foreach (var order in Model)
{
            <div class="order-card">
        @{
            string orderTitle = "";
                    string orderIcon = "";
                    string orderClass = "";
            switch (order.OrderType)
            {
                case OrderType.DineIn:
                    orderTitle = order.TableNumber ?? "Sin mesa";
                            orderIcon = "fas fa-chair";
                            orderClass = "order-dine-in";
                    break;
                case OrderType.TakeOut:
                    orderTitle = "Para Llevar";
                            orderIcon = "fas fa-shopping-bag";
                            orderClass = "order-takeout";
                    break;
                case OrderType.Delivery:
                    orderTitle = "Delivery";
                            orderIcon = "fas fa-motorcycle";
                            orderClass = "order-delivery";
                    break;
            }
        }
                
                <div class="order-header @orderClass">
                    <div class="order-title">
                        <i class="@orderIcon"></i>
                        <span class="order-name">@orderTitle</span>
                        <span class="order-id">#@order.OrderId.ToString().Substring(0, 8)</span>
                    </div>
                    <div class="order-time">
                        <i class="fas fa-clock"></i>
                        @TimeAgo(order.OpenedAt)
                    </div>
                </div>
        
        <!-- Resumen de estado de la orden -->
                <div class="order-status-section">
                    <div class="status-badge @(order.PendingItems > 0 ? "status-pending" : order.PreparingItems > 0 ? "status-preparing" : "status-ready")">
                        <i class="fas @(order.PendingItems > 0 ? "fa-hourglass-start" : order.PreparingItems > 0 ? "fa-fire" : "fa-check-circle")"></i>
                @order.StatusSummary
            </div>
            @if (order.TotalItems > order.PendingItems)
            {
                        <div class="items-summary">
                            <div class="summary-item summary-ready">
                                <i class="fas fa-check-circle"></i>
                                <span>@order.ReadyItems listo(s)</span>
                            </div>
                            <div class="summary-item summary-preparing">
                                <i class="fas fa-fire"></i>
                                <span>@order.PreparingItems preparando</span>
                            </div>
                </div>
            }
        </div>
        
                <!-- Barra de progreso mejorada -->
                <div class="progress-section">
                    <div class="progress-bar-container">
            <div class="progress-bar">
                            <div class="progress-fill" style="width: @(order.TotalItems > 0 ? ((order.ReadyItems + order.PreparingItems) * 100 / order.TotalItems) : 0)%">
                                <div class="progress-glow"></div>
                            </div>
            </div>
            <div class="progress-text">
                            <span class="progress-current">@(order.ReadyItems + order.PreparingItems)</span>
                            <span class="progress-separator">de</span>
                            <span class="progress-total">@order.TotalItems</span>
                            <span class="progress-label">items procesados</span>
                        </div>
            </div>
        </div>
        
        <!-- Items agrupados por KitchenStatus -->
        @{
            var pendingItems = order.Items.Where(i => i.KitchenStatus == "Pending").ToList();
            var sentItems = order.Items.Where(i => i.KitchenStatus == "Sent").ToList();
        }
        
                <div class="items-container">
        @if (pendingItems.Any())
        {
            <div class="items-section pending-section">
                            <div class="section-header">
                                <i class="fas fa-hourglass-start"></i>
                                <h4>Items Pendientes de Envío</h4>
                                <span class="items-count">@pendingItems.Count</span>
                            </div>
                            <ul class="items-list">
                    @foreach (var item in pendingItems)
                    {
                                    <li class="item item-pending">
                                        <div class="item-main">
                                            <span class="item-quantity">@item.Quantity×</span>
                            <span class="item-name">@item.ProductName</span>
                                            <div class="item-status-badge pending">
                                                <i class="fas fa-hourglass-start"></i>
                                                Pendiente
                                            </div>
                                        </div>
                            @if (!string.IsNullOrWhiteSpace(item.Notes))
                            {
                                            <div class="item-notes">
                                                <i class="fas fa-sticky-note"></i>
                                                @item.Notes
                                            </div>
                            }
                        </li>
                    }
                </ul>
            </div>
        }
        
        @if (sentItems.Any())
        {
            <div class="items-section sent-section">
                            <div class="section-header">
                                <i class="fas fa-fire"></i>
                                <h4>Items Enviados a Preparar</h4>
                                <span class="items-count">@sentItems.Count</span>
                            </div>
                            <ul class="items-list">
                    @foreach (var item in sentItems)
                    {
                                    <li class="item item-sent">
                                        <div class="item-main">
                                            <span class="item-quantity">@item.Quantity×</span>
                            <span class="item-name">@item.ProductName</span>
                                            <div class="item-status-badge preparing">
                                                <i class="fas fa-fire"></i>
                                                Preparando
                                            </div>
                            <button class="btn-mark-ready" data-order-id="@order.OrderId" data-item-id="@item.ItemId">
                                                <i class="fas fa-check"></i>
                                                Listo
                            </button>
                                        </div>
                            @if (!string.IsNullOrWhiteSpace(item.Notes))
                            {
                                            <div class="item-notes">
                                                <i class="fas fa-sticky-note"></i>
                                                @item.Notes
                                            </div>
                            }
                        </li>
                    }
                </ul>
            </div>
        }
                </div>
        
        @if (!string.IsNullOrWhiteSpace(order.Notes))
        {
                    <div class="order-notes">
                        <div class="notes-header">
                            <i class="fas fa-comment-alt"></i>
                            <span>Notas de la orden</span>
                        </div>
                        <div class="notes-content">@order.Notes</div>
                    </div>
                }
                
                <!-- Acciones de la orden -->
                <div class="order-actions">
        @if (sentItems.Any())
        {
            <button class="btn-ready-all" data-order-id="@order.OrderId">
                            <i class="fas fa-check-double"></i>
                            <span>Marcar Todos como Listos</span>
            </button>
        }
        else if (!pendingItems.Any() && !sentItems.Any())
        {
                        <div class="all-items-complete">
                            <i class="fas fa-trophy"></i>
                            <span>Todos los items de esta estación están listos</span>
            </div>
        }
                </div>
    </div>
}
</main>
}

@section Scripts {
<!-- SignalR -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>

<script>
    let signalRConnection = null;

    // Inicializar SignalR
    async function initializeSignalR() {
        try {
            signalRConnection = new signalR.HubConnectionBuilder()
                .withUrl("/orderHub")
                .withAutomaticReconnect()
                .build();

            // Configurar eventos de SignalR
            signalRConnection.on("NewOrder", (orderId, tableNumber) => {
                console.log(`[SignalR] NewOrder: ${orderId} -> ${tableNumber}`);
                showNewOrderNotification(orderId, tableNumber);
                // Recargar la página después de un breve delay
                setTimeout(() => {
                    location.reload();
                }, 2000);
            });

            signalRConnection.on("KitchenUpdate", () => {
                console.log(`[SignalR] KitchenUpdate`);
                showKitchenUpdateNotification();
                // Recargar la página después de un breve delay
                setTimeout(() => {
                    location.reload();
                }, 2000);
            });

            // Manejar reconexión
            signalRConnection.onreconnecting(() => {
                console.log("[SignalR] Reconectando...");
            });

            signalRConnection.onreconnected(() => {
                console.log("[SignalR] Reconectado");
                // Reunirse al grupo de cocina
                signalRConnection.invoke("JoinKitchenGroup");
            });

            await signalRConnection.start();
            console.log("[SignalR] Conectado al hub");

            // Unirse al grupo de cocina
            await signalRConnection.invoke("JoinKitchenGroup");
        } catch (error) {
            console.error("[SignalR] Error al conectar:", error);
        }
    }

    // Mostrar notificación de nueva orden
    function showNewOrderNotification(orderId, tableNumber) {
        // Crear notificación toast
        const toast = document.createElement('div');
        toast.className = 'kitchen-notification notification-new-order';
        toast.innerHTML = `
            <div class="notification-icon">
                <i class="fas fa-bell"></i>
            </div>
            <div class="notification-content">
                <div class="notification-title">Nueva Orden</div>
                <div class="notification-message">Nueva orden recibida para Mesa ${tableNumber}</div>
            </div>
            <button type="button" class="notification-close">
                <i class="fas fa-times"></i>
            </button>
        `;
        document.body.appendChild(toast);

        // Auto-remove after animation
        setTimeout(() => {
            toast.classList.add('notification-exit');
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
            }, 300);
        }, 5000);

        // Close button functionality
        toast.querySelector('.notification-close').addEventListener('click', () => {
            toast.classList.add('notification-exit');
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        });
    }

    // Mostrar notificación de actualización de cocina
    function showKitchenUpdateNotification() {
        // Crear notificación toast
        const toast = document.createElement('div');
        toast.className = 'kitchen-notification notification-update';
        toast.innerHTML = `
            <div class="notification-icon">
                <i class="fas fa-sync-alt"></i>
            </div>
            <div class="notification-content">
                <div class="notification-title">Actualización</div>
                <div class="notification-message">Se han actualizado los estados de los pedidos</div>
            </div>
            <button type="button" class="notification-close">
                <i class="fas fa-times"></i>
            </button>
        `;
        document.body.appendChild(toast);

        // Auto-remove after animation
        setTimeout(() => {
            toast.classList.add('notification-exit');
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
            }, 300);
        }, 3000);

        // Close button functionality
        toast.querySelector('.notification-close').addEventListener('click', () => {
            toast.classList.add('notification-exit');
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 300);
        });
    }

    // Inicializar SignalR cuando se carga la página
    document.addEventListener('DOMContentLoaded', function() {
        initializeSignalR();
    });

document.addEventListener('DOMContentLoaded', function() {
    console.log('[Frontend] DOM cargado, inicializando botones...');
    
    // Agregar event listeners a botones individuales "Listo"
    const markReadyButtons = document.querySelectorAll('.btn-mark-ready');
    console.log(`[Frontend] Encontrados ${markReadyButtons.length} botones individuales de "Listo"`);
    
    markReadyButtons.forEach((button, index) => {
        const orderId = button.getAttribute('data-order-id');
        const itemId = button.getAttribute('data-item-id');
        console.log(`[Frontend] Botón individual ${index + 1}: orderId = "${orderId}", itemId = "${itemId}"`);
        
        button.addEventListener('click', async function() {
            const orderId = this.getAttribute('data-order-id');
            const itemId = this.getAttribute('data-item-id');
            const itemLi = this.closest('li');
            
            console.log('[Frontend] Botón individual clickeado');
            console.log('[Frontend] orderId:', orderId);
            console.log('[Frontend] itemId:', itemId);
            
            if (!orderId || !itemId) {
                console.error('[Frontend] Error: Faltan IDs de orden o item');
                alert('Error: Faltan IDs de orden o item');
                return;
            }
            
            // Confirmar la acción
            if (!confirm('¿Estás seguro de que quieres marcar este item como listo?')) {
                console.log('[Frontend] Usuario canceló la operación');
                return;
            }
            
            // Deshabilitar el botón para evitar doble clic
            this.disabled = true;
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';
            
            try {
                const requestData = { 
                    orderId: orderId,
                    itemId: itemId
                };
                console.log('[Frontend] Datos a enviar:', requestData);
                
                const response = await fetch('/Order/MarkItemReady', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(requestData)
                });
                
                console.log('[Frontend] Respuesta del servidor - Status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Error del servidor: ${response.status} - ${errorText}`);
                }
                
                const result = await response.json();
                console.log('[Frontend] Resultado parseado:', result);
                
                if (result.success) {
                    console.log('[Frontend] Operación exitosa, actualizando UI...');
                    
                    // Cambiar el estado visual del item
                    itemLi.classList.remove('item-sent');
                    itemLi.classList.add('item-ready');
                    itemLi.querySelector('.item-status-badge').innerHTML = '<i class="fas fa-check-circle"></i> Listo';
                    itemLi.querySelector('.item-status-badge').className = 'item-status-badge ready';
                    itemLi.querySelector('.btn-mark-ready').remove();
                    
                    // Mostrar mensaje de éxito
                    showSuccessNotification('Item marcado como listo exitosamente');
                    
                    // Verificar si todos los items de la orden están listos
                    const card = this.closest('.order-card');
                    const remainingSentItems = card.querySelectorAll('.item-sent');
                    if (remainingSentItems.length === 0) {
                        // Todos los items están listos, actualizar la tarjeta
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    }
                } else {
                    throw new Error(result.message || 'Error desconocido');
                }
            } catch (error) {
                console.error('[Frontend] Error al marcar item como listo:', error);
                showErrorNotification('Error al marcar el item como listo: ' + error.message);
                
                // Restaurar el botón
                this.disabled = false;
                this.innerHTML = '<i class="fas fa-check"></i> Listo';
            }
        });
    });
    
    // Agregar event listeners a botones "Marcar Todos como Listos"
    const readyAllButtons = document.querySelectorAll('.btn-ready-all');
    console.log(`[Frontend] Encontrados ${readyAllButtons.length} botones de "Marcar Todos como Listos"`);
    
    readyAllButtons.forEach((button, index) => {
        const orderId = button.getAttribute('data-order-id');
        console.log(`[Frontend] Botón todos ${index + 1}: orderId = "${orderId}"`);
        
        button.addEventListener('click', async function() {
            const orderId = this.getAttribute('data-order-id');
            const card = this.closest('.order-card');
            
            console.log('[Frontend] Botón todos clickeado');
            console.log('[Frontend] orderId obtenido del atributo:', orderId);
            
            if (!orderId) {
                console.error('[Frontend] Error: No se encontró el ID de la orden');
                showErrorNotification('Error: No se encontró el ID de la orden');
                return;
            }
            
            // Confirmar la acción con modal personalizado
            const shouldProceed = await showConfirmModal(
                'Confirmar Acción',
                '¿Estás seguro de que quieres marcar todos los items enviados como listos?',
                'Esta acción marcará todos los items como listos simultáneamente.'
            );
            
            if (!shouldProceed) {
                console.log('[Frontend] Usuario canceló la operación');
                return;
            }
            
            // Deshabilitar el botón para evitar doble clic
            this.disabled = true;
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Procesando...';
            
            try {
                // Obtener todos los items enviados de esta orden
                const sentItems = card.querySelectorAll('.item-sent');
                console.log(`[Frontend] Items enviados encontrados: ${sentItems.length}`);
                
                // Marcar cada item como listo
                for (const itemLi of sentItems) {
                    const itemId = itemLi.querySelector('.btn-mark-ready').getAttribute('data-item-id');
                    
                    const requestData = { 
                        orderId: orderId,
                        itemId: itemId
                    };
                    
                    const response = await fetch('/Order/MarkItemReady', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify(requestData)
                    });
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Error del servidor: ${response.status} - ${errorText}`);
                    }
                    
                    const result = await response.json();
                    if (!result.success) {
                        throw new Error(result.message || 'Error desconocido');
                    }
                }
                
                console.log('[Frontend] Todos los items marcados como listos exitosamente');
                showSuccessNotification('Todos los items han sido marcados como listos exitosamente');
                
                // Recargar la página para mostrar el estado actualizado
                setTimeout(() => {
                    location.reload();
                }, 1000);
                
            } catch (error) {
                console.error('[Frontend] Error al marcar todos los items como listos:', error);
                showErrorNotification('Error al marcar los items como listos: ' + error.message);
                
                // Restaurar el botón
                this.disabled = false;
                this.innerHTML = '<i class="fas fa-check-double"></i> <span>Marcar Todos como Listos</span>';
            }
        });
    });
});

// Funciones para mostrar notificaciones mejoradas
function showSuccessNotification(message) {
    showNotification(message, 'success');
}

function showErrorNotification(message) {
    showNotification(message, 'error');
}

// Función para mostrar modal de confirmación personalizado
function showConfirmModal(title, message, description = '') {
    return new Promise((resolve) => {
        const modal = document.createElement('div');
        modal.className = 'kitchen-modal-overlay';
        modal.innerHTML = `
            <div class="kitchen-modal">
                <div class="modal-header">
                    <div class="modal-icon">
                        <i class="fas fa-question-circle"></i>
                    </div>
                    <h3 class="modal-title">${title}</h3>
                </div>
                <div class="modal-body">
                    <p class="modal-message">${message}</p>
                    ${description ? `<p class="modal-description">${description}</p>` : ''}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-cancel" data-action="cancel">
                        <i class="fas fa-times"></i>
                        Cancelar
                    </button>
                    <button type="button" class="btn-confirm" data-action="confirm">
                        <i class="fas fa-check"></i>
                        Confirmar
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        
        // Animar entrada
        setTimeout(() => {
            modal.classList.add('modal-active');
        }, 10);
        
        // Manejar eventos
        modal.addEventListener('click', (e) => {
            if (e.target === modal || e.target.closest('.btn-cancel')) {
                closeModal(false);
            } else if (e.target.closest('.btn-confirm')) {
                closeModal(true);
            }
        });
        
        // Cerrar con ESC
        const handleEsc = (e) => {
            if (e.key === 'Escape') {
                closeModal(false);
            }
        };
        
        document.addEventListener('keydown', handleEsc);
        
        function closeModal(result) {
            modal.classList.add('modal-exit');
            document.removeEventListener('keydown', handleEsc);
            setTimeout(() => {
                if (modal.parentNode) {
                    modal.parentNode.removeChild(modal);
                }
                resolve(result);
            }, 300);
        }
    });
}

function showNotification(message, type) {
    const notification = document.createElement('div');
    notification.className = `kitchen-notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-icon">
            <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'}"></i>
        </div>
        <div class="notification-content">
            <div class="notification-message">${message}</div>
        </div>
        <button type="button" class="notification-close">
            <i class="fas fa-times"></i>
        </button>
    `;
    document.body.appendChild(notification);

    // Auto-remove after animation
    setTimeout(() => {
        notification.classList.add('notification-exit');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 4000);

    // Close button functionality
    notification.querySelector('.notification-close').addEventListener('click', () => {
        notification.classList.add('notification-exit');
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    });
}
</script>
}

@section Styles {
<style>
/* ========================
   VARIABLES Y CONFIGURACIÓN GLOBAL
   ======================== */
:root {
    --kitchen-primary: #1e40af;
    --kitchen-primary-dark: #1e3a8a;
    --kitchen-success: #059669;
    --kitchen-success-light: #10b981;
    --kitchen-warning: #d97706;
    --kitchen-warning-light: #f59e0b;
    --kitchen-danger: #dc2626;
    --kitchen-danger-light: #ef4444;
    --kitchen-info: #0891b2;
    --kitchen-info-light: #06b6d4;
    
    --kitchen-bg-primary: #0f172a;
    --kitchen-bg-secondary: #1e293b;
    --kitchen-bg-tertiary: #334155;
    --kitchen-surface: #475569;
    
    --kitchen-text-primary: #f8fafc;
    --kitchen-text-secondary: #cbd5e1;
    --kitchen-text-muted: #94a3b8;
    
    --kitchen-border: #475569;
    --kitchen-border-light: #64748b;
    
    --kitchen-shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.3);
    --kitchen-shadow-md: 0 4px 16px rgba(0, 0, 0, 0.4);
    --kitchen-shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.5);
    
    --kitchen-radius-sm: 8px;
    --kitchen-radius-md: 12px;
    --kitchen-radius-lg: 16px;
    
    --kitchen-transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* ========================
   CONTENEDOR SIN ÓRDENES
   ======================== */
.no-orders-container {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 60vh;
    padding: 2rem;
}

.no-orders-content {
    text-align: center;
    max-width: 400px;
}

.no-orders-icon {
    font-size: 4rem;
    color: var(--kitchen-info-light);
    margin-bottom: 1.5rem;
    opacity: 0.8;
}

.no-orders-content h3 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--kitchen-text-primary);
    margin-bottom: 0.5rem;
}

.no-orders-content p {
    color: var(--kitchen-text-secondary);
    font-size: 1rem;
    line-height: 1.6;
}

/* ========================
   ESTADÍSTICAS SUPERIORES
   ======================== */
.orders-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    padding: 1rem 1.5rem;
    margin-bottom: 1rem;
}

.stat-card {
    background: linear-gradient(135deg, var(--kitchen-bg-secondary) 0%, var(--kitchen-bg-tertiary) 100%);
    border: 1px solid var(--kitchen-border);
    border-radius: var(--kitchen-radius-md);
    padding: 1.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    box-shadow: var(--kitchen-shadow-sm);
    transition: var(--kitchen-transition);
}

.stat-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--kitchen-shadow-md);
    border-color: var(--kitchen-border-light);
}

.stat-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--kitchen-primary) 0%, var(--kitchen-primary-dark) 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    color: white;
    box-shadow: var(--kitchen-shadow-sm);
}

.stat-content {
    flex: 1;
}

.stat-number {
    font-size: 1.75rem;
    font-weight: 700;
    color: var(--kitchen-text-primary);
    line-height: 1;
}

.stat-label {
    font-size: 0.875rem;
    color: var(--kitchen-text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-top: 0.25rem;
}

/* ========================
   GRILLA DE ÓRDENES
   ======================== */
.orders-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
    gap: 1.5rem;
    padding: 0 1.5rem 1.5rem;
}

/* ========================
   TARJETA DE ORDEN
   ======================== */
.order-card {
    background: linear-gradient(135deg, var(--kitchen-bg-secondary) 0%, #1e293b 50%, var(--kitchen-bg-secondary) 100%);
    border: 1px solid var(--kitchen-border);
    border-radius: var(--kitchen-radius-lg);
    overflow: hidden;
    box-shadow: var(--kitchen-shadow-md);
    transition: var(--kitchen-transition);
    position: relative;
}

.order-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, var(--kitchen-primary) 0%, var(--kitchen-info-light) 50%, var(--kitchen-primary) 100%);
    background-size: 200% 100%;
    animation: shimmer 3s ease-in-out infinite;
}

@@keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
}

.order-card:hover {
    transform: translateY(-4px);
    box-shadow: var(--kitchen-shadow-lg);
    border-color: var(--kitchen-border-light);
}

/* ========================
   HEADER DE ORDEN
   ======================== */
.order-header {
    padding: 1.25rem 1.5rem;
    background: linear-gradient(135deg, var(--kitchen-bg-tertiary) 0%, var(--kitchen-surface) 100%);
    border-bottom: 1px solid var(--kitchen-border);
    position: relative;
}

.order-header.order-dine-in {
    background: linear-gradient(135deg, #1e40af 0%, #1e3a8a 100%);
}

.order-header.order-takeout {
    background: linear-gradient(135deg, #059669 0%, #047857 100%);
}

.order-header.order-delivery {
    background: linear-gradient(135deg, #d97706 0%, #b45309 100%);
}

.order-title {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.5rem;
}

.order-title i {
    font-size: 1.125rem;
    color: rgba(255, 255, 255, 0.9);
}

.order-name {
    font-size: 1.125rem;
    font-weight: 600;
    color: white;
}

.order-id {
    background: rgba(255, 255, 255, 0.2);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: var(--kitchen-radius-sm);
    font-size: 0.75rem;
    font-family: monospace;
    font-weight: 500;
}

.order-time {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: rgba(255, 255, 255, 0.8);
    font-size: 0.875rem;
}

.order-time i {
    font-size: 0.875rem;
}

/* ========================
   SECCIÓN DE ESTADO
   ======================== */
.order-status-section {
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--kitchen-border);
}

.status-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    border-radius: var(--kitchen-radius-md);
    font-weight: 600;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.75rem;
}

.status-badge.status-pending {
    background: linear-gradient(135deg, var(--kitchen-warning) 0%, var(--kitchen-warning-light) 100%);
    color: white;
    box-shadow: 0 2px 8px rgba(217, 119, 6, 0.3);
}

.status-badge.status-preparing {
    background: linear-gradient(135deg, var(--kitchen-info) 0%, var(--kitchen-info-light) 100%);
    color: white;
    box-shadow: 0 2px 8px rgba(8, 145, 178, 0.3);
}

.status-badge.status-ready {
    background: linear-gradient(135deg, var(--kitchen-success) 0%, var(--kitchen-success-light) 100%);
    color: white;
    box-shadow: 0 2px 8px rgba(5, 150, 105, 0.3);
}

.items-summary {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
}

.summary-item {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    font-size: 0.8125rem;
    color: var(--kitchen-text-secondary);
}

.summary-item i {
    font-size: 0.75rem;
}

.summary-ready i {
    color: var(--kitchen-success-light);
}

.summary-preparing i {
    color: var(--kitchen-info-light);
}

/* ========================
   SECCIÓN DE PROGRESO
   ======================== */
.progress-section {
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--kitchen-border);
}

.progress-bar-container {
    position: relative;
    }
    
    .progress-bar {
        width: 100%;
    height: 10px;
    background: var(--kitchen-bg-tertiary);
    border-radius: 5px;
        overflow: hidden;
    position: relative;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.2);
    }
    
    .progress-fill {
        height: 100%;
    background: linear-gradient(90deg, var(--kitchen-success) 0%, var(--kitchen-success-light) 100%);
    transition: width 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    border-radius: 5px;
}

.progress-glow {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    animation: progress-glow 2s ease-in-out infinite;
}

@@keyframes progress-glow {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
    }
    
    .progress-text {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    margin-top: 0.5rem;
    font-size: 0.8125rem;
    color: var(--kitchen-text-secondary);
    justify-content: center;
}

.progress-current {
    font-weight: 600;
    color: var(--kitchen-success-light);
}

.progress-total {
    font-weight: 600;
    color: var(--kitchen-text-primary);
}

/* ========================
   CONTENEDOR DE ITEMS
   ======================== */
.items-container {
    padding: 1rem 1.5rem;
}

.items-section {
    margin-bottom: 1.5rem;
}

.items-section:last-child {
    margin-bottom: 0;
}

.section-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid var(--kitchen-border);
}

.section-header i {
    font-size: 1rem;
}

.section-header h4 {
    font-size: 0.9375rem;
    font-weight: 600;
    color: var(--kitchen-text-primary);
    margin: 0;
    flex: 1;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.items-count {
    background: var(--kitchen-bg-tertiary);
    color: var(--kitchen-text-primary);
    padding: 0.25rem 0.5rem;
    border-radius: var(--kitchen-radius-sm);
    font-size: 0.75rem;
    font-weight: 600;
    min-width: 24px;
        text-align: center;
}

.pending-section .section-header i {
    color: var(--kitchen-warning-light);
}

.pending-section .items-count {
    background: var(--kitchen-warning);
}

.sent-section .section-header i {
    color: var(--kitchen-info-light);
}

.sent-section .items-count {
    background: var(--kitchen-info);
}

/* ========================
   LISTA DE ITEMS
   ======================== */
.items-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.item {
    background: var(--kitchen-bg-tertiary);
    border: 1px solid var(--kitchen-border);
    border-radius: var(--kitchen-radius-sm);
    margin-bottom: 0.5rem;
    transition: var(--kitchen-transition);
    overflow: hidden;
}

.item:last-child {
    margin-bottom: 0;
}

.item:hover {
    border-color: var(--kitchen-border-light);
    box-shadow: var(--kitchen-shadow-sm);
}

.item-main {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.875rem;
}

.item-quantity {
    font-weight: 700;
    color: var(--kitchen-text-primary);
    min-width: 30px;
    font-size: 0.875rem;
}

.item-name {
    flex: 1;
        font-weight: 500;
    color: var(--kitchen-text-primary);
    font-size: 0.9375rem;
}

.item-status-badge {
    display: flex;
    align-items: center;
    gap: 0.375rem;
    padding: 0.375rem 0.75rem;
    border-radius: var(--kitchen-radius-sm);
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.item-status-badge.pending {
    background: var(--kitchen-warning);
    color: white;
}

.item-status-badge.preparing {
    background: var(--kitchen-info);
    color: white;
}

.item-status-badge.ready {
    background: var(--kitchen-success);
    color: white;
}

.item-notes {
    padding: 0.75rem 0.875rem;
    background: var(--kitchen-bg-secondary);
    border-top: 1px solid var(--kitchen-border);
    color: var(--kitchen-text-secondary);
    font-size: 0.8125rem;
    font-style: italic;
    display: flex;
    align-items: flex-start;
    gap: 0.5rem;
}

.item-notes i {
    margin-top: 0.125rem;
    color: var(--kitchen-warning-light);
    font-size: 0.75rem;
}

/* ========================
   BOTONES DE ACCIÓN
   ======================== */
    .btn-mark-ready {
    background: linear-gradient(135deg, var(--kitchen-success) 0%, var(--kitchen-success-light) 100%);
        color: white;
        border: none;
    padding: 0.5rem 0.875rem;
    border-radius: var(--kitchen-radius-sm);
    font-size: 0.75rem;
    font-weight: 600;
        cursor: pointer;
    transition: var(--kitchen-transition);
    display: flex;
    align-items: center;
    gap: 0.375rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    box-shadow: var(--kitchen-shadow-sm);
    }
    
    .btn-mark-ready:hover {
    transform: translateY(-1px);
    box-shadow: var(--kitchen-shadow-md);
    background: linear-gradient(135deg, var(--kitchen-success-light) 0%, var(--kitchen-success) 100%);
}

.btn-mark-ready:active {
    transform: translateY(0);
    }
    
    .btn-mark-ready:disabled {
    background: var(--kitchen-surface);
        cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

/* ========================
   NOTAS DE ORDEN
   ======================== */
.order-notes {
    padding: 1rem 1.5rem;
    border-bottom: 1px solid var(--kitchen-border);
    background: linear-gradient(135deg, var(--kitchen-bg-secondary) 0%, var(--kitchen-bg-tertiary) 100%);
}

.notes-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    color: var(--kitchen-warning-light);
    font-weight: 600;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
}

.notes-content {
    color: var(--kitchen-text-secondary);
    font-size: 0.9375rem;
    line-height: 1.5;
    font-style: italic;
}

/* ========================
   ACCIONES DE ORDEN
   ======================== */
.order-actions {
    padding: 1.25rem 1.5rem;
    }
    
    .btn-ready-all {
    background: linear-gradient(135deg, var(--kitchen-success) 0%, var(--kitchen-success-light) 100%);
        color: white;
        border: none;
    padding: 0.875rem 1.25rem;
    border-radius: var(--kitchen-radius-md);
    font-size: 0.9375rem;
    font-weight: 600;
        cursor: pointer;
    transition: var(--kitchen-transition);
        width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    box-shadow: var(--kitchen-shadow-md);
    }
    
    .btn-ready-all:hover {
    transform: translateY(-2px);
    box-shadow: var(--kitchen-shadow-lg);
    background: linear-gradient(135deg, var(--kitchen-success-light) 0%, var(--kitchen-success) 100%);
}

.btn-ready-all:active {
    transform: translateY(0);
    }
    
    .btn-ready-all:disabled {
    background: var(--kitchen-surface);
        cursor: not-allowed;
    transform: none;
    box-shadow: var(--kitchen-shadow-sm);
    }
    
.all-items-complete {
    background: linear-gradient(135deg, var(--kitchen-success) 0%, var(--kitchen-success-light) 100%);
        color: white;
    padding: 1rem 1.25rem;
    border-radius: var(--kitchen-radius-md);
        text-align: center;
    font-weight: 600;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    box-shadow: var(--kitchen-shadow-md);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-size: 0.9375rem;
}

/* ========================
   NOTIFICACIONES MEJORADAS
   ======================== */
.kitchen-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    background: var(--kitchen-bg-secondary);
    border: 1px solid var(--kitchen-border);
    border-radius: var(--kitchen-radius-md);
    box-shadow: var(--kitchen-shadow-lg);
    padding: 1rem;
    min-width: 300px;
    max-width: 400px;
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    animation: notification-enter 0.3s ease-out;
}

        @@keyframes notification-enter {
    from {
        opacity: 0;
        transform: translateX(100%) scale(0.95);
    }
    to {
        opacity: 1;
        transform: translateX(0) scale(1);
    }
}

.kitchen-notification.notification-exit {
    animation: notification-exit 0.3s ease-in;
}

        @@keyframes notification-exit {
    from {
        opacity: 1;
        transform: translateX(0) scale(1);
    }
    to {
        opacity: 0;
        transform: translateX(100%) scale(0.95);
    }
}

.notification-new-order {
    border-left: 4px solid var(--kitchen-warning-light);
}

.notification-update {
    border-left: 4px solid var(--kitchen-info-light);
}

.notification-success {
    border-left: 4px solid var(--kitchen-success-light);
}

.notification-error {
    border-left: 4px solid var(--kitchen-danger-light);
}

.notification-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
        display: flex;
        align-items: center;
    justify-content: center;
    font-size: 1.125rem;
    flex-shrink: 0;
}

.notification-new-order .notification-icon {
    background: var(--kitchen-warning);
    color: white;
}

.notification-update .notification-icon {
    background: var(--kitchen-info);
    color: white;
}

.notification-success .notification-icon {
    background: var(--kitchen-success);
    color: white;
}

.notification-error .notification-icon {
    background: var(--kitchen-danger);
    color: white;
}

.notification-content {
        flex: 1;
    }
    
.notification-title {
    font-weight: 600;
    color: var(--kitchen-text-primary);
    margin-bottom: 0.25rem;
    font-size: 0.9375rem;
}

.notification-message {
    color: var(--kitchen-text-secondary);
    font-size: 0.875rem;
    line-height: 1.4;
}

.notification-close {
    background: transparent;
    border: none;
    color: var(--kitchen-text-muted);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: var(--kitchen-radius-sm);
    transition: var(--kitchen-transition);
    flex-shrink: 0;
}

.notification-close:hover {
    background: var(--kitchen-bg-tertiary);
    color: var(--kitchen-text-secondary);
}

/* ========================
   MODAL DE CONFIRMACIÓN PERSONALIZADO
   ======================== */
.kitchen-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    backdrop-filter: blur(4px);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 50000;
    opacity: 0;
    transition: var(--kitchen-transition);
    padding: 1rem;
}

.kitchen-modal-overlay.modal-active {
    opacity: 1;
}

.kitchen-modal-overlay.modal-exit {
    opacity: 0;
    transform: scale(0.95);
}

.kitchen-modal {
    background: var(--kitchen-bg-secondary);
    border: 1px solid var(--kitchen-border);
    border-radius: var(--kitchen-radius-lg);
    box-shadow: var(--kitchen-shadow-lg);
    max-width: 450px;
    width: 100%;
    overflow: hidden;
    transform: scale(0.9);
    transition: var(--kitchen-transition);
}

.kitchen-modal-overlay.modal-active .kitchen-modal {
    transform: scale(1);
}

.kitchen-modal .modal-header {
    background: linear-gradient(135deg, var(--kitchen-bg-tertiary) 0%, var(--kitchen-bg-secondary) 100%);
    padding: 1.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    border-bottom: 1px solid var(--kitchen-border);
}

.kitchen-modal .modal-icon {
    width: 48px;
    height: 48px;
    background: linear-gradient(135deg, var(--kitchen-warning) 0%, var(--kitchen-warning-light) 100%);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    color: white;
    flex-shrink: 0;
}

.kitchen-modal .modal-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--kitchen-text-primary);
    margin: 0;
}

.kitchen-modal .modal-body {
    padding: 1.5rem;
}

.kitchen-modal .modal-message {
    color: var(--kitchen-text-primary);
    font-size: 1rem;
    line-height: 1.6;
    margin: 0 0 1rem 0;
    font-weight: 500;
}

.kitchen-modal .modal-description {
    color: var(--kitchen-text-secondary);
    font-size: 0.9rem;
    line-height: 1.5;
    margin: 0;
}

.kitchen-modal .modal-footer {
    padding: 1.5rem;
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    background: rgba(255, 255, 255, 0.02);
    border-top: 1px solid var(--kitchen-border);
}

.kitchen-modal .btn-cancel,
.kitchen-modal .btn-confirm {
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: var(--kitchen-radius-sm);
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: var(--kitchen-transition);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    min-width: 120px;
    justify-content: center;
}

.kitchen-modal .btn-cancel {
    background: var(--kitchen-bg-tertiary);
    color: var(--kitchen-text-secondary);
    border: 1px solid var(--kitchen-border);
}

.kitchen-modal .btn-cancel:hover {
    background: var(--kitchen-surface);
    color: var(--kitchen-text-primary);
    border-color: var(--kitchen-border-light);
}

.kitchen-modal .btn-confirm {
    background: linear-gradient(135deg, var(--kitchen-success) 0%, var(--kitchen-success-light) 100%);
    color: white;
    box-shadow: 0 2px 8px rgba(5, 150, 105, 0.3);
}

.kitchen-modal .btn-confirm:hover {
    background: linear-gradient(135deg, var(--kitchen-success-light) 0%, var(--kitchen-success) 100%);
    box-shadow: 0 4px 12px rgba(5, 150, 105, 0.4);
    transform: translateY(-1px);
}

/* ========================
   RESPONSIVIDAD
   ======================== */
        @@media (max-width: 768px) {
    .orders-stats {
        grid-template-columns: 1fr;
        padding: 1rem;
        gap: 0.75rem;
    }
    
    .orders-grid {
        grid-template-columns: 1fr;
        padding: 0 1rem 1rem;
        gap: 1rem;
    }
    
    .order-card {
        border-radius: var(--kitchen-radius-md);
    }
    
    .order-header,
    .order-status-section,
    .progress-section,
    .items-container,
    .order-notes,
    .order-actions {
        padding-left: 1rem;
        padding-right: 1rem;
    }
    
    .item-main {
        flex-wrap: wrap;
        gap: 0.5rem;
    }
    
    .btn-mark-ready {
        margin-top: 0.5rem;
        width: 100%;
        justify-content: center;
    }
    
    .kitchen-notification {
        right: 10px;
        left: 10px;
        min-width: auto;
    }
}

        @@media (max-width: 480px) {
    .stat-card {
        padding: 1rem;
    }
    
    .stat-icon {
        width: 40px;
        height: 40px;
        font-size: 1rem;
    }
    
    .stat-number {
        font-size: 1.5rem;
    }
    
    .order-header {
        padding: 1rem;
    }
    
    .order-title {
        flex-direction: column;
        align-items: flex-start;
        gap: 0.5rem;
    }
    
    .items-summary {
        flex-direction: column;
        gap: 0.5rem;
    }
}

/* ========================
   ANIMACIONES ADICIONALES
   ======================== */
.order-card {
    animation: card-enter 0.5s ease-out;
}

@@keyframes card-enter {
    from {
        opacity: 0;
        transform: translateY(20px) scale(0.95);
    }
    to {
        opacity: 1;
        transform: translateY(0) scale(1);
    }
}

.item {
    animation: item-enter 0.3s ease-out;
}

        @@keyframes item-enter {
    from {
        opacity: 0;
        transform: translateX(-10px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}
</style>
} 