@using RestBar.Models
@model List<RestBar.ViewModel.KitchenOrderViewModel>
@{
    Layout = "~/Views/Shared/_KitchenLayout.cshtml";
    string TimeAgo(DateTime? dt) {
        if (dt == null) return "-";
        var ts = DateTime.Now - dt.Value;
        if (ts.TotalMinutes < 1) return "Hace unos segundos";
        if (ts.TotalMinutes < 60) return $"Hace {Math.Floor(ts.TotalMinutes)} minuto{(ts.TotalMinutes < 2 ? "" : "s")}";
        if (ts.TotalHours < 24) return $"Hace {Math.Floor(ts.TotalHours)} hora{(ts.TotalHours < 2 ? "" : "s")}";
        return dt.Value.ToString("dd/MM/yyyy HH:mm");
    }
}

@Html.AntiForgeryToken()

<main class="grid">
@foreach (var order in Model)
{
    <div class="card">
        @{
            string orderTitle = "";
            switch (order.OrderType)
            {
                case OrderType.DineIn:
                    orderTitle = order.TableNumber ?? "Sin mesa";
                    break;
                case OrderType.TakeOut:
                    orderTitle = "Para Llevar";
                    break;
                case OrderType.Delivery:
                    orderTitle = "Delivery";
                    break;
            }
        }
        <h3>
            @orderTitle ¬∑ Pedido #@order.OrderId.ToString().Substring(0, 8)
        </h3>
        <div class="time-since">‚è±Ô∏è @TimeAgo(order.OpenedAt)</div>
        
        <!-- Resumen de estado de la orden -->
        <div class="order-status-summary">
            <div class="status-badge @(order.PendingItems > 0 ? "pending" : order.PreparingItems > 0 ? "preparing" : "ready")">
                @order.StatusSummary
            </div>
            @if (order.TotalItems > order.PendingItems)
            {
                <div class="completed-items-info">
                    <small class="text-muted">
                        ‚úÖ @order.ReadyItems listo(s) ¬∑ ‚è≥ @order.PreparingItems preparando
                    </small>
                </div>
            }
        </div>
        
        <!-- Barra de progreso -->
        <div class="progress-container">
            <div class="progress-bar">
                <div class="progress-fill" style="width: @(order.TotalItems > 0 ? ((order.ReadyItems + order.PreparingItems) * 100 / order.TotalItems) : 0)%"></div>
            </div>
            <div class="progress-text">
                @(order.ReadyItems + order.PreparingItems) de @order.TotalItems items procesados
            </div>
        </div>
        
        <!-- Items agrupados por KitchenStatus -->
        @{
            var pendingItems = order.Items.Where(i => i.KitchenStatus == "Pending").ToList();
            var sentItems = order.Items.Where(i => i.KitchenStatus == "Sent").ToList();
        }
        
        @if (pendingItems.Any())
        {
            <div class="items-section pending-section">
                <h4>‚è≥ Items Pendientes de Env√≠o:</h4>
                <ul class="items">
                    @foreach (var item in pendingItems)
                    {
                        <li class="item-pending">
                            <span class="item-quantity">@item.Quantity x</span>
                            <span class="item-name">@item.ProductName</span>
                            <span class="item-status">‚è≥ Pendiente</span>
                            @if (!string.IsNullOrWhiteSpace(item.Notes))
                            {
                                <div class="item-notes">üìù @item.Notes</div>
                            }
                        </li>
                    }
                </ul>
            </div>
        }
        
        @if (sentItems.Any())
        {
            <div class="items-section sent-section">
                <h4>üîÑ Items Enviados a Preparar:</h4>
                <ul class="items">
                    @foreach (var item in sentItems)
                    {
                        <li class="item-sent">
                            <span class="item-quantity">@item.Quantity x</span>
                            <span class="item-name">@item.ProductName</span>
                            <span class="item-status">üîÑ Enviado</span>
                            <button class="btn-mark-ready" data-order-id="@order.OrderId" data-item-id="@item.ItemId">
                                ‚úÖ Listo
                            </button>
                            @if (!string.IsNullOrWhiteSpace(item.Notes))
                            {
                                <div class="item-notes">üìù @item.Notes</div>
                            }
                        </li>
                    }
                </ul>
            </div>
        }
        
        @if (!string.IsNullOrWhiteSpace(order.Notes))
        {
            <div class="notes">üìù @order.Notes</div>
        }
        
        <!-- Bot√≥n para marcar todos los items enviados como listos -->
        @if (sentItems.Any())
        {
            <button class="btn-ready-all" data-order-id="@order.OrderId">
                ‚úÖ Marcar Todos como Listos
            </button>
        }
        else if (!pendingItems.Any() && !sentItems.Any())
        {
            <div class="all-items-ready">
                ‚úÖ Todos los items de esta estaci√≥n est√°n listos
            </div>
        }
    </div>
}
</main>

@section Scripts {
<!-- SignalR -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>

<script>
    let signalRConnection = null;

    // Inicializar SignalR
    async function initializeSignalR() {
        try {
            signalRConnection = new signalR.HubConnectionBuilder()
                .withUrl("/orderHub")
                .withAutomaticReconnect()
                .build();

            // Configurar eventos de SignalR
            signalRConnection.on("NewOrder", (orderId, tableNumber) => {
                console.log(`[SignalR] NewOrder: ${orderId} -> ${tableNumber}`);
                showNewOrderNotification(orderId, tableNumber);
                // Recargar la p√°gina despu√©s de un breve delay
                setTimeout(() => {
                    location.reload();
                }, 2000);
            });

            signalRConnection.on("KitchenUpdate", () => {
                console.log(`[SignalR] KitchenUpdate`);
                showKitchenUpdateNotification();
                // Recargar la p√°gina despu√©s de un breve delay
                setTimeout(() => {
                    location.reload();
                }, 2000);
            });

            // Manejar reconexi√≥n
            signalRConnection.onreconnecting(() => {
                console.log("[SignalR] Reconectando...");
            });

            signalRConnection.onreconnected(() => {
                console.log("[SignalR] Reconectado");
                // Reunirse al grupo de cocina
                signalRConnection.invoke("JoinKitchenGroup");
            });

            await signalRConnection.start();
            console.log("[SignalR] Conectado al hub");

            // Unirse al grupo de cocina
            await signalRConnection.invoke("JoinKitchenGroup");
        } catch (error) {
            console.error("[SignalR] Error al conectar:", error);
        }
    }

    // Mostrar notificaci√≥n de nueva orden
    function showNewOrderNotification(orderId, tableNumber) {
        // Crear notificaci√≥n toast
        const toast = document.createElement('div');
        toast.className = 'toast show position-fixed';
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; background-color: #28a745; color: white;';
        toast.innerHTML = `
            <div class="toast-header">
                <strong class="me-auto">Nueva Orden</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">
                Nueva orden recibida para Mesa ${tableNumber}
            </div>
        `;
        document.body.appendChild(toast);

        // Remover despu√©s de 5 segundos
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 5000);
    }

    // Mostrar notificaci√≥n de actualizaci√≥n de cocina
    function showKitchenUpdateNotification() {
        // Crear notificaci√≥n toast
        const toast = document.createElement('div');
        toast.className = 'toast show position-fixed';
        toast.style.cssText = 'top: 80px; right: 20px; z-index: 9999; background-color: #17a2b8; color: white;';
        toast.innerHTML = `
            <div class="toast-header">
                <strong class="me-auto">Actualizaci√≥n</strong>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
            </div>
            <div class="toast-body">
                Se han actualizado los estados de los pedidos
            </div>
        `;
        document.body.appendChild(toast);

        // Remover despu√©s de 3 segundos
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 3000);
    }

    // Inicializar SignalR cuando se carga la p√°gina
    document.addEventListener('DOMContentLoaded', function() {
        initializeSignalR();
    });

document.addEventListener('DOMContentLoaded', function() {
    console.log('[Frontend] DOM cargado, inicializando botones...');
    
    // Agregar event listeners a botones individuales "Listo"
    const markReadyButtons = document.querySelectorAll('.btn-mark-ready');
    console.log(`[Frontend] Encontrados ${markReadyButtons.length} botones individuales de "Listo"`);
    
    markReadyButtons.forEach((button, index) => {
        const orderId = button.getAttribute('data-order-id');
        const itemId = button.getAttribute('data-item-id');
        console.log(`[Frontend] Bot√≥n individual ${index + 1}: orderId = "${orderId}", itemId = "${itemId}"`);
        
        button.addEventListener('click', async function() {
            const orderId = this.getAttribute('data-order-id');
            const itemId = this.getAttribute('data-item-id');
            const itemLi = this.closest('li');
            
            console.log('[Frontend] Bot√≥n individual clickeado');
            console.log('[Frontend] orderId:', orderId);
            console.log('[Frontend] itemId:', itemId);
            
            if (!orderId || !itemId) {
                console.error('[Frontend] Error: Faltan IDs de orden o item');
                alert('Error: Faltan IDs de orden o item');
                return;
            }
            
            // Confirmar la acci√≥n
            if (!confirm('¬øEst√°s seguro de que quieres marcar este item como listo?')) {
                console.log('[Frontend] Usuario cancel√≥ la operaci√≥n');
                return;
            }
            
            // Deshabilitar el bot√≥n para evitar doble clic
            this.disabled = true;
            this.textContent = 'Procesando...';
            
            try {
                const requestData = { 
                    orderId: orderId,
                    itemId: itemId
                };
                console.log('[Frontend] Datos a enviar:', requestData);
                
                const response = await fetch('/Order/MarkItemReady', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify(requestData)
                });
                
                console.log('[Frontend] Respuesta del servidor - Status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Error del servidor: ${response.status} - ${errorText}`);
                }
                
                const result = await response.json();
                console.log('[Frontend] Resultado parseado:', result);
                
                if (result.success) {
                    console.log('[Frontend] Operaci√≥n exitosa, actualizando UI...');
                    
                    // Cambiar el estado visual del item
                    itemLi.classList.remove('item-sent');
                    itemLi.classList.add('item-ready');
                    itemLi.querySelector('.item-status').textContent = '‚úÖ Listo';
                    itemLi.querySelector('.btn-mark-ready').remove();
                    
                    // Mostrar mensaje de √©xito
                    alert('Item marcado como listo exitosamente');
                    
                    // Verificar si todos los items de la orden est√°n listos
                    const card = this.closest('.card');
                    const remainingSentItems = card.querySelectorAll('.item-sent');
                    if (remainingSentItems.length === 0) {
                        // Todos los items est√°n listos, actualizar la tarjeta
                        setTimeout(() => {
                            location.reload();
                        }, 1000);
                    }
                } else {
                    throw new Error(result.message || 'Error desconocido');
                }
            } catch (error) {
                console.error('[Frontend] Error al marcar item como listo:', error);
                alert('Error al marcar el item como listo: ' + error.message);
                
                // Restaurar el bot√≥n
                this.disabled = false;
                this.textContent = '‚úÖ Listo';
            }
        });
    });
    
    // Agregar event listeners a botones "Marcar Todos como Listos"
    const readyAllButtons = document.querySelectorAll('.btn-ready-all');
    console.log(`[Frontend] Encontrados ${readyAllButtons.length} botones de "Marcar Todos como Listos"`);
    
    readyAllButtons.forEach((button, index) => {
        const orderId = button.getAttribute('data-order-id');
        console.log(`[Frontend] Bot√≥n todos ${index + 1}: orderId = "${orderId}"`);
        
        button.addEventListener('click', async function() {
            const orderId = this.getAttribute('data-order-id');
            const card = this.closest('.card');
            
            console.log('[Frontend] Bot√≥n todos clickeado');
            console.log('[Frontend] orderId obtenido del atributo:', orderId);
            
            if (!orderId) {
                console.error('[Frontend] Error: No se encontr√≥ el ID de la orden');
                alert('Error: No se encontr√≥ el ID de la orden');
                return;
            }
            
            // Confirmar la acci√≥n
            if (!confirm('¬øEst√°s seguro de que quieres marcar todos los items enviados como listos?')) {
                console.log('[Frontend] Usuario cancel√≥ la operaci√≥n');
                return;
            }
            
            // Deshabilitar el bot√≥n para evitar doble clic
            this.disabled = true;
            this.textContent = 'Procesando...';
            
            try {
                // Obtener todos los items enviados de esta orden
                const sentItems = card.querySelectorAll('.item-sent');
                console.log(`[Frontend] Items enviados encontrados: ${sentItems.length}`);
                
                // Marcar cada item como listo
                for (const itemLi of sentItems) {
                    const itemId = itemLi.querySelector('.btn-mark-ready').getAttribute('data-item-id');
                    
                    const requestData = { 
                        orderId: orderId,
                        itemId: itemId
                    };
                    
                    const response = await fetch('/Order/MarkItemReady', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify(requestData)
                    });
                    
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Error del servidor: ${response.status} - ${errorText}`);
                    }
                    
                    const result = await response.json();
                    if (!result.success) {
                        throw new Error(result.message || 'Error desconocido');
                    }
                }
                
                console.log('[Frontend] Todos los items marcados como listos exitosamente');
                alert('Todos los items han sido marcados como listos exitosamente');
                
                // Recargar la p√°gina para mostrar el estado actualizado
                setTimeout(() => {
                    location.reload();
                }, 1000);
                
            } catch (error) {
                console.error('[Frontend] Error al marcar todos los items como listos:', error);
                alert('Error al marcar los items como listos: ' + error.message);
                
                // Restaurar el bot√≥n
                this.disabled = false;
                this.textContent = '‚úÖ Marcar Todos como Listos';
            }
        });
    });
});

// Agregar estilos CSS para la animaci√≥n
const style = document.createElement('style');
style.textContent = `
    @@keyframes fadeOut {
        from { opacity: 1; transform: scale(1); }
        to { opacity: 0; transform: scale(0.95); }
    }
    
    .progress-container {
        margin: 10px 0;
    }
    
    .progress-bar {
        width: 100%;
        height: 8px;
        background-color: #e0e0e0;
        border-radius: 4px;
        overflow: hidden;
    }
    
    .progress-fill {
        height: 100%;
        background-color: #10b981;
        transition: width 0.3s ease;
    }
    
    .progress-text {
        font-size: 0.8rem;
        color: #666;
        text-align: center;
        margin-top: 5px;
    }
    
    .item-ready {
        color: #10b981;
        font-weight: 500;
    }
    
    .item-pending {
        color: #f59e0b;
        font-weight: 500;
    }
    
    .item-sent {
        color: #3b82f6;
        font-weight: 500;
    }
    
    .item-status {
        font-size: 0.8rem;
        margin-left: auto;
    }
    
    .btn-mark-ready {
        background-color: #10b981;
        color: white;
        border: none;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.7rem;
        cursor: pointer;
        margin-left: 8px;
    }
    
    .btn-mark-ready:hover {
        background-color: #059669;
    }
    
    .btn-mark-ready:disabled {
        background-color: #9ca3af;
        cursor: not-allowed;
    }
    
    .btn-ready-all {
        background-color: #10b981;
        color: white;
        border: none;
        padding: 10px 15px;
        border-radius: 8px;
        font-weight: 500;
        cursor: pointer;
        width: 100%;
        margin-top: 10px;
    }
    
    .btn-ready-all:hover {
        background-color: #059669;
    }
    
    .btn-ready-all:disabled {
        background-color: #9ca3af;
        cursor: not-allowed;
    }
    
    .all-items-ready {
        background-color: #10b981;
        color: white;
        padding: 10px 15px;
        border-radius: 8px;
        text-align: center;
        font-weight: 500;
        margin-top: auto;
    }
    
    .items-section {
        margin: 10px 0;
    }
    
    .items-section h4 {
        font-size: 0.9rem;
        margin-bottom: 8px;
        color: #374151;
    }
    
    .pending-section h4 {
        color: #f59e0b;
    }
    
    .sent-section h4 {
        color: #3b82f6;
    }
    
    .items li {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 0;
        border-bottom: 1px solid #f3f4f6;
    }
    
    .items li:last-child {
        border-bottom: none;
    }
    
    .item-quantity {
        font-weight: bold;
        min-width: 30px;
    }
    
    .item-name {
        flex: 1;
    }
    
    .no-orders {
        text-align: center;
        padding: 2rem;
        color: #666;
    }
    
    .no-orders h3 {
        margin-bottom: 1rem;
        color: #333;
    }
`;
document.head.appendChild(style);
</script>
} 